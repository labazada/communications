!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^#define ALGORITHM_H$/;"	d
ALGORITHM_NAME_MAX_LENGTH	/usr/local/.home/manu/c++/comunicaciones/src/defines.h	/^#define ALGORITHM_NAME_MAX_LENGTH /;"	d
ALPHABET_H	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^#define ALPHABET_H$/;"	d
APPBASEDCHANNELORDERESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^#define APPBASEDCHANNELORDERESTIMATOR_H$/;"	d
APPbasedChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.cpp	/^APPbasedChannelOrderEstimator::APPbasedChannelOrderEstimator(int N,std::vector<int> candidateOrders): ChannelOrderEstimator(N,candidateOrders),_unnormalizedChannelOrderAPPs(candidateOrders.size()),_maxChannelOrder(candidateOrders[Util::max(candidateOrders)]),_nInputsXchannelOrderaxChannelOrder(_nInputs*_maxChannelOrder),_channelOrder2index(_maxChannelOrder+1,-1),_symbolVector(_nInputsXchannelOrderaxChannelOrder)$/;"	f	class:APPbasedChannelOrderEstimator
APPbasedChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    APPbasedChannelOrderEstimator(int N,std::vector<int> candidateOrders);$/;"	p	class:APPbasedChannelOrderEstimator
APPbasedChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^class APPbasedChannelOrderEstimator : public ChannelOrderEstimator$/;"	c
ARCHANNEL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.h	/^#define ARCHANNEL_H$/;"	d
ARMULTIUSERCDMACHANNEL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARMultiuserCDMAchannel.h	/^#define ARMULTIUSERCDMACHANNEL_H$/;"	d
ARMultiuserCDMAchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARMultiuserCDMAchannel.cpp	/^ARMultiuserCDMAchannel::ARMultiuserCDMAchannel(int length, const tMatrix& spreadingCodes, const ARprocess &arProcess): MultiuserCDMAchannel(length, spreadingCodes),_ARprocess(arProcess),_userCoeffs(_length)$/;"	f	class:ARMultiuserCDMAchannel
ARMultiuserCDMAchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARMultiuserCDMAchannel.h	/^    ARMultiuserCDMAchannel(int length, const tMatrix& spreadingCodes,const ARprocess &arProcess);$/;"	p	class:ARMultiuserCDMAchannel
ARMultiuserCDMAchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARMultiuserCDMAchannel.h	/^class ARMultiuserCDMAchannel : public MultiuserCDMAchannel$/;"	c
ARPROCESS_H	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^#define ARPROCESS_H$/;"	d
ARchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.cpp	/^ARchannel::ARchannel(const ARchannel &archannel):StillMemoryMIMOChannel(archannel),_channelMatrices(new tMatrix[_length]),_ARproc(archannel._ARproc)$/;"	f	class:ARchannel
ARchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.cpp	/^ARchannel::ARchannel(int nInputs, int nOutputs, int memory, int length, ARprocess ARproc): StillMemoryMIMOChannel(nInputs, nOutputs, memory, length),_ARproc(ARproc)$/;"	f	class:ARchannel
ARchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.h	/^	ARchannel(const ARchannel &archannel);$/;"	p	class:ARchannel
ARchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.h	/^	ARchannel(int nInputs, int nOutputs, int memory, int length,ARprocess ARproc);$/;"	p	class:ARchannel
ARchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.h	/^class ARchannel : public StillMemoryMIMOChannel$/;"	c
ARcoefficients	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    std::vector<double> ARcoefficients;$/;"	m	class:SMCSystem
ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.cpp	/^ARprocess::ARprocess(const ARprocess &arprocess):_coefficients(arprocess._coefficients),_noiseVariance(arprocess._noiseVariance),_noiseMean(arprocess._noiseMean),_nCoefficients(arprocess._nCoefficients),_rows(arprocess._rows),_columns(arprocess._columns),_iNextMatrix(arprocess._iNextMatrix),_iterationsForConvergence(arprocess._iterationsForConvergence),_buffer(new tMatrix*[_nCoefficients])\/*,_randomGenerator(arprocess._randomGenerator)*\/$/;"	f	class:ARprocess
ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.cpp	/^ARprocess::ARprocess(tMatrix seed,int order,double velocity,double carrierFrequency,double T):_rows(seed.rows()),_columns(seed.cols())$/;"	f	class:ARprocess
ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.cpp	/^ARprocess::ARprocess(tMatrix seed,vector<double> coefficients,double noiseVariance):_coefficients(coefficients),_noiseVariance(noiseVariance),_nCoefficients(coefficients.size()),_rows(seed.rows()),_columns(seed.cols())$/;"	f	class:ARprocess
ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	ARprocess(const ARprocess &arprocess);$/;"	p	class:ARprocess
ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	ARprocess(tMatrix seed,int order,double velocity,double carrierFrequency,double T);$/;"	p	class:ARprocess
ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	ARprocess(tMatrix seed,vector<double> coefficients,double noiseVariance);$/;"	p	class:ARprocess
ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^class ARprocess{$/;"	c
ARvariance	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    double ARvariance;$/;"	m	class:SMCSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    virtual void AddAlgorithms() = 0;$/;"	p	class:BaseSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.cpp	/^void CDMASystem::AddAlgorithms()$/;"	f	class:CDMASystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    virtual void AddAlgorithms();$/;"	p	class:CDMASystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.cpp	/^void ChannelOrderEstimationSystem::AddAlgorithms()$/;"	f	class:ChannelOrderEstimationSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^	virtual void AddAlgorithms();$/;"	p	class:ChannelOrderEstimationSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.cpp	/^void Elsevier2007System::AddAlgorithms()$/;"	f	class:Elsevier2007System
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    virtual void AddAlgorithms();$/;"	p	class:Elsevier2007System
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.cpp	/^void LMSmuTestSystem::AddAlgorithms()$/;"	f	class:LMSmuTestSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    virtual void AddAlgorithms();$/;"	p	class:LMSmuTestSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.cpp	/^void PSPvsPSPBasedSMCSystem::AddAlgorithms()$/;"	f	class:PSPvsPSPBasedSMCSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    virtual void AddAlgorithms();$/;"	p	class:PSPvsPSPBasedSMCSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.cpp	/^void PSPvsSMCSystem::AddAlgorithms()$/;"	f	class:PSPvsSMCSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    virtual void AddAlgorithms();$/;"	p	class:PSPvsSMCSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/Rev2TVT2007System.cpp	/^void Rev2TVT2007System::AddAlgorithms()$/;"	f	class:Rev2TVT2007System
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/Rev2TVT2007System.h	/^    virtual void AddAlgorithms();$/;"	p	class:Rev2TVT2007System
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.cpp	/^void TVT2007System::AddAlgorithms()$/;"	f	class:TVT2007System
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    virtual void AddAlgorithms();$/;"	p	class:TVT2007System
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.cpp	/^void TesisComplejidadReducidaBesselNumeroParticulasSystem::AddAlgorithms()$/;"	f	class:TesisComplejidadReducidaBesselNumeroParticulasSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.h	/^    virtual void AddAlgorithms();$/;"	p	class:TesisComplejidadReducidaBesselNumeroParticulasSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.cpp	/^void TesisComplejidadReducidaSystem::AddAlgorithms()$/;"	f	class:TesisComplejidadReducidaSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    virtual void AddAlgorithms();$/;"	p	class:TesisComplejidadReducidaSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.cpp	/^void TesisOrdenCanalDesconocidoSystem::AddAlgorithms()$/;"	f	class:TesisOrdenCanalDesconocidoSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    virtual void AddAlgorithms();$/;"	p	class:TesisOrdenCanalDesconocidoSystem
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.cpp	/^void WSA08System::AddAlgorithms()$/;"	f	class:WSA08System
AddAlgorithms	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    virtual void AddAlgorithms();$/;"	p	class:WSA08System
Algorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.cpp	/^Algorithm::Algorithm(string name, Alphabet  alphabet,int L,int Nr,int N,int iLastSymbolVectorToBeDetected):_name(name),_alphabet(alphabet),_nOutputs(L),_Nr(Nr),_nInputs(N),_iLastSymbolVectorToBeDetected(iLastSymbolVectorToBeDetected)$/;"	f	class:Algorithm
Algorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    Algorithm(string name, Alphabet  alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected);$/;"	p	class:Algorithm
Algorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^class Algorithm{$/;"	c
AllElementsNullException	/usr/local/.home/manu/c++/comunicaciones/util/utilExceptions.h	/^		AllElementsNullException(string s) : runtime_error(s) { }$/;"	f	class:AllElementsNullException
AllElementsNullException	/usr/local/.home/manu/c++/comunicaciones/util/utilExceptions.h	/^class AllElementsNullException : public runtime_error$/;"	c
Alphabet	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.cpp	/^Alphabet::Alphabet(int nBitsPorSimbolo,int longitudAlphabet,vector<vector<tBit> > secuenciasBits,vector<tSymbol> simbolos):_symbols(simbolos),_bitsSequences(secuenciasBits),_nBitsBySymbol(secuenciasBits[0].size()),_length(secuenciasBits.size())$/;"	f	class:Alphabet
Alphabet	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.cpp	/^Alphabet::Alphabet(vector<tSymbol> simbolos):_symbols(simbolos),_bitsSequences(simbolos.size(),vector<tBit>(0)),_nBitsBySymbol(0),_length(simbolos.size())$/;"	f	class:Alphabet
Alphabet	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        Alphabet(int nBitsPorSimbolo,int longitudAlphabet,std::vector<std::vector<tBit> > secuenciasBits,std::vector<tSymbol> simbolos);$/;"	p	class:Alphabet
Alphabet	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        Alphabet(std::vector<tSymbol> simbolos);        $/;"	p	class:Alphabet
Alphabet	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^class Alphabet$/;"	c
BASESYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^#define BASESYSTEM_H$/;"	d
BERComputingChecks	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.cpp	/^void TransmissionUtil::BERComputingChecks(const Bits &bits1,int from1,int to1,const Bits &bits2,int from2,int to2)$/;"	f	class:TransmissionUtil
BERComputingChecks	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.h	/^    static void BERComputingChecks(const Bits &bits1,int from1,int to1,const Bits &bits2,int from2,int to2);$/;"	p	class:TransmissionUtil
BESSELCHANNEL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.h	/^#define BESSELCHANNEL_H$/;"	d
BESTPARTICLESRESAMPLINGALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/BestParticlesResamplingAlgorithm.h	/^#define BESTPARTICLESRESAMPLINGALGORITHM_H$/;"	d
BITS_H	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^#define BITS_H$/;"	d
BaseSystem	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^BaseSystem::BaseSystem()$/;"	f	class:BaseSystem
BaseSystem	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    BaseSystem();$/;"	p	class:BaseSystem
BaseSystem	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^class BaseSystem{$/;"	c
BeforeEndingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^void BaseSystem::BeforeEndingAlgorithm(int iAlgorithm)$/;"	f	class:BaseSystem
BeforeEndingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    virtual void BeforeEndingAlgorithm(int iAlgorithm);$/;"	p	class:BaseSystem
BeforeEndingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.cpp	/^void ChannelOrderEstimationSystem::BeforeEndingAlgorithm(int iAlgorithm)$/;"	f	class:ChannelOrderEstimationSystem
BeforeEndingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^    virtual void BeforeEndingAlgorithm(int iAlgorithm);$/;"	p	class:ChannelOrderEstimationSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^void BaseSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:BaseSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:BaseSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.cpp	/^void CDMASystem::BeforeEndingFrame(int iFrame)$/;"	f	class:CDMASystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:CDMASystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.cpp	/^void ChannelOrderEstimationSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:ChannelOrderEstimationSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:ChannelOrderEstimationSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.cpp	/^void Elsevier2007ARChannelSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:Elsevier2007ARChannelSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:Elsevier2007ARChannelSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.cpp	/^void Elsevier2007BesselChannelSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:Elsevier2007BesselChannelSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:Elsevier2007BesselChannelSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.cpp	/^void LMSmuTestSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:LMSmuTestSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:LMSmuTestSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.cpp	/^void PSPvsPSPBasedSMCSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:PSPvsPSPBasedSMCSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:PSPvsPSPBasedSMCSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.cpp	/^void PSPvsSMCSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:PSPvsSMCSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:PSPvsSMCSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.cpp	/^void SMCSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:SMCSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:SMCSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.cpp	/^void TVT2007System::BeforeEndingFrame(int iFrame)$/;"	f	class:TVT2007System
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:TVT2007System
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.cpp	/^void TesisComplejidadReducidaARSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:TesisComplejidadReducidaARSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:TesisComplejidadReducidaARSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.cpp	/^void TesisComplejidadReducidaBesselNumeroParticulasSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:TesisComplejidadReducidaBesselNumeroParticulasSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:TesisComplejidadReducidaBesselNumeroParticulasSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.cpp	/^void TesisComplejidadReducidaBesselSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:TesisComplejidadReducidaBesselSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:TesisComplejidadReducidaBesselSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.cpp	/^void TesisComplejidadReducidaSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:TesisComplejidadReducidaSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:TesisComplejidadReducidaSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.cpp	/^void TesisOrdenCanalDesconocidoARSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:TesisOrdenCanalDesconocidoARSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:TesisOrdenCanalDesconocidoARSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.cpp	/^void TesisOrdenCanalDesconocidoBesselSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:TesisOrdenCanalDesconocidoBesselSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:TesisOrdenCanalDesconocidoBesselSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.cpp	/^void TesisOrdenCanalDesconocidoSystem::BeforeEndingFrame(int iFrame)$/;"	f	class:TesisOrdenCanalDesconocidoSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:TesisOrdenCanalDesconocidoSystem
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.cpp	/^void WSA08System::BeforeEndingFrame(int iFrame)$/;"	f	class:WSA08System
BeforeEndingFrame	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    virtual void BeforeEndingFrame(int iFrame);$/;"	p	class:WSA08System
BeforeResamplingProcess	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^	virtual void BeforeResamplingProcess(int iProcessedObservation, const tMatrix& observations, const vector< double > &noiseVariances) {}$/;"	f	class:USIS
BeforeResamplingProcess	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.cpp	/^void USIS2SISAlgorithm::BeforeResamplingProcess(int iProcessedObservation, const tMatrix& observations, const vector< double > &noiseVariances)$/;"	f	class:USIS2SISAlgorithm
BeforeResamplingProcess	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.h	/^    virtual void BeforeResamplingProcess(int iProcessedObservation, const tMatrix& observations, const vector< double > &noiseVariances);$/;"	p	class:USIS2SISAlgorithm
BesselChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.cpp	/^BesselChannel::BesselChannel(int nInputs, int nOutputs, int memory, int length, double velocity, double carrierFrequency, double T, const DelayPowerProfile &powerProfile): StillMemoryMIMOChannel(nInputs, nOutputs, memory, length)$/;"	f	class:BesselChannel
BesselChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.h	/^    BesselChannel(int nInputs, int nOutputs, int memory, int length, double velocity, double carrierFrequency, double T, const DelayPowerProfile &powerProfile);$/;"	p	class:BesselChannel
BesselChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.h	/^class BesselChannel : public StillMemoryMIMOChannel$/;"	c
BestChannelOrderIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^    int BestChannelOrderIndex(int iBestParticle) { return 0;}$/;"	f	class:ISIS
BestChannelOrderIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.cpp	/^int MLSDmAlgorithm::BestChannelOrderIndex(int iBestParticle)$/;"	f	class:MLSDmAlgorithm
BestChannelOrderIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    int BestChannelOrderIndex(int iBestParticle);$/;"	p	class:MLSDmAlgorithm
BestChannelOrderIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual int BestChannelOrderIndex(int iBestParticle) = 0;$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
BestChannelOrderIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.cpp	/^int USIS::BestChannelOrderIndex(int iBestParticle)$/;"	f	class:USIS
BestChannelOrderIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    int BestChannelOrderIndex(int iBestParticle);$/;"	p	class:USIS
BestPairStateSurvivor	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^void PSPAlgorithm::BestPairStateSurvivor(int &bestState,int &bestSurvivor)$/;"	f	class:PSPAlgorithm
BestPairStateSurvivor	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	void BestPairStateSurvivor(int &bestState,int &bestSurvivor);$/;"	p	class:PSPAlgorithm
BestParticlesResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/BestParticlesResamplingAlgorithm.cpp	/^BestParticlesResamplingAlgorithm::BestParticlesResamplingAlgorithm(ResamplingCriterion resamplingCriterion): ResamplingAlgorithm(resamplingCriterion)$/;"	f	class:BestParticlesResamplingAlgorithm
BestParticlesResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/BestParticlesResamplingAlgorithm.h	/^    BestParticlesResamplingAlgorithm(ResamplingCriterion resamplingCriterion);$/;"	p	class:BestParticlesResamplingAlgorithm
BestParticlesResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/BestParticlesResamplingAlgorithm.h	/^class BestParticlesResamplingAlgorithm : public ResamplingAlgorithm$/;"	c
BestState	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    int BestState()$/;"	f	class:ViterbiAlgorithm
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^Bits::Bits()$/;"	f	class:Bits
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^Bits::Bits(const Bits& bits):$/;"	f	class:Bits
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^Bits::Bits(int nStreams, int nBitsByStream,Random &randomGenerator):_nStreams(nStreams),_nBitsByStream(nBitsByStream),_nBits(nStreams*nBitsByStream)$/;"	f	class:Bits
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^Bits::Bits(tBit *matrix,int nStreams,int nBitsByStream): _nStreams(nStreams),_nBitsByStream(nBitsByStream),_nBits(nStreams*nBitsByStream),_matrix(matrix)$/;"	f	class:Bits
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    Bits();$/;"	p	class:Bits
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    Bits(const Bits& bits);$/;"	p	class:Bits
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    Bits(int nStreams, int nBitsByStream,Random &randomGenerator);$/;"	p	class:Bits
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    Bits(tBit *matrix,int nStreams,int nBitsByStream);$/;"	p	class:Bits
Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^class Bits{$/;"	c
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    virtual void BuildChannel() = 0;$/;"	p	class:BaseSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.cpp	/^void CDMASystem::BuildChannel()$/;"	f	class:CDMASystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    virtual void BuildChannel();    $/;"	p	class:CDMASystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.cpp	/^void Elsevier2007ARChannelSystem::BuildChannel()$/;"	f	class:Elsevier2007ARChannelSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.h	/^    virtual void BuildChannel();$/;"	p	class:Elsevier2007ARChannelSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.cpp	/^void Elsevier2007BesselChannelSystem::BuildChannel()$/;"	f	class:Elsevier2007BesselChannelSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^    virtual void BuildChannel();$/;"	p	class:Elsevier2007BesselChannelSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.cpp	/^void LMSmuTestSystem::BuildChannel()$/;"	f	class:LMSmuTestSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    virtual void BuildChannel();$/;"	p	class:LMSmuTestSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.cpp	/^void PSPvsPSPBasedSMCSystem::BuildChannel()$/;"	f	class:PSPvsPSPBasedSMCSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    virtual void BuildChannel();$/;"	p	class:PSPvsPSPBasedSMCSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.cpp	/^void PSPvsSMCSystem::BuildChannel()$/;"	f	class:PSPvsSMCSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    virtual void BuildChannel();$/;"	p	class:PSPvsSMCSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.cpp	/^void TVT2007System::BuildChannel()$/;"	f	class:TVT2007System
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    virtual void BuildChannel();$/;"	p	class:TVT2007System
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.cpp	/^void TesisComplejidadReducidaARSystem::BuildChannel()$/;"	f	class:TesisComplejidadReducidaARSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.h	/^    virtual void BuildChannel();$/;"	p	class:TesisComplejidadReducidaARSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.cpp	/^void TesisComplejidadReducidaBesselSystem::BuildChannel()$/;"	f	class:TesisComplejidadReducidaBesselSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^    virtual void BuildChannel();$/;"	p	class:TesisComplejidadReducidaBesselSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.cpp	/^void TesisOrdenCanalDesconocidoARSystem::BuildChannel()$/;"	f	class:TesisOrdenCanalDesconocidoARSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.h	/^    virtual void BuildChannel();$/;"	p	class:TesisOrdenCanalDesconocidoARSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.cpp	/^void TesisOrdenCanalDesconocidoBesselSystem::BuildChannel()$/;"	f	class:TesisOrdenCanalDesconocidoBesselSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^    virtual void BuildChannel();$/;"	p	class:TesisOrdenCanalDesconocidoBesselSystem
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.cpp	/^void WSA08System::BuildChannel()$/;"	f	class:WSA08System
BuildChannel	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    virtual void BuildChannel();$/;"	p	class:WSA08System
CDMAKALMANESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.h	/^#define CDMAKALMANESTIMATOR_H$/;"	d
CDMAKNOWNCHANNELCHANNELMATRIXESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.h	/^#define CDMAKNOWNCHANNELCHANNELMATRIXESTIMATOR_H$/;"	d
CDMAKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.cpp	/^CDMAKalmanEstimator::CDMAKalmanEstimator(const CDMAKalmanEstimator& cdmaKalmanEstimator):KalmanEstimator(cdmaKalmanEstimator),_spreadingCodes(cdmaKalmanEstimator._spreadingCodes)$/;"	f	class:CDMAKalmanEstimator
CDMAKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.cpp	/^CDMAKalmanEstimator::CDMAKalmanEstimator(const tMatrix& initialEstimation, const tMatrix& variances, vector< double > ARcoefficients, double ARvariance, const tMatrix &spreadingCodes): KalmanEstimator(initialEstimation, variances, spreadingCodes.cols(), ARcoefficients, ARvariance),_spreadingCodes(spreadingCodes)$/;"	f	class:CDMAKalmanEstimator
CDMAKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.h	/^    CDMAKalmanEstimator(const CDMAKalmanEstimator& cdmaKalmanEstimator);$/;"	p	class:CDMAKalmanEstimator
CDMAKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.h	/^    CDMAKalmanEstimator(const tMatrix& initialEstimation, const tMatrix& variances, vector< double > ARcoefficients, double ARvariance, const tMatrix &spreadingCodes);$/;"	p	class:CDMAKalmanEstimator
CDMAKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.h	/^class CDMAKalmanEstimator : public KalmanEstimator$/;"	c
CDMAKnownChannelChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.cpp	/^CDMAKnownChannelChannelMatrixEstimator::CDMAKnownChannelChannelMatrixEstimator(const MIMOChannel *channel, int iFirstChannelMatrix, int N, const tMatrix &spreadingCodes): KnownChannelChannelMatrixEstimator(channel, iFirstChannelMatrix, N),_spreadingCodes(spreadingCodes)$/;"	f	class:CDMAKnownChannelChannelMatrixEstimator
CDMAKnownChannelChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.h	/^    CDMAKnownChannelChannelMatrixEstimator(const MIMOChannel *channel, int iFirstChannelMatrix, int N, const tMatrix &spreadingCodes);$/;"	p	class:CDMAKnownChannelChannelMatrixEstimator
CDMAKnownChannelChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.h	/^class CDMAKnownChannelChannelMatrixEstimator : public KnownChannelChannelMatrixEstimator$/;"	c
CDMASYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^#define CDMASYSTEM_H$/;"	d
CDMASystem	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.cpp	/^CDMASystem::CDMASystem(): SMCSystem()$/;"	f	class:CDMASystem
CDMASystem	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    CDMASystem();$/;"	p	class:CDMASystem
CDMASystem	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^class CDMASystem : public SMCSystem$/;"	c
CDMAUNKNOWNACTIVEUSERSSISOPT_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^#define CDMAUNKNOWNACTIVEUSERSSISOPT_H$/;"	d
CDMAunknownActiveUsersSISopt	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.cpp	/^CDMAunknownActiveUsersSISopt::CDMAunknownActiveUsersSISopt(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances,const UsersActivityDistribution &usersActivityPdf): SMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, m, channelEstimator, preamble, smoothingLag, nParticles, resamplingAlgorithm, channelMatrixMean, channelMatrixVariances),_usersActivityPdf(usersActivityPdf)$/;"	f	class:CDMAunknownActiveUsersSISopt
CDMAunknownActiveUsersSISopt	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^    CDMAunknownActiveUsersSISopt(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances,const UsersActivityDistribution &usersActivityPdf);$/;"	p	class:CDMAunknownActiveUsersSISopt
CDMAunknownActiveUsersSISopt	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^class CDMAunknownActiveUsersSISopt : public SMCAlgorithm$/;"	c
CHANNELDEPENDENTNOISE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^#define CHANNELDEPENDENTNOISE_H$/;"	d
CHANNELMATRIXESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^#define CHANNELMATRIXESTIMATOR_H$/;"	d
CHANNELORDERESTIMATIONSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^#define CHANNELORDERESTIMATIONSYSTEM_H$/;"	d
CHANNELORDERESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^#define CHANNELORDERESTIMATOR_H$/;"	d
CMEAPPLYINGALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^#define CMEAPPLYINGALGORITHM_H$/;"	d
CMEBASEDALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.h	/^#define CMEBASEDALGORITHM_H$/;"	d
CMEBasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.cpp	/^CMEBasedAlgorithm::CMEBasedAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, const tMatrix &symbolVectors): UnknownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble, iFirstObservation),_symbolVectors(symbolVectors)$/;"	f	class:CMEBasedAlgorithm
CMEBasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.h	/^    CMEBasedAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, const tMatrix &symbolVectors);$/;"	p	class:CMEBasedAlgorithm
CMEBasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.h	/^class CMEBasedAlgorithm : public UnknownChannelOrderAlgorithm$/;"	c
CMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.cpp	/^CMEapplyingAlgorithm::CMEapplyingAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble): UnknownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble, preamble.cols())$/;"	f	class:CMEapplyingAlgorithm
CMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^    CMEapplyingAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected,vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble);$/;"	p	class:CMEapplyingAlgorithm
CMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^class CMEapplyingAlgorithm : public UnknownChannelOrderAlgorithm$/;"	c
CONSTANTMEANDSPOWERPROFILE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ConstantMeanDSPowerProfile.h	/^#define CONSTANTMEANDSPOWERPROFILE_H$/;"	d
CONTINUOUSPOWERPROFILE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.h	/^#define CONTINUOUSPOWERPROFILE_H$/;"	d
ChannelDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.cpp	/^ChannelDependentNoise::ChannelDependentNoise(MIMOChannel *channel)$/;"	f	class:ChannelDependentNoise
ChannelDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.cpp	/^ChannelDependentNoise::ChannelDependentNoise(const ChannelDependentNoise &channelDependentNoise):Noise(channelDependentNoise),_channel(channelDependentNoise._channel),_stdDevs(new double[_length])$/;"	f	class:ChannelDependentNoise
ChannelDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    ChannelDependentNoise(MIMOChannel *channel);$/;"	p	class:ChannelDependentNoise
ChannelDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    ChannelDependentNoise(const ChannelDependentNoise &channelDependentNoise);$/;"	p	class:ChannelDependentNoise
ChannelDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^class ChannelDependentNoise : public Noise$/;"	c
ChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.cpp	/^ChannelMatrixEstimator::ChannelMatrixEstimator(tMatrix initialEstimation,int N):_nOutputs(initialEstimation.rows()),_nChannelMatrixRows(initialEstimation.rows()),_nInputsXchannelOrder(initialEstimation.cols()),_nInputs(N),_nChannelCoeffs(initialEstimation.rows()*initialEstimation.cols()),_lastEstimatedChannelMatrix(initialEstimation)$/;"	f	class:ChannelMatrixEstimator
ChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    ChannelMatrixEstimator(tMatrix initialEstimation,int N);$/;"	p	class:ChannelMatrixEstimator
ChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^class ChannelMatrixEstimator{$/;"	c
ChannelOrderEstimationSystem	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.cpp	/^ChannelOrderEstimationSystem::ChannelOrderEstimationSystem()$/;"	f	class:ChannelOrderEstimationSystem
ChannelOrderEstimationSystem	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^    ChannelOrderEstimationSystem();$/;"	p	class:ChannelOrderEstimationSystem
ChannelOrderEstimationSystem	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^class ChannelOrderEstimationSystem : public SMCSystem$/;"	c
ChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.cpp	/^ChannelOrderEstimator::ChannelOrderEstimator(int N, std::vector<int> candidateOrders):_nInputs(N),_candidateOrders(candidateOrders),_channelOrderAPPs(candidateOrders.size(),1.0\/(double)candidateOrders.size())$/;"	f	class:ChannelOrderEstimator
ChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.cpp	/^ChannelOrderEstimator::ChannelOrderEstimator(std::vector<int> candidateOrders, vector<double> channelOrderAPPs):_candidateOrders(candidateOrders),_channelOrderAPPs(channelOrderAPPs)$/;"	f	class:ChannelOrderEstimator
ChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    ChannelOrderEstimator(int N, std::vector<int> candidateOrders);$/;"	p	class:ChannelOrderEstimator
ChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    ChannelOrderEstimator(std::vector<int> candidateOrders, std::vector<double> channelOrderAPPs);$/;"	p	class:ChannelOrderEstimator
ChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^class ChannelOrderEstimator{$/;"	c
Clean	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.cpp	/^void PSPPath::Clean()$/;"	f	class:PSPPath
Clean	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^    void Clean();$/;"	p	class:PSPPath
Clean	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^    void Clean() { _cost = -1.0;}$/;"	f	class:PathCandidate
Clean	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    void Clean() { delete _detectedSequence; _detectedSequence = NULL;}$/;"	f	class:ViterbiPath
CommonConstructorsCode	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.cpp	/^void ARprocess::CommonConstructorsCode(const tMatrix &seed)$/;"	f	class:ARprocess
CommonConstructorsCode	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	void CommonConstructorsCode(const tMatrix &seed);$/;"	p	class:ARprocess
ComputeProbabilities	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.cpp	/^tMatrix APPbasedChannelOrderEstimator::ComputeProbabilities(const tMatrix& observations,const std::vector<std::vector<tMatrix> > &channelMatrices,const std::vector< double > &noiseVariances,const tMatrix &sequenceToProcess, int iFrom)$/;"	f	class:APPbasedChannelOrderEstimator
ComputeProbabilities	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    virtual tMatrix ComputeProbabilities(const tMatrix& observations,const std::vector<std::vector<tMatrix> > &channelMatrices,const std::vector< double > &noiseVariances,const tMatrix &sequenceToProcess, int iFrom);$/;"	p	class:APPbasedChannelOrderEstimator
ComputeProbabilities	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    virtual tMatrix ComputeProbabilities(const tMatrix& observations,const std::vector<std::vector<tMatrix> > &channelMatrices,const std::vector< double > &noiseVariances,const tMatrix &sequenceToProcess, int iFrom) = 0;$/;"	p	class:ChannelOrderEstimator
ConstantMeanDSPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ConstantMeanDSPowerProfile.cpp	/^ConstantMeanDSPowerProfile::ConstantMeanDSPowerProfile(int nOutputs, int nInputs, std::vector< double > differentialDelays, std::vector< double > powers, double T): ContinuousPowerProfile(nOutputs, nInputs, differentialDelays, powers)$/;"	f	class:ConstantMeanDSPowerProfile
ConstantMeanDSPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ConstantMeanDSPowerProfile.h	/^    ConstantMeanDSPowerProfile(int nOutputs, int nInputs, std::vector< double > differentialDelays, std::vector< double > powers, double T);$/;"	p	class:ConstantMeanDSPowerProfile
ConstantMeanDSPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ConstantMeanDSPowerProfile.h	/^class ConstantMeanDSPowerProfile : public ContinuousPowerProfile$/;"	c
ContinuousPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.cpp	/^ContinuousPowerProfile::ContinuousPowerProfile(int nOutputs, int nInputs, vector<double> differentialDelays, vector<double> powers): DelayPowerProfile(nOutputs, nInputs),_continuousDelays(differentialDelays.size()),_continuousPowers(powers.size())$/;"	f	class:ContinuousPowerProfile
ContinuousPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.h	/^    ContinuousPowerProfile(int nOutputs, int nInputs, std::vector<double> differentialDelays, std::vector<double> powers);$/;"	p	class:ContinuousPowerProfile
ContinuousPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.h	/^class ContinuousPowerProfile : public DelayPowerProfile$/;"	c
DATE_LENGTH	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^#define DATE_LENGTH /;"	d	file:
DEBUG	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/MultinomialResamplingAlgorithm.cpp	/^#define DEBUG$/;"	d	file:
DEBUG4	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.cpp	/^#define DEBUG4$/;"	d	file:
DECORRELATORDETECTOR_H	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^#define DECORRELATORDETECTOR_H$/;"	d
DELAYPOWERPROFILE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^#define DELAYPOWERPROFILE_H$/;"	d
DEMODULATOR_H	/usr/local/.home/manu/c++/comunicaciones/transmision/Demodulator.h	/^#define DEMODULATOR_H$/;"	d
DSISOPTALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/DSISoptAlgorithm.h	/^#define DSISOPTALGORITHM_H$/;"	d
DSISoptAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/DSISoptAlgorithm.cpp	/^DSISoptAlgorithm::DSISoptAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, ChannelMatrixEstimator *channelEstimator, tMatrix preamble, int smoothingLag, int nParticles,ResamplingAlgorithm *resamplingAlgorithm, const tMatrix &channelMatrixMean, const tMatrix &channelMatrixVariances): SMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected,m,  channelEstimator, preamble, smoothingLag, nParticles,resamplingAlgorithm,channelMatrixMean,channelMatrixVariances)$/;"	f	class:DSISoptAlgorithm
DSISoptAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/DSISoptAlgorithm.h	/^    DSISoptAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, ChannelMatrixEstimator *channelEstimator, tMatrix preamble, int smoothingLag, int nParticles,ResamplingAlgorithm *resamplingAlgorithm, const tMatrix &channelMatrixMean, const tMatrix &channelMatrixVariances);$/;"	p	class:DSISoptAlgorithm
DSISoptAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/DSISoptAlgorithm.h	/^class DSISoptAlgorithm : public SMCAlgorithm$/;"	c
DecorrelatorDetector	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.cpp	/^DecorrelatorDetector::DecorrelatorDetector(int rows, int cols, double alphabetVariance): LinearDetector(rows, cols, alphabetVariance),_filter(_channelMatrixCols,_channelMatrixRows)$/;"	f	class:DecorrelatorDetector
DecorrelatorDetector	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^    DecorrelatorDetector(int rows, int cols, double alphabetVariance);$/;"	p	class:DecorrelatorDetector
DecorrelatorDetector	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^class DecorrelatorDetector : public LinearDetector$/;"	c
DelayPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.cpp	/^DelayPowerProfile::DelayPowerProfile(int nOutputs,int nInputs):_nOutputs(nOutputs),_nInputs(nInputs),_generatedCoefficientsMean(0.0)$/;"	f	class:DelayPowerProfile
DelayPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    DelayPowerProfile(int nOutputs,int nInputs);$/;"	p	class:DelayPowerProfile
DelayPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^class DelayPowerProfile{$/;"	c
Demodulator	/usr/local/.home/manu/c++/comunicaciones/transmision/Demodulator.h	/^class Demodulator{$/;"	c
DeployState	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^void PSPAlgorithm::DeployState(int iState,const tVector &observations,double noiseVariance)$/;"	f	class:PSPAlgorithm
DeployState	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	void DeployState(int iState,const tVector &observations, double noiseVariance);$/;"	p	class:PSPAlgorithm
DeployState	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::DeployState(int iState,const tVector &observations,const tMatrix &channelMatrix)$/;"	f	class:ViterbiAlgorithm
DeployState	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    void DeployState(int iState,const tVector &observations,const tMatrix &channelMatrix);$/;"	p	class:ViterbiAlgorithm
DisposableSurvivor	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^int PSPAlgorithm::DisposableSurvivor(int iState)$/;"	f	class:PSPAlgorithm
DisposableSurvivor	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    int DisposableSurvivor(int iState);$/;"	p	class:PSPAlgorithm
EIGEN	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^#define EIGEN$/;"	d
ELSEVIER2007ARCHANNELSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.h	/^#define ELSEVIER2007ARCHANNELSYSTEM_H$/;"	d
ELSEVIER2007BESSELCHANNELSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^#define ELSEVIER2007BESSELCHANNELSYSTEM_H$/;"	d
ELSEVIER2007SYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^#define ELSEVIER2007SYSTEM_H$/;"	d
EPSILON	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.cpp	/^#define EPSILON /;"	d	file:
ESTIMATEDMIMOCHANNEL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/EstimatedMIMOChannel.h	/^#define ESTIMATEDMIMOCHANNEL_H$/;"	d
EXCEPCIONESTRANSMISION_H	/usr/local/.home/manu/c++/comunicaciones/src/exceptions.h	/^#define EXCEPCIONESTRANSMISION_H$/;"	d
EXCEPCIONESTRANSMISION_H	/usr/local/.home/manu/c++/comunicaciones/transmision/exceptions.h	/^#define EXCEPCIONESTRANSMISION_H$/;"	d
EXPONENTIALPOWERPROFILE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ExponentialPowerProfile.h	/^#define EXPONENTIALPOWERPROFILE_H$/;"	d
EXPORT_REAL_DATA	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^#define EXPORT_REAL_DATA$/;"	d	file:
Elsevier2007ARChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.cpp	/^Elsevier2007ARChannelSystem::Elsevier2007ARChannelSystem()$/;"	f	class:Elsevier2007ARChannelSystem
Elsevier2007ARChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.h	/^    Elsevier2007ARChannelSystem();$/;"	p	class:Elsevier2007ARChannelSystem
Elsevier2007ARChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.h	/^class Elsevier2007ARChannelSystem : public Elsevier2007System$/;"	c
Elsevier2007BesselChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.cpp	/^Elsevier2007BesselChannelSystem::Elsevier2007BesselChannelSystem()$/;"	f	class:Elsevier2007BesselChannelSystem
Elsevier2007BesselChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^    Elsevier2007BesselChannelSystem();$/;"	p	class:Elsevier2007BesselChannelSystem
Elsevier2007BesselChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^class Elsevier2007BesselChannelSystem : public Elsevier2007System$/;"	c
Elsevier2007System	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.cpp	/^Elsevier2007System::Elsevier2007System()$/;"	f	class:Elsevier2007System
Elsevier2007System	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    Elsevier2007System();$/;"	p	class:Elsevier2007System
Elsevier2007System	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^class Elsevier2007System : public SMCSystem$/;"	c
EstimatedMIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/EstimatedMIMOChannel.cpp	/^EstimatedMIMOChannel::EstimatedMIMOChannel(int nInputs, int nOutputs, int memory, int length, int preambleLength, const ChannelMatrixEstimator *channelMatrixEstimator, const tMatrix &symbols, const tMatrix &observations, const vector<double> &noiseVariances): StillMemoryMIMOChannel(nInputs, nOutputs, memory, length),_channelMatrices(new tMatrix[length])$/;"	f	class:EstimatedMIMOChannel
EstimatedMIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/EstimatedMIMOChannel.h	/^    EstimatedMIMOChannel(int nInputs, int nOutputs, int memory, int length, int preambleLength, const ChannelMatrixEstimator *channelMatrixEstimator, const tMatrix &symbols, const tMatrix &observations, const vector<double> &noiseVariances);$/;"	p	class:EstimatedMIMOChannel
EstimatedMIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/EstimatedMIMOChannel.h	/^class EstimatedMIMOChannel : public StillMemoryMIMOChannel$/;"	c
ExponentialPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ExponentialPowerProfile.cpp	/^ExponentialPowerProfile::ExponentialPowerProfile(int nOutputs, int nInputs, double T, double threshold): DelayPowerProfile(nOutputs, nInputs)$/;"	f	class:ExponentialPowerProfile
ExponentialPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ExponentialPowerProfile.cpp	/^ExponentialPowerProfile::ExponentialPowerProfile(int nOutputs, int nInputs, int m, double tRMS, double T): DelayPowerProfile(nOutputs, nInputs)$/;"	f	class:ExponentialPowerProfile
ExponentialPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ExponentialPowerProfile.h	/^    ExponentialPowerProfile(int nOutputs, int nInputs, double T, double threshold);$/;"	p	class:ExponentialPowerProfile
ExponentialPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ExponentialPowerProfile.h	/^    ExponentialPowerProfile(int nOutputs, int nInputs, int m, double tRMS, double T);$/;"	p	class:ExponentialPowerProfile
ExponentialPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ExponentialPowerProfile.h	/^class ExponentialPowerProfile : public DelayPowerProfile$/;"	c
FLATPOWERPROFILE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/FlatPowerProfile.h	/^#define FLATPOWERPROFILE_H$/;"	d
FlatPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/FlatPowerProfile.cpp	/^FlatPowerProfile::FlatPowerProfile(int nOutputs, int nInputs, int m, double variance): DelayPowerProfile(nOutputs, nInputs)$/;"	f	class:FlatPowerProfile
FlatPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/FlatPowerProfile.h	/^    FlatPowerProfile(int nOutputs, int nInputs, int m, double variance);$/;"	p	class:FlatPowerProfile
FlatPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/FlatPowerProfile.h	/^class FlatPowerProfile : public DelayPowerProfile$/;"	c
FlattenWeights	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.cpp	/^tVector WithThresholdResamplingAlgorithmWrapper::FlattenWeights(const tVector &weights, double threshold) const$/;"	f	class:WithThresholdResamplingAlgorithmWrapper
FlattenWeights	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^	tVector FlattenWeights(const tVector &weights, double threshold) const;$/;"	p	class:WithThresholdResamplingAlgorithmWrapper
GenerateMatrices	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.cpp	/^void DelayPowerProfile::GenerateMatrices()$/;"	f	class:DelayPowerProfile
GenerateMatrices	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    void GenerateMatrices();$/;"	p	class:DelayPowerProfile
GetChannelOrderAPPsAlongTime	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	tMatrix GetChannelOrderAPPsAlongTime() { return _channelOrderAPPs(tRange(),tRange(_preamble.cols(),_iLastSymbolVectorToBeDetected-1));}$/;"	f	class:UnknownChannelOrderAlgorithm
GetChannelOrderAPPsVector	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.cpp	/^tVector ChannelOrderEstimator::GetChannelOrderAPPsVector()$/;"	f	class:ChannelOrderEstimator
GetChannelOrderAPPsVector	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    tVector GetChannelOrderAPPsVector();$/;"	p	class:ChannelOrderEstimator
GetChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.h	/^    ChannelOrderEstimator *GetChannelOrderEstimator() {return _channelOrderEstimator;}$/;"	f	class:WithChannelOrderEstimationParticleAddon
GetCost	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^    double GetCost() { return _cost;}$/;"	f	class:PathCandidate
GetCost	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    double GetCost() const { return _cost;}$/;"	f	class:ViterbiPath
GetParticleFilterPointer	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^    virtual ParticleFilter* GetParticleFilterPointer() {return &_particleFilter;}$/;"	f	class:ISIS
GetParticleFilterPointer	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    virtual ParticleFilter* GetParticleFilterPointer() {return _particleFilter;}$/;"	f	class:MLSDmAlgorithm
GetParticleFilterPointer	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual ParticleFilter* GetParticleFilterPointer() = 0;$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
GetParticleFilterPointer	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    virtual ParticleFilter* GetParticleFilterPointer() {return &_particleFilter;}$/;"	f	class:USIS
GetResamplingCriterion	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^	ResamplingCriterion GetResamplingCriterion() { return _resamplingCriterion;}$/;"	f	class:ResamplingAlgorithm
GetStream	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^vector<tBit> Bits::GetStream(int index) const$/;"	f	class:Bits
GetStream	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    std::vector<tBit> GetStream(int index) const;$/;"	p	class:Bits
HAVE_DLFCN_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_DLFCN_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_INTTYPES_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_INTTYPES_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_MEMORY_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMORY_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_STDINT_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDINT_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDLIB_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRINGS_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRINGS_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRING_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_STRING_H /;"	d
HAVE_SYS_STAT_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_TYPES_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_UNISTD_H	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_UNISTD_H	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define HAVE_UNISTD_H /;"	d
HOSTNAME_LENGTH	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^#define HOSTNAME_LENGTH /;"	d
ISIS	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.cpp	/^ISIS::ISIS(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm): MultipleChannelEstimatorsPerParticleSMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm),_particleFilter(nParticles)$/;"	f	class:ISIS
ISIS	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^    ISIS(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm);$/;"	p	class:ISIS
ISIS	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^class ISIS : public MultipleChannelEstimatorsPerParticleSMCAlgorithm$/;"	c
ISIS_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^#define ISIS_H$/;"	d
IncompatibleOperandsException	/usr/local/.home/manu/c++/comunicaciones/util/utilExceptions.h	/^		IncompatibleOperandsException(string s) : runtime_error(s) { }$/;"	f	class:IncompatibleOperandsException
IncompatibleOperandsException	/usr/local/.home/manu/c++/comunicaciones/util/utilExceptions.h	/^class IncompatibleOperandsException : public runtime_error$/;"	c
IsEmpty	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    bool IsEmpty() const { return (_detectedSequence == NULL);}$/;"	f	class:ViterbiPath
KALMANESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^#define KALMANESTIMATOR_H$/;"	d
KALMANFILTER_H	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^#define KALMANFILTER_H$/;"	d
KNOWNCHANNELALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.h	/^#define KNOWNCHANNELALGORITHM_H$/;"	d
KNOWNCHANNELCHANNELMATRIXESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.h	/^#define KNOWNCHANNELCHANNELMATRIXESTIMATOR_H$/;"	d
KNOWNCHANNELORDERALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^#define KNOWNCHANNELORDERALGORITHM_H$/;"	d
KNOWNFLATCHANNELANDACTIVEUSERSOPTIMALALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.h	/^#define KNOWNFLATCHANNELANDACTIVEUSERSOPTIMALALGORITHM_H$/;"	d
KNOWNFLATCHANNELOPTIMALALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^#define KNOWNFLATCHANNELOPTIMALALGORITHM_H$/;"	d
KNOWNSYMBOLSCMEAPPLYINGALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.h	/^#define KNOWNSYMBOLSCMEAPPLYINGALGORITHM_H$/;"	d
KNOWNSYMBOLSKALMANBASEDCHANNELESTIMATORALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^#define KNOWNSYMBOLSKALMANBASEDCHANNELESTIMATORALGORITHM_H$/;"	d
KNOWNSYMBOLSKALMANESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.h	/^#define KNOWNSYMBOLSKALMANESTIMATOR_H$/;"	d
KalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^KalmanEstimator::KalmanEstimator(const KalmanEstimator &kalmanEstimator):ChannelMatrixEstimator(kalmanEstimator),_kalmanFilter(new KalmanFilter(*(kalmanEstimator._kalmanFilter))),_nExtStateVectorCoeffs(kalmanEstimator._nExtStateVectorCoeffs),_rChannelCoefficients(kalmanEstimator._rChannelCoefficients)$/;"	f	class:KalmanEstimator
KalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^KalmanEstimator::KalmanEstimator(const tMatrix &initialEstimation,const tMatrix &variances,int N,vector<double> ARcoefficients,double ARvariance): ChannelMatrixEstimator(initialEstimation,N),_nExtStateVectorCoeffs(_nChannelCoeffs*ARcoefficients.size()),_rChannelCoefficients(_nExtStateVectorCoeffs-_nChannelCoeffs,_nExtStateVectorCoeffs-1)$/;"	f	class:KalmanEstimator
KalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    KalmanEstimator(const KalmanEstimator &kalmanEstimator);$/;"	p	class:KalmanEstimator
KalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    KalmanEstimator(const tMatrix &initialEstimation,const tMatrix &variances,int N,vector<double> ARcoefficients,double ARvariance);$/;"	p	class:KalmanEstimator
KalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^class KalmanEstimator : public ChannelMatrixEstimator$/;"	c
KalmanFilter	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.cpp	/^KalmanFilter::KalmanFilter(const MatrixXd &R,const MatrixXd &stateEquationCovariance,const VectorXd &initialMean,const MatrixXd &initialCovariance):$/;"	f	class:KalmanFilter
KalmanFilter	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.cpp	/^KalmanFilter::KalmanFilter(const tMatrix &R,const tMatrix &stateEquationCovariance,const tVector &initialMean,const tMatrix &initialCovariance):$/;"	f	class:KalmanFilter
KalmanFilter	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    KalmanFilter(const MatrixXd &R,const MatrixXd &stateEquationCovariance,const VectorXd &initialMean,const MatrixXd &initialCovariance); \/\/ eigen$/;"	p	class:KalmanFilter
KalmanFilter	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    KalmanFilter(const tMatrix &R,const tMatrix &stateEquationCovariance,const tVector &initialMean,const tMatrix &initialCovariance);$/;"	p	class:KalmanFilter
KalmanFilter	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^class KalmanFilter{$/;"	c
KnownChannelAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.cpp	/^KnownChannelAlgorithm::KnownChannelAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected, const MIMOChannel &channel): Algorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected),_channel(channel)$/;"	f	class:KnownChannelAlgorithm
KnownChannelAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.h	/^    KnownChannelAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected, const MIMOChannel &channel);$/;"	p	class:KnownChannelAlgorithm
KnownChannelAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.h	/^class KnownChannelAlgorithm : public Algorithm$/;"	c
KnownChannelChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.cpp	/^KnownChannelChannelMatrixEstimator::KnownChannelChannelMatrixEstimator(const MIMOChannel *channel, int iFirstChannelMatrix, int N): ChannelMatrixEstimator((*channel)[iFirstChannelMatrix], N),_channel(channel),_iNextMatrix(iFirstChannelMatrix)$/;"	f	class:KnownChannelChannelMatrixEstimator
KnownChannelChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.h	/^    KnownChannelChannelMatrixEstimator(const MIMOChannel *channel, int iFirstChannelMatrix, int N);$/;"	p	class:KnownChannelChannelMatrixEstimator
KnownChannelChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.h	/^class KnownChannelChannelMatrixEstimator : public ChannelMatrixEstimator$/;"	c
KnownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.cpp	/^KnownChannelOrderAlgorithm::KnownChannelOrderAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, ChannelMatrixEstimator *channelEstimator,tMatrix preamble): UnknownChannelAlgorithm(name, alphabet,L,Nr,N,iLastSymbolVectorToBeDetected),_channelEstimator(channelEstimator->clone()),_channelOrder(m),_nInputsXchannelOrder(channelEstimator->cols()),_preamble(preamble)$/;"	f	class:KnownChannelOrderAlgorithm
KnownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.cpp	/^KnownChannelOrderAlgorithm::KnownChannelOrderAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m,tMatrix preamble): UnknownChannelAlgorithm(name, alphabet,L,Nr,N,iLastSymbolVectorToBeDetected),_channelEstimator(NULL),_channelOrder(m),_nInputsXchannelOrder(_nInputs*m),_preamble(preamble)$/;"	f	class:KnownChannelOrderAlgorithm
KnownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^    KnownChannelOrderAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, ChannelMatrixEstimator *channelEstimator,tMatrix preamble);$/;"	p	class:KnownChannelOrderAlgorithm
KnownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^    KnownChannelOrderAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m,tMatrix preamble);$/;"	p	class:KnownChannelOrderAlgorithm
KnownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^class KnownChannelOrderAlgorithm : public UnknownChannelAlgorithm$/;"	c
KnownFlatChannelAndActiveUsersOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.cpp	/^KnownFlatChannelAndActiveUsersOptimalAlgorithm::KnownFlatChannelAndActiveUsersOptimalAlgorithm(string name, Alphabet alphabet, int L, int Nr, int N, int iLastSymbolVectorToBeDetected, const MIMOChannel& channel, int preambleLength, std::vector<std::vector<bool> > usersActivity): KnownFlatChannelOptimalAlgorithm(name, alphabet, L, Nr, N, iLastSymbolVectorToBeDetected, channel, preambleLength),_noTransmissionAlphabet(new Alphabet(vector<tSymbol>(1,0.0))),_usersActivity(usersActivity)$/;"	f	class:KnownFlatChannelAndActiveUsersOptimalAlgorithm
KnownFlatChannelAndActiveUsersOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.h	/^    KnownFlatChannelAndActiveUsersOptimalAlgorithm(string name, Alphabet alphabet, int L, int Nr, int N, int iLastSymbolVectorToBeDetected, const MIMOChannel& channel, int preambleLength, std::vector<std::vector<bool> > usersActivity);$/;"	p	class:KnownFlatChannelAndActiveUsersOptimalAlgorithm
KnownFlatChannelAndActiveUsersOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.h	/^class KnownFlatChannelAndActiveUsersOptimalAlgorithm : public KnownFlatChannelOptimalAlgorithm$/;"	c
KnownFlatChannelOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.cpp	/^KnownFlatChannelOptimalAlgorithm::KnownFlatChannelOptimalAlgorithm(string name, Alphabet alphabet, int L, int Nr, int N, int iLastSymbolVectorToBeDetected, const MIMOChannel& channel, int preambleLength): KnownChannelAlgorithm(name, alphabet, L, Nr, N, iLastSymbolVectorToBeDetected, channel),_preambleLength(preambleLength),_detectedSymbols(_nInputs,iLastSymbolVectorToBeDetected-preambleLength)$/;"	f	class:KnownFlatChannelOptimalAlgorithm
KnownFlatChannelOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    KnownFlatChannelOptimalAlgorithm(string name, Alphabet alphabet, int L, int Nr, int N, int iLastSymbolVectorToBeDetected, const MIMOChannel& channel, int preambleLength);$/;"	p	class:KnownFlatChannelOptimalAlgorithm
KnownFlatChannelOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^class KnownFlatChannelOptimalAlgorithm : public KnownChannelAlgorithm$/;"	c
KnownSymbolsCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.cpp	/^KnownSymbolsCMEapplyingAlgorithm::KnownSymbolsCMEapplyingAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, const tMatrix &symbolVectors): CMEapplyingAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble),_symbolVectors(symbolVectors)$/;"	f	class:KnownSymbolsCMEapplyingAlgorithm
KnownSymbolsCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.h	/^    KnownSymbolsCMEapplyingAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, const tMatrix &symbolVectors);$/;"	p	class:KnownSymbolsCMEapplyingAlgorithm
KnownSymbolsCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.h	/^class KnownSymbolsCMEapplyingAlgorithm : public CMEapplyingAlgorithm$/;"	c
KnownSymbolsKalmanBasedChannelEstimatorAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.cpp	/^KnownSymbolsKalmanBasedChannelEstimatorAlgorithm::KnownSymbolsKalmanBasedChannelEstimatorAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m,ChannelMatrixEstimator* channelEstimator, tMatrix preamble,const tMatrix &symbolVectors): KnownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected,m, channelEstimator, preamble),_symbolVectors(symbolVectors)$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
KnownSymbolsKalmanBasedChannelEstimatorAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^    KnownSymbolsKalmanBasedChannelEstimatorAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble,const tMatrix &symbolVectors);$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
KnownSymbolsKalmanBasedChannelEstimatorAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^class KnownSymbolsKalmanBasedChannelEstimatorAlgorithm : public KnownChannelOrderAlgorithm$/;"	c
KnownSymbolsKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.cpp	/^KnownSymbolsKalmanEstimator::KnownSymbolsKalmanEstimator(const tMatrix& initialEstimation, const tMatrix& variances, int N, vector<double> ARcoefficients, double ARvariance,const tMatrix &symbols,int startDetectionTime): KalmanEstimator(initialEstimation, variances, N, ARcoefficients, ARvariance),_presentTime(startDetectionTime),_symbols(symbols)$/;"	f	class:KnownSymbolsKalmanEstimator
KnownSymbolsKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.h	/^    KnownSymbolsKalmanEstimator(const tMatrix& initialEstimation, const tMatrix& variances, int N, vector<double> ARcoefficient, double ARvariance,const tMatrix &symbols,int startDetectionTime);$/;"	p	class:KnownSymbolsKalmanEstimator
KnownSymbolsKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.h	/^class KnownSymbolsKalmanEstimator : public KalmanEstimator$/;"	c
L	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
LINEARDETECTOR_H	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^#define LINEARDETECTOR_H$/;"	d
LINEARFILTERBASEDALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^#define LINEARFILTERBASEDALGORITHM_H$/;"	d
LINEARFILTERBASEDCMEAPPLYINGALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.h	/^#define LINEARFILTERBASEDCMEAPPLYINGALGORITHM_H$/;"	d
LINEARFILTERBASEDMKFALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedMKFAlgorithm.h	/^#define LINEARFILTERBASEDMKFALGORITHM_H$/;"	d
LINEARFILTERBASEDSMCALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^#define LINEARFILTERBASEDSMCALGORITHM_H$/;"	d
LMSESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.h	/^#define LMSESTIMATOR_H$/;"	d
LMSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.cpp	/^LMSEstimator::LMSEstimator(const tMatrix &initialEstimation,int N,double mu): ChannelMatrixEstimator(initialEstimation,N),_mu(mu)$/;"	f	class:LMSEstimator
LMSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.h	/^    LMSEstimator(const tMatrix &initialEstimation,int N,double mu);$/;"	p	class:LMSEstimator
LMSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.h	/^class LMSEstimator : public ChannelMatrixEstimator$/;"	c
LMSMUTESTSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^#define LMSMUTESTSYSTEM_H$/;"	d
LMSchannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    vector<ChannelMatrixEstimator *> LMSchannelEstimators;$/;"	m	class:LMSmuTestSystem
LMSmuTestSystem	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.cpp	/^LMSmuTestSystem::LMSmuTestSystem()$/;"	f	class:LMSmuTestSystem
LMSmuTestSystem	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    LMSmuTestSystem();$/;"	p	class:LMSmuTestSystem
LMSmuTestSystem	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^class LMSmuTestSystem : public SMCSystem$/;"	c
LinearDetector	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.cpp	/^LinearDetector::LinearDetector(int rows,int cols,double alphabetVariance):_channelMatrixRows(rows),_channelMatrixCols(cols),_alphabetVariance(alphabetVariance)$/;"	f	class:LinearDetector
LinearDetector	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    LinearDetector(int rows,int cols,double alphabetVariance);$/;"	p	class:LinearDetector
LinearDetector	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^class LinearDetector{$/;"	c
LinearFilterBasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.cpp	/^LinearFilterBasedAlgorithm::LinearFilterBasedAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int backwardsSmoothingLag, int smoothingLag, LinearDetector *linearDetector,  double ARcoefficient, bool substractContributionFromKnownSymbols): KnownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, m, channelEstimator, preamble),_c(backwardsSmoothingLag),_d(smoothingLag),_linearDetector(linearDetector->clone()),_detectedSymbolVectors(N,iLastSymbolVectorToBeDetected),_ARcoefficient(ARcoefficient),_substractContributionFromKnownSymbols(substractContributionFromKnownSymbols)$/;"	f	class:LinearFilterBasedAlgorithm
LinearFilterBasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^    LinearFilterBasedAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int backwardsSmoothingLag, int smoothingLag, LinearDetector *linearDetector, double ARcoefficient, bool substractContributionFromKnownSymbols=false);$/;"	p	class:LinearFilterBasedAlgorithm
LinearFilterBasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^class LinearFilterBasedAlgorithm : public KnownChannelOrderAlgorithm$/;"	c
LinearFilterBasedCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.cpp	/^LinearFilterBasedCMEapplyingAlgorithm::LinearFilterBasedCMEapplyingAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, vector< LinearDetector *> linearDetectors, double ARcoefficient, bool substractContributionFromKnownSymbols): CMEapplyingAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble),_algorithmAlreadyExecuted(channelEstimators.size(),false)$/;"	f	class:LinearFilterBasedCMEapplyingAlgorithm
LinearFilterBasedCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.h	/^    LinearFilterBasedCMEapplyingAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, vector< LinearDetector *> linearDetectors, double ARcoefficient, bool substractContributionFromKnownSymbols);$/;"	p	class:LinearFilterBasedCMEapplyingAlgorithm
LinearFilterBasedCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.h	/^class LinearFilterBasedCMEapplyingAlgorithm : public CMEapplyingAlgorithm$/;"	c
LinearFilterBasedMKFAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedMKFAlgorithm.cpp	/^LinearFilterBasedMKFAlgorithm::LinearFilterBasedMKFAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, KalmanEstimator* channelEstimator, LinearDetector* linearDetector, tMatrix preamble, int backwardsSmoothingLag, int smoothingLag, int forwardSmoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances, double ARcoefficient, double samplingVariance, double ARprocessVariance, bool substractContributionFromKnownSymbols): LinearFilterBasedSMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, m, channelEstimator, linearDetector, preamble, backwardsSmoothingLag, smoothingLag, forwardSmoothingLag, nParticles, resamplingAlgorithm, channelMatrixMean, channelMatrixVariances, ARcoefficient, samplingVariance, ARprocessVariance,substractContributionFromKnownSymbols)$/;"	f	class:LinearFilterBasedMKFAlgorithm
LinearFilterBasedMKFAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedMKFAlgorithm.h	/^    LinearFilterBasedMKFAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, KalmanEstimator* channelEstimator, LinearDetector* linearDetector, tMatrix preamble, int backwardsSmoothingLag, int smoothingLag, int forwardSmoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances, double ARcoefficient, double samplingVariance, double ARprocessVariance, bool substractContributionFromKnownSymbols=false);$/;"	p	class:LinearFilterBasedMKFAlgorithm
LinearFilterBasedMKFAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedMKFAlgorithm.h	/^class LinearFilterBasedMKFAlgorithm : public LinearFilterBasedSMCAlgorithm$/;"	c
LinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^LinearFilterBasedSMCAlgorithm::LinearFilterBasedSMCAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m,  ChannelMatrixEstimator *channelEstimator,LinearDetector *linearDetector,tMatrix preamble, int backwardsSmoothingLag, int SMCsmoothingLag, int forwardSmoothingLag, int nParticles,ResamplingAlgorithm *resamplingAlgorithm,const tMatrix &channelMatrixMean, const tMatrix &channelMatrixVariances,double ARcoefficient,double samplingVariance,double ARprocessVariance, bool substractContributionFromKnownSymbols): SMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected,m, channelEstimator, preamble, SMCsmoothingLag, nParticles, resamplingAlgorithm, channelMatrixMean, channelMatrixVariances)$/;"	f	class:LinearFilterBasedSMCAlgorithm
LinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^LinearFilterBasedSMCAlgorithm::LinearFilterBasedSMCAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m,tMatrix preamble, int SMCsmoothingLag, ParticleFilter *particleFilter, ResamplingAlgorithm *resamplingAlgorithm,double ARcoefficient,double samplingVariance, double ARprocessVariance, bool substractContributionFromKnownSymbols): SMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected,m, preamble, SMCsmoothingLag, particleFilter, resamplingAlgorithm)$/;"	f	class:LinearFilterBasedSMCAlgorithm
LinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    LinearFilterBasedSMCAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, ChannelMatrixEstimator *channelEstimator,LinearDetector *linearDetector,tMatrix preamble, int backwardsSmoothingLag, int SMCsmoothingLag, int forwardSmoothingLag, int nParticles, ResamplingAlgorithm *resamplingAlgorithm,const tMatrix &channelMatrixMean, const tMatrix &channelMatrixVariances,double ARcoefficient,double samplingVariance, double ARprocessVariance, bool substractContributionFromKnownSymbols=false);$/;"	p	class:LinearFilterBasedSMCAlgorithm
LinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    LinearFilterBasedSMCAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m,tMatrix preamble, int SMCsmoothingLag, ParticleFilter *particleFilter, ResamplingAlgorithm *resamplingAlgorithm,double ARcoefficient,double samplingVariance, double ARprocessVariance, bool substractContributionFromKnownSymbols=false);$/;"	p	class:LinearFilterBasedSMCAlgorithm
LinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^class LinearFilterBasedSMCAlgorithm : public SMCAlgorithm$/;"	c
MAXIMUMPROBABILITYCRITERION_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/MaximumProbabilityCriterion.h	/^#define MAXIMUMPROBABILITYCRITERION_H$/;"	d
MIMOCHANNEL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^#define MIMOCHANNEL_H$/;"	d
MIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.cpp	/^MIMOChannel::MIMOChannel(int nInputs,int nOutputs,int length):_nInputs(nInputs),_nOutputs(nOutputs),_length(length),_nInputsnOutputs(_nInputs*_nOutputs)$/;"	f	class:MIMOChannel
MIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    MIMOChannel(int nInputs,int nOutputs,int length);$/;"	p	class:MIMOChannel
MIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^class MIMOChannel{$/;"	c
MLSDMALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^#define MLSDMALGORITHM_H$/;"	d
MLSDMFEEDBACKALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmFeedBackAlgorithm.h	/^#define MLSDMFEEDBACKALGORITHM_H$/;"	d
MLSDmAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.cpp	/^MLSDmAlgorithm::MLSDmAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm,double ARcoefficient,double samplingVariance,double ARprocessVariance): MultipleChannelEstimatorsPerParticleSMCAlgorithm (name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm),_particleFilter(new ParticleFilter(nParticles)),_ARcoefficient(ARcoefficient),_samplingVariance(samplingVariance),_ARprocessVariance(ARprocessVariance),_particlesBestChannelOrders(nParticles)$/;"	f	class:MLSDmAlgorithm
MLSDmAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    MLSDmAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm,double ARcoefficient,double samplingVariance,double ARprocessVariance);$/;"	p	class:MLSDmAlgorithm
MLSDmAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^class MLSDmAlgorithm : public MultipleChannelEstimatorsPerParticleSMCAlgorithm$/;"	c
MLSDmFeedBackAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmFeedBackAlgorithm.cpp	/^MLSDmFeedBackAlgorithm::MLSDmFeedBackAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, double ARcoefficient, double samplingVariance, double ARprocessVariance): MLSDmAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm, ARcoefficient, samplingVariance, ARprocessVariance)$/;"	f	class:MLSDmFeedBackAlgorithm
MLSDmFeedBackAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmFeedBackAlgorithm.h	/^    MLSDmFeedBackAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, double ARcoefficient, double samplingVariance, double ARprocessVariance);$/;"	p	class:MLSDmFeedBackAlgorithm
MLSDmFeedBackAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmFeedBackAlgorithm.h	/^class MLSDmFeedBackAlgorithm : public MLSDmAlgorithm$/;"	c
MMSEDETECTOR_H	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^#define MMSEDETECTOR_H$/;"	d
MMSEDetector	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.cpp	/^MMSEDetector::MMSEDetector(int rows, int cols, double alphabetVariance,int nSymbolsToBeDetected): LinearDetector(rows, cols, alphabetVariance),_nSymbolsToBeDetected(nSymbolsToBeDetected),_detectionStart(cols-nSymbolsToBeDetected),_filter(_channelMatrixRows,_channelMatrixCols)$/;"	f	class:MMSEDetector
MMSEDetector	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.cpp	/^MMSEDetector::MMSEDetector(int rows, int cols, double alphabetVariance,int nSymbolsToBeDetected,int startingFrom): LinearDetector(rows, cols, alphabetVariance),_nSymbolsToBeDetected(nSymbolsToBeDetected),_detectionStart(startingFrom),_filter(_channelMatrixRows,_channelMatrixCols)$/;"	f	class:MMSEDetector
MMSEDetector	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^    MMSEDetector(int rows, int cols, double alphabetVariance,int nSymbolsToBeDetected);$/;"	p	class:MMSEDetector
MMSEDetector	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^    MMSEDetector(int rows, int cols, double alphabetVariance,int nSymbolsToBeDetected,int startingFrom);$/;"	p	class:MMSEDetector
MMSEDetector	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^class MMSEDetector : public LinearDetector$/;"	c
MODULATOR_H	/usr/local/.home/manu/c++/comunicaciones/transmision/Modulator.h	/^#define MODULATOR_H$/;"	d
MSE	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.cpp	/^double Algorithm::MSE(const vector<tMatrix> &channelMatrices)$/;"	f	class:Algorithm
MSE	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    double MSE(const vector<tMatrix> &channelMatrices);$/;"	p	class:Algorithm
MSEMatrices	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    vector<tMatrix> peMatrices, MSEMatrices;$/;"	m	class:BaseSystem
MSEalongTime	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.cpp	/^tVector TransmissionUtil::MSEalongTime(const std::vector<tMatrix> &estimatedChannelMatrices,int from1,int to1,const std::vector<tMatrix> &trueChannelMatrices,int from2,int to2)$/;"	f	class:TransmissionUtil
MSEalongTime	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.h	/^    static tVector MSEalongTime(const std::vector<tMatrix> &estimatedChannelMatrices,int from1,int to1,const std::vector<tMatrix> &trueChannelMatrices,int from2,int to2);$/;"	p	class:TransmissionUtil
MSEtimeEvolution	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    vector<vector<tMatrix> > MSEtimeEvolution;$/;"	m	class:BaseSystem
MSEwindowStart	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int MSEwindowStart,symbolsDetectionWindowStart;$/;"	m	class:BaseSystem
MULTINOMIALRESAMPLINGALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/MultinomialResamplingAlgorithm.h	/^#define MULTINOMIALRESAMPLINGALGORITHM_H$/;"	d
MULTIPLECHANNELESTIMATORSPERPARTICLESMCALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^#define MULTIPLECHANNELESTIMATORSPERPARTICLESMCALGORITHM_H$/;"	d
MULTIUSERCDMACHANNEL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MultiuserCDMAchannel.h	/^#define MULTIUSERCDMACHANNEL_H$/;"	d
MakeTransition	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/MaximumProbabilityCriterion.cpp	/^bool MaximumProbabilityCriterion::MakeTransition(tVector channelOrderAPPs)$/;"	f	class:MaximumProbabilityCriterion
MakeTransition	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/MaximumProbabilityCriterion.h	/^    virtual bool MakeTransition(tVector channelOrderAPPs);$/;"	p	class:MaximumProbabilityCriterion
MakeTransition	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/TransitionCriterion.h	/^    virtual bool MakeTransition(tVector channelOrderAPPs) = 0;$/;"	p	class:TransitionCriterion
MakeTransition	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/UniformRelatedCriterion.cpp	/^bool UniformRelatedCriterion::MakeTransition(tVector channelOrderAPPs)$/;"	f	class:UniformRelatedCriterion
MakeTransition	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/UniformRelatedCriterion.h	/^    virtual bool MakeTransition(tVector channelOrderAPPs);$/;"	p	class:UniformRelatedCriterion
MaximumProbabilityCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/MaximumProbabilityCriterion.cpp	/^MaximumProbabilityCriterion::MaximumProbabilityCriterion(double threshold): TransitionCriterion(),_threshold(threshold)$/;"	f	class:MaximumProbabilityCriterion
MaximumProbabilityCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/MaximumProbabilityCriterion.h	/^    MaximumProbabilityCriterion(double threshold);$/;"	p	class:MaximumProbabilityCriterion
MaximumProbabilityCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/MaximumProbabilityCriterion.h	/^class MaximumProbabilityCriterion : public TransitionCriterion$/;"	c
Modulator	/usr/local/.home/manu/c++/comunicaciones/transmision/Modulator.cpp	/^Modulator::Modulator()$/;"	f	class:Modulator
Modulator	/usr/local/.home/manu/c++/comunicaciones/transmision/Modulator.h	/^    Modulator();$/;"	p	class:Modulator
Modulator	/usr/local/.home/manu/c++/comunicaciones/transmision/Modulator.h	/^class Modulator{$/;"	c
MultinomialResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/MultinomialResamplingAlgorithm.cpp	/^MultinomialResamplingAlgorithm::MultinomialResamplingAlgorithm(ResamplingCriterion resamplingCriterion):ResamplingAlgorithm(resamplingCriterion)$/;"	f	class:MultinomialResamplingAlgorithm
MultinomialResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/MultinomialResamplingAlgorithm.h	/^    MultinomialResamplingAlgorithm(ResamplingCriterion resamplingCriterion);$/;"	p	class:MultinomialResamplingAlgorithm
MultinomialResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/MultinomialResamplingAlgorithm.h	/^class MultinomialResamplingAlgorithm : public ResamplingAlgorithm{$/;"	c
MultipleChannelEstimatorsPerParticleSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^MultipleChannelEstimatorsPerParticleSMCAlgorithm::MultipleChannelEstimatorsPerParticleSMCAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation,int smoothingLag,int nParticles,ResamplingAlgorithm *resamplingAlgorithm): UnknownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble, iFirstObservation)$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
MultipleChannelEstimatorsPerParticleSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    MultipleChannelEstimatorsPerParticleSMCAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation,int smoothingLag,int nParticles,ResamplingAlgorithm *resamplingAlgorithm);$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
MultipleChannelEstimatorsPerParticleSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^class MultipleChannelEstimatorsPerParticleSMCAlgorithm : public UnknownChannelOrderAlgorithm$/;"	c
MultiuserCDMAchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MultiuserCDMAchannel.cpp	/^MultiuserCDMAchannel::MultiuserCDMAchannel(int length, const tMatrix &spreadingCodes): StillMemoryMIMOChannel(spreadingCodes.cols(), spreadingCodes.rows(), 1, length),_spreadingCodes(spreadingCodes)$/;"	f	class:MultiuserCDMAchannel
MultiuserCDMAchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MultiuserCDMAchannel.h	/^    MultiuserCDMAchannel(int length, const tMatrix &spreadingCodes);    $/;"	p	class:MultiuserCDMAchannel
MultiuserCDMAchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MultiuserCDMAchannel.h	/^class MultiuserCDMAchannel : public StillMemoryMIMOChannel$/;"	c
N	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
NLMSESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/NLMSEstimator.h	/^#define NLMSESTIMATOR_H$/;"	d
NLMSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/NLMSEstimator.cpp	/^NLMSEstimator::NLMSEstimator(const tMatrix& initialEstimation, int N, double mu): LMSEstimator(initialEstimation, N, mu)$/;"	f	class:NLMSEstimator
NLMSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/NLMSEstimator.h	/^    NLMSEstimator(const tMatrix& initialEstimation, int N, double mu);$/;"	p	class:NLMSEstimator
NLMSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/NLMSEstimator.h	/^class NLMSEstimator : public LMSEstimator$/;"	c
NOISE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^#define NOISE_H$/;"	d
NULLNOISE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.h	/^#define NULLNOISE_H$/;"	d
NoPathArrived	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^    bool NoPathArrived() { return (_cost < 0);}$/;"	f	class:PathCandidate
Noise	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.cpp	/^Noise::Noise(int nOutputs,int length): _nOutputs(nOutputs),_length(length)$/;"	f	class:Noise
Noise	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^    Noise(int nOutputs,int length);$/;"	p	class:Noise
Noise	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^class Noise{$/;"	c
NpossibleInputs	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^    int NpossibleInputs() const {return _nPossibleInputs;}$/;"	f	class:Trellis
Nstates	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^    int Nstates() const { return _nStates;}$/;"	f	class:Trellis
NullNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.cpp	/^NullNoise::NullNoise(int nOutputs, int length): Noise(nOutputs, length)$/;"	f	class:NullNoise
NullNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.h	/^    NullNoise(int nOutputs, int length);$/;"	p	class:NullNoise
NullNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.h	/^class NullNoise : public Noise$/;"	c
NullWeightsException	/usr/local/.home/manu/c++/comunicaciones/smc/smcExceptions.h	/^		NullWeightsException(string s) : runtime_error(s) { }$/;"	f	class:NullWeightsException
NullWeightsException	/usr/local/.home/manu/c++/comunicaciones/smc/smcExceptions.h	/^class NullWeightsException : public runtime_error$/;"	c
ObtainIndexes	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/BestParticlesResamplingAlgorithm.h	/^    virtual std::vector< int > ObtainIndexes(int n, const tVector& weights) const$/;"	f	class:BestParticlesResamplingAlgorithm
ObtainIndexes	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/MultinomialResamplingAlgorithm.h	/^	std::vector<int> ObtainIndexes(int n,const tVector &weights) const$/;"	f	class:MultinomialResamplingAlgorithm
ObtainIndexes	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^	virtual std::vector<int> ObtainIndexes(int n,const tVector &weights) const = 0;$/;"	p	class:ResamplingAlgorithm
ObtainIndexes	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResidualResamplingAlgorithm.cpp	/^std::vector<int> ResidualResamplingAlgorithm::ObtainIndexes(int n,const tVector &weights) const$/;"	f	class:ResidualResamplingAlgorithm
ObtainIndexes	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResidualResamplingAlgorithm.h	/^	std::vector<int> ObtainIndexes(int n,const tVector &weights) const;$/;"	p	class:ResidualResamplingAlgorithm
ObtainIndexes	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^	std::vector<int> ObtainIndexes(int n,const tVector &weights) const$/;"	f	class:WithThresholdResamplingAlgorithmWrapper
ObtainIndexes	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithoutReplacementResamplingAlgorithm.h	/^    virtual std::vector< int > ObtainIndexes(int n, const tVector& weights) const$/;"	f	class:WithoutReplacementResamplingAlgorithm
OnlyOnce	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^void BaseSystem::OnlyOnce()$/;"	f	class:BaseSystem
OnlyOnce	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    virtual void OnlyOnce();$/;"	p	class:BaseSystem
OnlyOnce	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.cpp	/^void ChannelOrderEstimationSystem::OnlyOnce()$/;"	f	class:ChannelOrderEstimationSystem
OnlyOnce	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^	virtual void OnlyOnce();$/;"	p	class:ChannelOrderEstimationSystem
PACKAGE	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define PACKAGE /;"	d
PACKAGE	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define PACKAGE /;"	d
PACKAGE_BUGREPORT	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_BUGREPORT	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_NAME	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_NAME	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_STRING	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_STRING	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_TARNAME	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_TARNAME	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_VERSION	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define PACKAGE_VERSION /;"	d
PACKAGE_VERSION	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define PACKAGE_VERSION /;"	d
PARTICLEFILTER_H	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^#define PARTICLEFILTER_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDACTIVEUSERS_H	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndActiveUsers.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDACTIVEUSERS_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDCHANNELORDERAPP_H	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDCHANNELORDERAPP_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTIONANDACTIVEUSERS_H	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTIONANDACTIVEUSERS_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTIONANDCHANNELORDERESTIMATION_H	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTIONANDCHANNELORDERESTIMATION_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTION_H	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTION_H$/;"	d
PARTICLEWITHCHANNELESTIMATION_H	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^#define PARTICLEWITHCHANNELESTIMATION_H$/;"	d
PARTICLE_H	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^#define PARTICLE_H$/;"	d
PATHCANDIDATE_H	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^#define PATHCANDIDATE_H$/;"	d
POWERPROFILEDEPENDENTNOISE_H	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^#define POWERPROFILEDEPENDENTNOISE_H$/;"	d
PRINT_PARAMETERS	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^#define PRINT_PARAMETERS$/;"	d	file:
PSPALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^#define PSPALGORITHM_H$/;"	d
PSPAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^PSPAlgorithm::PSPAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int smoothingLag, int firstSymbolVectorDetectedAt, double ARcoefficient, int nSurvivors): KnownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, m, channelEstimator, preamble),_rAllSymbolRows(0,_nInputs-1),_inputVector(N),_stateVector(N*(m-1)),_nSurvivors(nSurvivors),_d(smoothingLag),_startDetectionTime(preamble.cols()),_trellis(alphabet,N,m),_detectedSymbolVectors(new tMatrix(N,iLastSymbolVectorToBeDetected+smoothingLag)),_firstSymbolVectorDetectedAt(firstSymbolVectorDetectedAt),_ARcoefficient(ARcoefficient)$/;"	f	class:PSPAlgorithm
PSPAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    PSPAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int smoothingLag, int firstSymbolVectorDetectedAt, double ARcoefficient, int nSurvivors);$/;"	p	class:PSPAlgorithm
PSPAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^class PSPAlgorithm : public KnownChannelOrderAlgorithm$/;"	c
PSPBASEDSMCALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.h	/^#define PSPBASEDSMCALGORITHM_H$/;"	d
PSPBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.cpp	/^PSPBasedSMCAlgorithm::PSPBasedSMCAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances, double ARcoefficient): SMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, m, channelEstimator, preamble, smoothingLag, nParticles, resamplingAlgorithm, channelMatrixMean, channelMatrixVariances),_ARcoefficient(ARcoefficient)$/;"	f	class:PSPBasedSMCAlgorithm
PSPBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.h	/^    PSPBasedSMCAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances,double ARcoefficient);$/;"	p	class:PSPBasedSMCAlgorithm
PSPBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.h	/^class PSPBasedSMCAlgorithm : public SMCAlgorithm$/;"	c
PSPPATHCANDIDATE_H	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPathCandidate.h	/^#define PSPPATHCANDIDATE_H$/;"	d
PSPPATH_H	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^#define PSPPATH_H$/;"	d
PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.cpp	/^PSPPath::PSPPath(): ViterbiPath()$/;"	f	class:PSPPath
PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.cpp	/^PSPPath::PSPPath(const PSPPath &path):ViterbiPath(path),_channelMatrixEstimators(path._channelMatrixEstimators.size())$/;"	f	class:PSPPath
PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.cpp	/^PSPPath::PSPPath(int nTimeInstants,double cost, tMatrix initialSequence, std::vector<std::vector<tMatrix> > initialChannelMatrices, std::vector<ChannelMatrixEstimator *> channelMatrixEstimators): ViterbiPath(nTimeInstants, cost, initialSequence), _channelMatrixEstimators(channelMatrixEstimators.size())$/;"	f	class:PSPPath
PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^    PSPPath();$/;"	p	class:PSPPath
PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^    PSPPath(const PSPPath &path);$/;"	p	class:PSPPath
PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^    PSPPath(int nTimeInstants,double cost, tMatrix initialSequence, std::vector<std::vector<tMatrix> > initialChannelMatrices, std::vector<ChannelMatrixEstimator *> channelMatrixEstimators);$/;"	p	class:PSPPath
PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^class PSPPath : public ViterbiPath$/;"	c
PSPPathCandidate	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPathCandidate.h	/^class PSPPathCandidate : public PathCandidate$/;"	c
PSPVSPSPBASEDSMCSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^#define PSPVSPSPBASEDSMCSYSTEM_H$/;"	d
PSPVSSMCSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^#define PSPVSSMCSYSTEM_H$/;"	d
PSPvsPSPBasedSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.cpp	/^PSPvsPSPBasedSMCSystem::PSPvsPSPBasedSMCSystem()$/;"	f	class:PSPvsPSPBasedSMCSystem
PSPvsPSPBasedSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    PSPvsPSPBasedSMCSystem();$/;"	p	class:PSPvsPSPBasedSMCSystem
PSPvsPSPBasedSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^class PSPvsPSPBasedSMCSystem : public SMCSystem$/;"	c
PSPvsSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.cpp	/^PSPvsSMCSystem::PSPvsSMCSystem()$/;"	f	class:PSPvsSMCSystem
PSPvsSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    PSPvsSMCSystem();$/;"	p	class:PSPvsSMCSystem
PSPvsSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^class PSPvsSMCSystem : public SMCSystem$/;"	c
Particle	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.cpp	/^Particle::Particle(double weight,int symbolVectorLength,int nTimeInstants):_weight(weight),_symbolVectors(LaGenMatDouble::zeros(symbolVectorLength,nTimeInstants))$/;"	f	class:Particle
Particle	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    Particle(double weight,int symbolVectorLength,int nTimeInstants);$/;"	p	class:Particle
Particle	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^class Particle{$/;"	c
ParticleFilter	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.cpp	/^ParticleFilter::ParticleFilter(int nParticles):_capacity(nParticles),_nParticles(0),_particles(new ParticleWithChannelEstimation*[nParticles])$/;"	f	class:ParticleFilter
ParticleFilter	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    ParticleFilter(int nParticles);$/;"	p	class:ParticleFilter
ParticleFilter	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^class ParticleFilter{$/;"	c
ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation::ParticleWithChannelEstimation(const ParticleWithChannelEstimation &particle):Particle(particle),_channelMatrixEstimators(particle._channelMatrixEstimators.size())$/;"	f	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation::ParticleWithChannelEstimation(double weight, int symbolVectorLength, int nTimeInstants$/;"	f	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation::ParticleWithChannelEstimation(double weight, int symbolVectorLength, int nTimeInstants,vector <ChannelMatrixEstimator *> channelMatrixEstimators):Particle(weight, symbolVectorLength, nTimeInstants),_channelMatrixEstimators(channelMatrixEstimators)$/;"	f	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    ParticleWithChannelEstimation(const ParticleWithChannelEstimation &particle);$/;"	p	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    ParticleWithChannelEstimation(double weight, int symbolVectorLength, int nTimeInstants,ChannelMatrixEstimator *channelMatrixEstimator);$/;"	p	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    ParticleWithChannelEstimation(double weight, int symbolVectorLength, int nTimeInstants,std::vector <ChannelMatrixEstimator *> channelMatrixEstimators);$/;"	p	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^class ParticleWithChannelEstimation : public Particle$/;"	c
ParticleWithChannelEstimationAndActiveUsers	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndActiveUsers.cpp	/^ParticleWithChannelEstimationAndActiveUsers::ParticleWithChannelEstimationAndActiveUsers(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimator), WithActiveUsersParticleAddon(symbolVectorLength, nTimeInstants)$/;"	f	class:ParticleWithChannelEstimationAndActiveUsers
ParticleWithChannelEstimationAndActiveUsers	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndActiveUsers.h	/^    ParticleWithChannelEstimationAndActiveUsers(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator);$/;"	p	class:ParticleWithChannelEstimationAndActiveUsers
ParticleWithChannelEstimationAndActiveUsers	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndActiveUsers.h	/^class ParticleWithChannelEstimationAndActiveUsers : public ParticleWithChannelEstimation, public WithActiveUsersParticleAddon$/;"	c
ParticleWithChannelEstimationAndChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndChannelOrderAPP::ParticleWithChannelEstimationAndChannelOrderAPP(const ParticleWithChannelEstimationAndChannelOrderAPP& particle):ParticleWithChannelEstimation(particle),WithChannelOrderAppParticleAddon(particle)$/;"	f	class:ParticleWithChannelEstimationAndChannelOrderAPP
ParticleWithChannelEstimationAndChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndChannelOrderAPP::ParticleWithChannelEstimationAndChannelOrderAPP(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimators),WithChannelOrderAppParticleAddon(channelMatrixEstimators.size())$/;"	f	class:ParticleWithChannelEstimationAndChannelOrderAPP
ParticleWithChannelEstimationAndChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^	ParticleWithChannelEstimationAndChannelOrderAPP(const ParticleWithChannelEstimationAndChannelOrderAPP& particle);$/;"	p	class:ParticleWithChannelEstimationAndChannelOrderAPP
ParticleWithChannelEstimationAndChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^    ParticleWithChannelEstimationAndChannelOrderAPP(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators);$/;"	p	class:ParticleWithChannelEstimationAndChannelOrderAPP
ParticleWithChannelEstimationAndChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^class ParticleWithChannelEstimationAndChannelOrderAPP : public ParticleWithChannelEstimation, public WithChannelOrderAppParticleAddon$/;"	c
ParticleWithChannelEstimationAndLinearDetection	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.cpp	/^ParticleWithChannelEstimationAndLinearDetection::ParticleWithChannelEstimationAndLinearDetection(const ParticleWithChannelEstimationAndLinearDetection &particle):ParticleWithChannelEstimation(particle),WithLinearDetectionParticleAddon(particle)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.cpp	/^ParticleWithChannelEstimationAndLinearDetection::ParticleWithChannelEstimationAndLinearDetection(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator, LinearDetector *linearDetector): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimator),WithLinearDetectionParticleAddon(linearDetector)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.cpp	/^ParticleWithChannelEstimationAndLinearDetection::ParticleWithChannelEstimationAndLinearDetection(double weight, int symbolVectorLength, int nTimeInstants, vector< ChannelMatrixEstimator * > channelMatrixEstimators, vector< LinearDetector * > linearDetectors):ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimators),WithLinearDetectionParticleAddon(linearDetectors)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.h	/^	ParticleWithChannelEstimationAndLinearDetection(const ParticleWithChannelEstimationAndLinearDetection &particle);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.h	/^    ParticleWithChannelEstimationAndLinearDetection(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator, LinearDetector *linearDetector);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.h	/^    ParticleWithChannelEstimationAndLinearDetection(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators, std::vector< LinearDetector * > linearDetectors);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.h	/^class ParticleWithChannelEstimationAndLinearDetection : public ParticleWithChannelEstimation, public WithLinearDetectionParticleAddon$/;"	c
ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers::ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator, LinearDetector* linearDetector): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimator), WithLinearDetectionParticleAddon(linearDetector), WithActiveUsersParticleAddon(symbolVectorLength, nTimeInstants)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers
ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers.h	/^    ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator, LinearDetector* linearDetector);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers
ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers.h	/^class ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers : public ParticleWithChannelEstimation, public WithLinearDetectionParticleAddon, public WithActiveUsersParticleAddon$/;"	c
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation::ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation(const ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation& particle):ParticleWithChannelEstimationAndLinearDetection(particle),WithChannelOrderEstimationParticleAddon(particle)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation::ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators, std::vector< LinearDetector * > linearDetectors, ChannelOrderEstimator* channelOrderEstimator): ParticleWithChannelEstimationAndLinearDetection(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimators, linearDetectors), WithChannelOrderEstimationParticleAddon(channelOrderEstimator)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation.h	/^	ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation(const ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation& particle);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation.h	/^    ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators, std::vector< LinearDetector * > linearDetectors, ChannelOrderEstimator* channelOrderEstimator);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation.h	/^class ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation : public ParticleWithChannelEstimationAndLinearDetection, public WithChannelOrderEstimationParticleAddon$/;"	c
PathCandidate	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^    PathCandidate():_cost(-1.0) {}$/;"	f	class:PathCandidate
PathCandidate	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^class PathCandidate{$/;"	c
Permutations	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template vector<vector<int> > Util::Permutations(int *array, int nElements);$/;"	p	class:Util	file:
Permutations	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template vector<vector<uint> > Util::Permutations(uint *array, int nElements);$/;"	p	class:Util	file:
Permutations	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> vector<vector<T> > Util::Permutations(T *array, int nElements)$/;"	f	class:Util
Permutations	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static vector<vector<T> > Permutations(T *array, int nElements);$/;"	p	class:Util
PowerProfileDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.cpp	/^PowerProfileDependentNoise::PowerProfileDependentNoise(int nOutputs, int length, const DelayPowerProfile &powerProfile): Noise(nOutputs, length),_matrix(StatUtil::randnMatrix(_nOutputs,_length,0.0,1.0)),_stdDev(1.0)$/;"	f	class:PowerProfileDependentNoise
PowerProfileDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^    PowerProfileDependentNoise(int nOutputs, int length, const DelayPowerProfile &powerProfile);$/;"	p	class:PowerProfileDependentNoise
PowerProfileDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^class PowerProfileDependentNoise : public Noise$/;"	c
PrintStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::PrintStage(tStage exitOrArrival)$/;"	f	class:ViterbiAlgorithm
PrintStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    void PrintStage(tStage exitOrArrival);$/;"	p	class:ViterbiAlgorithm
PrintState	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^void PSPAlgorithm::PrintState(int iState)$/;"	f	class:PSPAlgorithm
PrintState	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    void PrintState(int iState);$/;"	p	class:PSPAlgorithm
ProcessOneObservation	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^void PSPAlgorithm::ProcessOneObservation(const tVector &observations,double noiseVariance)$/;"	f	class:PSPAlgorithm
ProcessOneObservation	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	void ProcessOneObservation(const tVector &observations,double noiseVariance);$/;"	p	class:PSPAlgorithm
RANDOM_H	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^#define RANDOM_H /;"	d
RESAMPLINGALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^#define RESAMPLINGALGORITHM_H$/;"	d
RESAMPLINGCRITERION_H	/usr/local/.home/manu/c++/comunicaciones/smc/ResamplingCriterion.h	/^#define RESAMPLINGCRITERION_H$/;"	d
RESIDUALRESAMPLINGALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResidualResamplingAlgorithm.h	/^#define RESIDUALRESAMPLINGALGORITHM_H$/;"	d
REV2TVT2007SYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/Rev2TVT2007System.h	/^#define REV2TVT2007SYSTEM_H$/;"	d
RLSESTIMATOR_H	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.h	/^#define RLSESTIMATOR_H$/;"	d
RLSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.cpp	/^RLSEstimator::RLSEstimator(const tMatrix &initialEstimation,int N,double forgettingFactor): ChannelMatrixEstimator(initialEstimation,N),_invForgettingFactor(1.0\/forgettingFactor),_invRtilde(LaGenMatDouble::eye(_nInputsXchannelOrder))$/;"	f	class:RLSEstimator
RLSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.h	/^    RLSEstimator(const tMatrix &initialEstimation,int N,double forgettingFactor);$/;"	p	class:RLSEstimator
RLSEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.h	/^class RLSEstimator : public ChannelMatrixEstimator$/;"	c
RLSchannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^	vector<ChannelMatrixEstimator *> RLSchannelEstimators;$/;"	m	class:TVT2007System
RLSchannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    vector<ChannelMatrixEstimator *> RLSchannelEstimators;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
RLSchannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^	vector<ChannelMatrixEstimator *> RLSchannelEstimators;$/;"	m	class:WSA08System
RMMSEDETECTOR_H	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^#define RMMSEDETECTOR_H$/;"	d
RMMSEDetector	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.cpp	/^RMMSEDetector::RMMSEDetector(int rows, int cols,double alphabetVariance,double forgettingFactor,int nSymbolsToBeDetected): LinearDetector(rows, cols,alphabetVariance),_forgettingFactor(forgettingFactor),_invForgettingFactor(1.0\/forgettingFactor),_nSymbolsToBeDetected(nSymbolsToBeDetected),_alphaPowerSumNow(1.0),_alphaPowerSumPrevious(1.0),_alphaPower(1.0),_g(rows),_invRtilde(LaGenMatDouble::eye(rows)),_filter(rows,nSymbolsToBeDetected)$/;"	f	class:RMMSEDetector
RMMSEDetector	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    RMMSEDetector(int rows, int cols,double alphabetVariance,double forgettingFactor,int nSymbolsToBeDetected);$/;"	p	class:RMMSEDetector
RMMSEDetector	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^class RMMSEDetector : public LinearDetector$/;"	c
RMMSElinearDetectors	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    vector<LinearDetector *> RMMSElinearDetectors;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
Random	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		Random () : _havesmpl(false) {struct timeval tv; gettimeofday(&tv, NULL); _seed = tv.tv_sec * tv.tv_usec;}$/;"	f	class:Random
Random	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		Random (uint32_t seed) : _seed(seed),_havesmpl(false) {};$/;"	f	class:Random
Random	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^class Random$/;"	c
Ref	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.cpp	/^void ViterbiPath::Ref(const ViterbiPath &path)$/;"	f	class:ViterbiPath
Ref	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    virtual void Ref(const ViterbiPath &path);$/;"	p	class:ViterbiPath
ResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^    ResamplingAlgorithm(ResamplingCriterion resamplingCriterion): _resamplingCriterion(resamplingCriterion) {}$/;"	f	class:ResamplingAlgorithm
ResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^class ResamplingAlgorithm{$/;"	c
ResamplingCriterion	/usr/local/.home/manu/c++/comunicaciones/smc/ResamplingCriterion.cpp	/^ResamplingCriterion::ResamplingCriterion(double resamplingRatio): _resamplingRatio(resamplingRatio)$/;"	f	class:ResamplingCriterion
ResamplingCriterion	/usr/local/.home/manu/c++/comunicaciones/smc/ResamplingCriterion.h	/^    ResamplingCriterion(double resamplingRatio);$/;"	p	class:ResamplingCriterion
ResamplingCriterion	/usr/local/.home/manu/c++/comunicaciones/smc/ResamplingCriterion.h	/^class ResamplingCriterion{$/;"	c
ResidualResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResidualResamplingAlgorithm.cpp	/^ResidualResamplingAlgorithm::ResidualResamplingAlgorithm(ResamplingCriterion resamplingCriterion): ResamplingAlgorithm(resamplingCriterion)$/;"	f	class:ResidualResamplingAlgorithm
ResidualResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResidualResamplingAlgorithm.h	/^    ResidualResamplingAlgorithm(ResamplingCriterion resamplingCriterion);$/;"	p	class:ResidualResamplingAlgorithm
ResidualResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResidualResamplingAlgorithm.h	/^class ResidualResamplingAlgorithm : public ResamplingAlgorithm$/;"	c
Rev2TVT2007System	/usr/local/.home/manu/c++/comunicaciones/systems/Rev2TVT2007System.cpp	/^Rev2TVT2007System::Rev2TVT2007System(): TVT2007System()$/;"	f	class:Rev2TVT2007System
Rev2TVT2007System	/usr/local/.home/manu/c++/comunicaciones/systems/Rev2TVT2007System.h	/^    Rev2TVT2007System();$/;"	p	class:Rev2TVT2007System
Rev2TVT2007System	/usr/local/.home/manu/c++/comunicaciones/systems/Rev2TVT2007System.h	/^class Rev2TVT2007System : public TVT2007System$/;"	c
RuntimeException	/usr/local/.home/manu/c++/comunicaciones/src/exceptions.h	/^		RuntimeException(string s) : runtime_error(s) { }$/;"	f	class:RuntimeException
RuntimeException	/usr/local/.home/manu/c++/comunicaciones/src/exceptions.h	/^class RuntimeException : public runtime_error$/;"	c
RuntimeException	/usr/local/.home/manu/c++/comunicaciones/transmision/exceptions.h	/^		RuntimeException(string s) : runtime_error(s) { }$/;"	f	class:RuntimeException
RuntimeException	/usr/local/.home/manu/c++/comunicaciones/transmision/exceptions.h	/^class RuntimeException : public runtime_error$/;"	c
SER	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.cpp	/^double Algorithm::SER(const tMatrix &symbols)$/;"	f	class:Algorithm
SER	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    double SER(const tMatrix &symbols);$/;"	p	class:Algorithm
SISOPTALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/SISoptAlgorithm.h	/^#define SISOPTALGORITHM_H$/;"	d
SISoptAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SISoptAlgorithm.cpp	/^SISoptAlgorithm::SISoptAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances): SMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, m, channelEstimator, preamble, 0, nParticles, resamplingAlgorithm, channelMatrixMean, channelMatrixVariances)$/;"	f	class:SISoptAlgorithm
SISoptAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SISoptAlgorithm.h	/^    SISoptAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances);$/;"	p	class:SISoptAlgorithm
SISoptAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SISoptAlgorithm.h	/^class SISoptAlgorithm : public SMCAlgorithm$/;"	c
SMCALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^#define SMCALGORITHM_H$/;"	d
SMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^SMCAlgorithm::SMCAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, ChannelMatrixEstimator *channelEstimator, tMatrix preamble,int smoothingLag,int nParticles,ResamplingAlgorithm *resamplingAlgorithm, const tMatrix &channelMatrixMean, const tMatrix &channelMatrixVariances): KnownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected,m, channelEstimator, preamble),$/;"	f	class:SMCAlgorithm
SMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^SMCAlgorithm::SMCAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, tMatrix preamble,int smoothingLag,ParticleFilter *particleFilter,ResamplingAlgorithm *resamplingAlgorithm): KnownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected,m, preamble),$/;"	f	class:SMCAlgorithm
SMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    SMCAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, ChannelMatrixEstimator *channelEstimator, tMatrix preamble,int smoothingLag,int nParticles,ResamplingAlgorithm *resamplingAlgorithm, const tMatrix &channelMatrixMean, const tMatrix &channelMatrixVariances);$/;"	p	class:SMCAlgorithm
SMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    SMCAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected,int m, tMatrix preamble,int smoothingLag,ParticleFilter *particleFilter,ResamplingAlgorithm *resamplingAlgorithm);$/;"	p	class:SMCAlgorithm
SMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^class SMCAlgorithm : public KnownChannelOrderAlgorithm$/;"	c
SMCEXCEPTIONS_H	/usr/local/.home/manu/c++/comunicaciones/smc/smcExceptions.h	/^#define SMCEXCEPTIONS_H$/;"	d
SMCSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^#define SMCSYSTEM_H$/;"	d
SMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.cpp	/^SMCSystem::SMCSystem()$/;"	f	class:SMCSystem
SMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    SMCSystem();$/;"	p	class:SMCSystem
SMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^class SMCSystem : public BaseSystem$/;"	c
SNRs	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<int> SNRs;$/;"	m	class:BaseSystem
STATUTIL_H	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^#define STATUTIL_H$/;"	d
STDC_HEADERS	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define STDC_HEADERS /;"	d
STDC_HEADERS	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define STDC_HEADERS /;"	d
STILLMEMORYMIMOCHANNEL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^#define STILLMEMORYMIMOCHANNEL_H$/;"	d
SetEstimatorIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^void SMCAlgorithm::SetEstimatorIndex(int n)$/;"	f	class:SMCAlgorithm
SetEstimatorIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    void SetEstimatorIndex(int n);$/;"	p	class:SMCAlgorithm
Simulate	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^void BaseSystem::Simulate()$/;"	f	class:BaseSystem
Simulate	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    void Simulate();$/;"	p	class:BaseSystem
StatUtil	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^class StatUtil{$/;"	c
StillMemoryMIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.cpp	/^StillMemoryMIMOChannel::StillMemoryMIMOChannel(int nInputs, int nOutputs, int memory, int length): MIMOChannel(nInputs, nOutputs, length),_memory(memory),_nInputsnOutputsMemory(_nInputs*_nOutputs*_memory),_nInputsMemory(_nInputs*_memory)$/;"	f	class:StillMemoryMIMOChannel
StillMemoryMIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^    StillMemoryMIMOChannel(int nInputs, int nOutputs, int memory,int length);$/;"	p	class:StillMemoryMIMOChannel
StillMemoryMIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^class StillMemoryMIMOChannel : public MIMOChannel$/;"	c
T	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^    double T; \/\/ (s)$/;"	m	class:Elsevier2007BesselChannelSystem
T	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    double T; \/\/ (s)$/;"	m	class:LMSmuTestSystem
T	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    double T; \/\/ (s)$/;"	m	class:PSPvsSMCSystem
T	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^    double T; \/\/ (s)$/;"	m	class:TesisComplejidadReducidaBesselSystem
T	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^    double T; \/\/ (s)$/;"	m	class:TesisOrdenCanalDesconocidoBesselSystem
TESISCOMPLEJIDADREDUCIDAARSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.h	/^#define TESISCOMPLEJIDADREDUCIDAARSYSTEM_H$/;"	d
TESISCOMPLEJIDADREDUCIDABESSELNUMEROPARTICULASSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.h	/^#define TESISCOMPLEJIDADREDUCIDABESSELNUMEROPARTICULASSYSTEM_H$/;"	d
TESISCOMPLEJIDADREDUCIDABESSELSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^#define TESISCOMPLEJIDADREDUCIDABESSELSYSTEM_H$/;"	d
TESISCOMPLEJIDADREDUCIDASYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^#define TESISCOMPLEJIDADREDUCIDASYSTEM_H$/;"	d
TESISORDENCANALDESCONOCIDOARSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.h	/^#define TESISORDENCANALDESCONOCIDOARSYSTEM_H$/;"	d
TESISORDENCANALDESCONOCIDOBESSELSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^#define TESISORDENCANALDESCONOCIDOBESSELSYSTEM_H$/;"	d
TESISORDENCANALDESCONOCIDOSYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^#define TESISORDENCANALDESCONOCIDOSYSTEM_H$/;"	d
TIMEINVARIANTCHANNEL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/TimeInvariantChannel.h	/^#define TIMEINVARIANTCHANNEL_H$/;"	d
TIMEVARYINGCHANNELCMEBASEDALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.h	/^#define TIMEVARYINGCHANNELCMEBASEDALGORITHM_H$/;"	d
TIPOS_H	/usr/local/.home/manu/c++/comunicaciones/src/types.h	/^#define TIPOS_H$/;"	d
TRANSITIONCRITERION_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/TransitionCriterion.h	/^#define TRANSITIONCRITERION_H$/;"	d
TRANSMISSIONUTIL_H	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.h	/^#define TRANSMISSIONUTIL_H$/;"	d
TRELLIS_H	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^#define TRELLIS_H$/;"	d
TRIANGULARIZATIONBASEDSMCALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.h	/^#define TRIANGULARIZATIONBASEDSMCALGORITHM_H$/;"	d
TVT2007SYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^#define TVT2007SYSTEM_H$/;"	d
TVT2007System	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.cpp	/^TVT2007System::TVT2007System()$/;"	f	class:TVT2007System
TVT2007System	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    TVT2007System();$/;"	p	class:TVT2007System
TVT2007System	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^class TVT2007System : public ChannelOrderEstimationSystem$/;"	c
TesisComplejidadReducidaARSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.cpp	/^TesisComplejidadReducidaARSystem::TesisComplejidadReducidaARSystem(): TesisComplejidadReducidaSystem()$/;"	f	class:TesisComplejidadReducidaARSystem
TesisComplejidadReducidaARSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.h	/^    TesisComplejidadReducidaARSystem();$/;"	p	class:TesisComplejidadReducidaARSystem
TesisComplejidadReducidaARSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.h	/^class TesisComplejidadReducidaARSystem : public TesisComplejidadReducidaSystem$/;"	c
TesisComplejidadReducidaBesselNumeroParticulasSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.cpp	/^TesisComplejidadReducidaBesselNumeroParticulasSystem::TesisComplejidadReducidaBesselNumeroParticulasSystem(): TesisComplejidadReducidaBesselSystem()$/;"	f	class:TesisComplejidadReducidaBesselNumeroParticulasSystem
TesisComplejidadReducidaBesselNumeroParticulasSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.h	/^    TesisComplejidadReducidaBesselNumeroParticulasSystem();$/;"	p	class:TesisComplejidadReducidaBesselNumeroParticulasSystem
TesisComplejidadReducidaBesselNumeroParticulasSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.h	/^class TesisComplejidadReducidaBesselNumeroParticulasSystem : public TesisComplejidadReducidaBesselSystem$/;"	c
TesisComplejidadReducidaBesselSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.cpp	/^TesisComplejidadReducidaBesselSystem::TesisComplejidadReducidaBesselSystem(): TesisComplejidadReducidaSystem()$/;"	f	class:TesisComplejidadReducidaBesselSystem
TesisComplejidadReducidaBesselSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^    TesisComplejidadReducidaBesselSystem();$/;"	p	class:TesisComplejidadReducidaBesselSystem
TesisComplejidadReducidaBesselSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^class TesisComplejidadReducidaBesselSystem : public TesisComplejidadReducidaSystem$/;"	c
TesisComplejidadReducidaSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.cpp	/^TesisComplejidadReducidaSystem::TesisComplejidadReducidaSystem()$/;"	f	class:TesisComplejidadReducidaSystem
TesisComplejidadReducidaSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    TesisComplejidadReducidaSystem();$/;"	p	class:TesisComplejidadReducidaSystem
TesisComplejidadReducidaSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^class TesisComplejidadReducidaSystem : public SMCSystem$/;"	c
TesisOrdenCanalDesconocidoARSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.cpp	/^TesisOrdenCanalDesconocidoARSystem::TesisOrdenCanalDesconocidoARSystem()$/;"	f	class:TesisOrdenCanalDesconocidoARSystem
TesisOrdenCanalDesconocidoARSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.h	/^    TesisOrdenCanalDesconocidoARSystem();$/;"	p	class:TesisOrdenCanalDesconocidoARSystem
TesisOrdenCanalDesconocidoARSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.h	/^class TesisOrdenCanalDesconocidoARSystem : public TesisOrdenCanalDesconocidoSystem$/;"	c
TesisOrdenCanalDesconocidoBesselSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.cpp	/^TesisOrdenCanalDesconocidoBesselSystem::TesisOrdenCanalDesconocidoBesselSystem()$/;"	f	class:TesisOrdenCanalDesconocidoBesselSystem
TesisOrdenCanalDesconocidoBesselSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^    TesisOrdenCanalDesconocidoBesselSystem();$/;"	p	class:TesisOrdenCanalDesconocidoBesselSystem
TesisOrdenCanalDesconocidoBesselSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^class TesisOrdenCanalDesconocidoBesselSystem : public TesisOrdenCanalDesconocidoSystem$/;"	c
TesisOrdenCanalDesconocidoSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.cpp	/^TesisOrdenCanalDesconocidoSystem::TesisOrdenCanalDesconocidoSystem()$/;"	f	class:TesisOrdenCanalDesconocidoSystem
TesisOrdenCanalDesconocidoSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    TesisOrdenCanalDesconocidoSystem();$/;"	p	class:TesisOrdenCanalDesconocidoSystem
TesisOrdenCanalDesconocidoSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^class TesisOrdenCanalDesconocidoSystem : public ChannelOrderEstimationSystem$/;"	c
TimeInvariantChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/TimeInvariantChannel.cpp	/^TimeInvariantChannel::TimeInvariantChannel(int nInputs, int nOutputs, int memory, int length, tMatrix channelMatrix): StillMemoryMIMOChannel(nInputs, nOutputs, memory, length),_channelMatrix(channelMatrix)$/;"	f	class:TimeInvariantChannel
TimeInvariantChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/TimeInvariantChannel.h	/^    TimeInvariantChannel(int nInputs, int nOutputs, int memory, int length, tMatrix channelMatrix);$/;"	p	class:TimeInvariantChannel
TimeInvariantChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/TimeInvariantChannel.h	/^class TimeInvariantChannel : public StillMemoryMIMOChannel$/;"	c
TimeVaryingChannelCMEbasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.cpp	/^TimeVaryingChannelCMEbasedAlgorithm::TimeVaryingChannelCMEbasedAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, const tMatrix &symbolVectors): UnknownChannelOrderAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble, iFirstObservation),_symbolVectors(symbolVectors)$/;"	f	class:TimeVaryingChannelCMEbasedAlgorithm
TimeVaryingChannelCMEbasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.h	/^    TimeVaryingChannelCMEbasedAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, const tMatrix &symbolVectors);$/;"	p	class:TimeVaryingChannelCMEbasedAlgorithm
TimeVaryingChannelCMEbasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.h	/^class TimeVaryingChannelCMEbasedAlgorithm : public UnknownChannelOrderAlgorithm$/;"	c
TransitionCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/TransitionCriterion.h	/^class TransitionCriterion{$/;"	c
TransmissionUtil	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.h	/^class TransmissionUtil{$/;"	c
Trellis	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.cpp	/^Trellis::Trellis(const Alphabet &alphabet, int N, int m)$/;"	f	class:Trellis
Trellis	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^    Trellis(const Alphabet &alphabet, int N, int m);$/;"	p	class:Trellis
Trellis	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^class Trellis{$/;"	c
TriangularizationBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.cpp	/^TriangularizationBasedSMCAlgorithm::TriangularizationBasedSMCAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances,double ARcoefficient,double ARprocessVariance): SMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, m, channelEstimator, preamble, smoothingLag, nParticles, resamplingAlgorithm, channelMatrixMean, channelMatrixVariances),_ARcoefficient(ARcoefficient),_ARprocessVariance(ARprocessVariance)$/;"	f	class:TriangularizationBasedSMCAlgorithm
TriangularizationBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.h	/^    TriangularizationBasedSMCAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, tMatrix preamble, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances,double ARcoefficient,double ARprocessVariance);$/;"	p	class:TriangularizationBasedSMCAlgorithm
TriangularizationBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.h	/^class TriangularizationBasedSMCAlgorithm : public SMCAlgorithm$/;"	c
UNIFORMRELATEDCRITERION_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/UniformRelatedCriterion.h	/^#define UNIFORMRELATEDCRITERION_H$/;"	d
UNKNOWNACTIVEUSERSLINEARFILTERBASEDSMCALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.h	/^#define UNKNOWNACTIVEUSERSLINEARFILTERBASEDSMCALGORITHM_H$/;"	d
UNKNOWNCHANNELALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelAlgorithm.h	/^#define UNKNOWNCHANNELALGORITHM_H$/;"	d
UNKNOWNCHANNELORDERALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^#define UNKNOWNCHANNELORDERALGORITHM_H$/;"	d
USERSACTIVITYDISTRIBUTION_H	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^#define USERSACTIVITYDISTRIBUTION_H$/;"	d
USIS	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.cpp	/^USIS::USIS(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators,vector<LinearDetector *> linearDetectors, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm,ChannelOrderEstimator * channelOrderEstimator,double ARcoefficient,double samplingVariance,double ARprocessVariance): MultipleChannelEstimatorsPerParticleSMCAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm),_linearDetectors(linearDetectors.size()),_channelOrderEstimator(channelOrderEstimator->clone()),_particleFilter(nParticles),_ARcoefficient(ARcoefficient),_samplingVariance(samplingVariance),_ARprocessVariance(ARprocessVariance),_rAllObservationRows(0,_nOutputs-1)$/;"	f	class:USIS
USIS	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    USIS(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators,vector<LinearDetector *> linearDetectors, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, ChannelOrderEstimator * channelOrderEstimator, double ARcoefficient,double samplingVariance,double ARprocessVariance);$/;"	p	class:USIS
USIS	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^class USIS : public MultipleChannelEstimatorsPerParticleSMCAlgorithm$/;"	c
USIS2SISALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.h	/^#define USIS2SISALGORITHM_H$/;"	d
USIS2SISAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.cpp	/^USIS2SISAlgorithm::USIS2SISAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, vector< LinearDetector * > linearDetectors, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, ChannelOrderEstimator* channelOrderEstimator, double ARcoefficient, double samplingVariance, double ARprocessVariance, TransitionCriterion *transitionCriterion): USIS(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected, channelEstimators, linearDetectors, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm, channelOrderEstimator, ARcoefficient, samplingVariance, ARprocessVariance),_transitionCriterion(transitionCriterion)$/;"	f	class:USIS2SISAlgorithm
USIS2SISAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.h	/^    USIS2SISAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected, vector< ChannelMatrixEstimator * > channelEstimators, vector< LinearDetector * > linearDetectors, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, ChannelOrderEstimator* channelOrderEstimator, double ARcoefficient, double samplingVariance, double ARprocessVariance, TransitionCriterion *transitionCriterion);$/;"	p	class:USIS2SISAlgorithm
USIS2SISAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.h	/^class USIS2SISAlgorithm : public USIS$/;"	c
USIS_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^#define USIS_H$/;"	d
USISmaximumProbabilityCriterion	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    TransitionCriterion *USISmaximumProbabilityCriterion,*USISuniformRelatedCriterion;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
USISuniformRelatedCriterion	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    TransitionCriterion *USISmaximumProbabilityCriterion,*USISuniformRelatedCriterion;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
UTILEXCEPTIONS_H	/usr/local/.home/manu/c++/comunicaciones/util/utilExceptions.h	/^#define UTILEXCEPTIONS_H$/;"	d
UTIL_H	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^#define UTIL_H$/;"	d
UniformRelatedCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/UniformRelatedCriterion.cpp	/^UniformRelatedCriterion::UniformRelatedCriterion(double ratio):_ratio(ratio)$/;"	f	class:UniformRelatedCriterion
UniformRelatedCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/UniformRelatedCriterion.h	/^    UniformRelatedCriterion(double ratio);$/;"	p	class:UniformRelatedCriterion
UniformRelatedCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/UniformRelatedCriterion.h	/^class UniformRelatedCriterion : public TransitionCriterion$/;"	c
UnknownActiveUsersLinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.cpp	/^UnknownActiveUsersLinearFilterBasedSMCAlgorithm::UnknownActiveUsersLinearFilterBasedSMCAlgorithm(string name, Alphabet alphabet, int L, int Nr, int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, LinearDetector *linearDetector, tMatrix preamble, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances, const UsersActivityDistribution &usersActivityPdf): SMCAlgorithm(name, alphabet, L, Nr, N, iLastSymbolVectorToBeDetected, m, channelEstimator, preamble, smoothingLag, nParticles, resamplingAlgorithm, channelMatrixMean, channelMatrixVariances),_linearDetector(linearDetector->clone()),_usersActivityPdf(usersActivityPdf)$/;"	f	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
UnknownActiveUsersLinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.h	/^    UnknownActiveUsersLinearFilterBasedSMCAlgorithm(string name, Alphabet alphabet, int L, int Nr, int N, int iLastSymbolVectorToBeDetected, int m, ChannelMatrixEstimator* channelEstimator, LinearDetector *linearDetector, tMatrix preamble, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm, const tMatrix& channelMatrixMean, const tMatrix& channelMatrixVariances, const UsersActivityDistribution &usersActivityPdf);$/;"	p	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
UnknownActiveUsersLinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.h	/^class UnknownActiveUsersLinearFilterBasedSMCAlgorithm : public SMCAlgorithm$/;"	c
UnknownChannelAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelAlgorithm.cpp	/^UnknownChannelAlgorithm::UnknownChannelAlgorithm(string name, Alphabet  alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected) : Algorithm(name,alphabet,L,Nr,N,iLastSymbolVectorToBeDetected)$/;"	f	class:UnknownChannelAlgorithm
UnknownChannelAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelAlgorithm.h	/^    UnknownChannelAlgorithm(string name, Alphabet  alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected);$/;"	p	class:UnknownChannelAlgorithm
UnknownChannelAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelAlgorithm.h	/^class UnknownChannelAlgorithm : public Algorithm$/;"	c
UnknownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.cpp	/^UnknownChannelOrderAlgorithm::UnknownChannelOrderAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected,vector<ChannelMatrixEstimator *> channelEstimators,tMatrix preamble,int iFirstObservation): UnknownChannelAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected),_channelEstimators(channelEstimators.size()),_candidateOrders( channelEstimators.size()),_maxOrder(-1),_iFirstObservation(iFirstObservation),_preamble(preamble)$/;"	f	class:UnknownChannelOrderAlgorithm
UnknownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^    UnknownChannelOrderAlgorithm(string name, Alphabet alphabet, int L, int Nr,int N, int iLastSymbolVectorToBeDetected,vector<ChannelMatrixEstimator *> channelEstimators,tMatrix preamble,int iFirstObservation);$/;"	p	class:UnknownChannelOrderAlgorithm
UnknownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^class UnknownChannelOrderAlgorithm : public UnknownChannelAlgorithm$/;"	c
Update	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.cpp	/^void PSPPath::Update(const PSPPath& path, tVector newSymbolVector, double newCost, std::vector<ChannelMatrixEstimator *> newChannelMatrixEstimators)$/;"	f	class:PSPPath
Update	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^    void Update(const PSPPath& path, tVector newSymbolVector, double newCost, std::vector<ChannelMatrixEstimator *> newChannelMatrixEstimators);$/;"	p	class:PSPPath
Update	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.cpp	/^void ViterbiPath::Update(const ViterbiPath &path, tVector newSymbolVector, double newCost)$/;"	f	class:ViterbiPath
Update	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    void Update(const ViterbiPath &path, tVector newSymbolVector, double newCost);$/;"	p	class:ViterbiPath
Update	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.cpp	/^void APPbasedChannelOrderEstimator::Update(const tVector &observations,const vector<tMatrix> &channelMatrices,const tVector &symbolVector,double noiseVariance)$/;"	f	class:APPbasedChannelOrderEstimator
Update	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    void Update(const tVector &observations,const vector<tMatrix> &channelMatrix,const tVector &symbolVector,double noiseVariance);$/;"	p	class:APPbasedChannelOrderEstimator
Update	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    virtual void Update(const tVector &observations,const std::vector<tMatrix> &channelMatrix,const tVector &symbolVector,double noiseVariance) = 0;$/;"	p	class:ChannelOrderEstimator
UpdateParticleChannelOrderEstimators	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual void UpdateParticleChannelOrderEstimators(Particle *particle,const tMatrix &observations,const std::vector<std::vector<tMatrix> > &channelMatrices,vector<double> &noiseVariances,const tMatrix &sequenceToProcess) {}$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
UpdateParticleChannelOrderEstimators	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.cpp	/^void USIS::UpdateParticleChannelOrderEstimators(Particle *particle,const tMatrix &observations,const std::vector<std::vector<tMatrix> > &channelMatrices,vector<double> &noiseVariances,const tMatrix &sequenceToProcess)$/;"	f	class:USIS
UpdateParticleChannelOrderEstimators	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    virtual void UpdateParticleChannelOrderEstimators(Particle *particle,const tMatrix &observations,const std::vector<std::vector<tMatrix> > &channelMatrices,vector<double> &noiseVariances,const tMatrix &sequenceToProcess);$/;"	p	class:USIS
UsersActivityDistribution	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.cpp	/^UsersActivityDistribution::UsersActivityDistribution(const double userPersistenceProb, const double newActiveUserProb, const double userPriorProb):_prior(2),_userActiveGivenItWasPdf(2),_userActiveGivenItWasNotPdf(2)$/;"	f	class:UsersActivityDistribution
UsersActivityDistribution	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^    UsersActivityDistribution(const double userPersistenceProb, const double newActiveUserProb, const double userPriorProb);$/;"	p	class:UsersActivityDistribution
UsersActivityDistribution	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^class UsersActivityDistribution{$/;"	c
Util	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^class Util{$/;"	c
VERSION	/usr/local/.home/manu/c++/comunicaciones/debug/config.h	/^#define VERSION /;"	d
VERSION	/usr/local/.home/manu/c++/comunicaciones/optimized/config.h	/^#define VERSION /;"	d
VITERBIALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^#define VITERBIALGORITHM_H$/;"	d
VITERBIPATH_H	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^#define VITERBIPATH_H$/;"	d
VarianceAt	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	double VarianceAt(int n) const { double stdDev = stdDevAt(n); return stdDev*stdDev;};$/;"	f	class:Noise
ViterbiAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.cpp	/^ViterbiAlgorithm::ViterbiAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected, const StillMemoryMIMOChannel& channel,const tMatrix &preamble,int smoothingLag): KnownChannelAlgorithm(name, alphabet, L, Nr,N, iLastSymbolVectorToBeDetected,  channel),_inputVector(channel.nInputs()),_stateVector(channel.nInputs()*(channel.memory()-1)),_d(smoothingLag),_trellis(alphabet,N,channel.memory()),_preamble(preamble),_detectedSymbolVectors(NULL),rAllSymbolRows(0,_channel.nInputs()-1),rmMinus1FirstColumns(0,channel.memory()-2)$/;"	f	class:ViterbiAlgorithm
ViterbiAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    ViterbiAlgorithm(string name, Alphabet alphabet,int L,int Nr,int N, int iLastSymbolVectorToBeDetected, const StillMemoryMIMOChannel& channel,const tMatrix &preamble,int smoothingLag);$/;"	p	class:ViterbiAlgorithm
ViterbiAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^class ViterbiAlgorithm : public KnownChannelAlgorithm$/;"	c
ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.cpp	/^ViterbiPath::ViterbiPath():_nTimeInstants(0),_cost(0.0),_detectedSequence(NULL)$/;"	f	class:ViterbiPath
ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.cpp	/^ViterbiPath::ViterbiPath(const ViterbiPath &path):_nTimeInstants(path._nTimeInstants),_cost(path._cost)$/;"	f	class:ViterbiPath
ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.cpp	/^ViterbiPath::ViterbiPath(int nTimeInstants,double cost,tMatrix initialSequence):_nTimeInstants(nTimeInstants),_cost(cost),_detectedSequence(new tMatrix(initialSequence))$/;"	f	class:ViterbiPath
ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    ViterbiPath();$/;"	p	class:ViterbiPath
ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    ViterbiPath(const ViterbiPath &path);$/;"	p	class:ViterbiPath
ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    ViterbiPath(int nTimeInstants,double cost,tMatrix initialSequence);$/;"	p	class:ViterbiPath
ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^class ViterbiPath{$/;"	c
WITHACTIVEUSERSPARTICLEADDON_H	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^#define WITHACTIVEUSERSPARTICLEADDON_H$/;"	d
WITHCHANNELORDERAPPPARTICLEADDON_H	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^#define WITHCHANNELORDERAPPPARTICLEADDON_H$/;"	d
WITHCHANNELORDERESTIMATIONPARTICLEADDON_H	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.h	/^#define WITHCHANNELORDERESTIMATIONPARTICLEADDON_H$/;"	d
WITHLINEARDETECTIONPARTICLEADDON_H	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.h	/^#define WITHLINEARDETECTIONPARTICLEADDON_H$/;"	d
WITHOUTREPLACEMENTRESAMPLINGALGORITHM_H	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithoutReplacementResamplingAlgorithm.h	/^#define WITHOUTREPLACEMENTRESAMPLINGALGORITHM_H$/;"	d
WITHTHRESHOLDRESAMPLINGALGORITHMWRAPPER_H	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^#define WITHTHRESHOLDRESAMPLINGALGORITHMWRAPPER_H$/;"	d
WSA08SYSTEM_H	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^#define WSA08SYSTEM_H$/;"	d
WSA08System	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.cpp	/^WSA08System::WSA08System()$/;"	f	class:WSA08System
WSA08System	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    WSA08System();$/;"	p	class:WSA08System
WSA08System	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^class WSA08System : public ChannelOrderEstimationSystem$/;"	c
WithActiveUsersParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.cpp	/^WithActiveUsersParticleAddon::WithActiveUsersParticleAddon(int symbolVectorLength,int nTimeInstants):_activeUsers(nTimeInstants,std::vector<bool>(symbolVectorLength,false)),_symbolVectorLength(symbolVectorLength)$/;"	f	class:WithActiveUsersParticleAddon
WithActiveUsersParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^    WithActiveUsersParticleAddon(int symbolVectorLength,int nTimeInstants);$/;"	p	class:WithActiveUsersParticleAddon
WithActiveUsersParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^class WithActiveUsersParticleAddon{$/;"	c
WithChannelOrderAppParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.cpp	/^WithChannelOrderAppParticleAddon::WithChannelOrderAppParticleAddon(const WithChannelOrderAppParticleAddon& withChannelOrderAppParticleAddon):_channelOrderAPP(withChannelOrderAppParticleAddon._channelOrderAPP)$/;"	f	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.cpp	/^WithChannelOrderAppParticleAddon::WithChannelOrderAppParticleAddon(int nChannelOrderAPP):_channelOrderAPP(nChannelOrderAPP)$/;"	f	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.cpp	/^WithChannelOrderAppParticleAddon::WithChannelOrderAppParticleAddon(std::vector<double> channelOrderAPP):_channelOrderAPP(channelOrderAPP)$/;"	f	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^    WithChannelOrderAppParticleAddon(const WithChannelOrderAppParticleAddon& withChannelOrderAppParticleAddon);$/;"	p	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^    WithChannelOrderAppParticleAddon(int nChannelOrderAPP);$/;"	p	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^    WithChannelOrderAppParticleAddon(std::vector<double> channelOrderAPP);$/;"	p	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^class WithChannelOrderAppParticleAddon{$/;"	c
WithChannelOrderEstimationParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.cpp	/^WithChannelOrderEstimationParticleAddon::WithChannelOrderEstimationParticleAddon(ChannelOrderEstimator * channelOrderEstimator):_channelOrderEstimator(channelOrderEstimator)$/;"	f	class:WithChannelOrderEstimationParticleAddon
WithChannelOrderEstimationParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.cpp	/^WithChannelOrderEstimationParticleAddon::WithChannelOrderEstimationParticleAddon(const WithChannelOrderEstimationParticleAddon& withChannelOrderEstimationParticleAddon):_channelOrderEstimator(withChannelOrderEstimationParticleAddon._channelOrderEstimator->clone())$/;"	f	class:WithChannelOrderEstimationParticleAddon
WithChannelOrderEstimationParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.h	/^    WithChannelOrderEstimationParticleAddon(ChannelOrderEstimator * channelOrderEstimator);$/;"	p	class:WithChannelOrderEstimationParticleAddon
WithChannelOrderEstimationParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.h	/^    WithChannelOrderEstimationParticleAddon(const WithChannelOrderEstimationParticleAddon& withChannelOrderEstimationParticleAddon);$/;"	p	class:WithChannelOrderEstimationParticleAddon
WithChannelOrderEstimationParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.h	/^class WithChannelOrderEstimationParticleAddon{$/;"	c
WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.cpp	/^WithLinearDetectionParticleAddon::WithLinearDetectionParticleAddon(LinearDetector *linearDetector):_linearDetectors(1)$/;"	f	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.cpp	/^WithLinearDetectionParticleAddon::WithLinearDetectionParticleAddon(const WithLinearDetectionParticleAddon& withLinearDetectionParticleAddon):_linearDetectors(withLinearDetectionParticleAddon._linearDetectors.size())$/;"	f	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.cpp	/^WithLinearDetectionParticleAddon::WithLinearDetectionParticleAddon(std::vector<LinearDetector *> linearDetectors):_linearDetectors(linearDetectors)$/;"	f	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.h	/^	WithLinearDetectionParticleAddon(const WithLinearDetectionParticleAddon& withLinearDetectionParticleAddon);$/;"	p	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.h	/^    WithLinearDetectionParticleAddon(LinearDetector *linearDetector);$/;"	p	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.h	/^    WithLinearDetectionParticleAddon(std::vector<LinearDetector *> linearDetectors);$/;"	p	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.h	/^class WithLinearDetectionParticleAddon{$/;"	c
WithThresholdResamplingAlgorithmWrapper	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.cpp	/^WithThresholdResamplingAlgorithmWrapper::WithThresholdResamplingAlgorithmWrapper(ResamplingAlgorithm *resamplingAlgorithm,double threshold): ResamplingAlgorithm(resamplingAlgorithm->GetResamplingCriterion()),_threshold(threshold),_realResamplingAlgorithm(resamplingAlgorithm)$/;"	f	class:WithThresholdResamplingAlgorithmWrapper
WithThresholdResamplingAlgorithmWrapper	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.cpp	/^WithThresholdResamplingAlgorithmWrapper::WithThresholdResamplingAlgorithmWrapper(const WithThresholdResamplingAlgorithmWrapper& withThresholdResamplingAlgorithmWrapper):ResamplingAlgorithm(withThresholdResamplingAlgorithmWrapper),_threshold(withThresholdResamplingAlgorithmWrapper._threshold),_realResamplingAlgorithm(withThresholdResamplingAlgorithmWrapper._realResamplingAlgorithm->clone())$/;"	f	class:WithThresholdResamplingAlgorithmWrapper
WithThresholdResamplingAlgorithmWrapper	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^    WithThresholdResamplingAlgorithmWrapper(ResamplingAlgorithm *resamplingAlgorithm,double threshold);$/;"	p	class:WithThresholdResamplingAlgorithmWrapper
WithThresholdResamplingAlgorithmWrapper	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^    WithThresholdResamplingAlgorithmWrapper(const WithThresholdResamplingAlgorithmWrapper& withThresholdResamplingAlgorithmWrapper);$/;"	p	class:WithThresholdResamplingAlgorithmWrapper
WithThresholdResamplingAlgorithmWrapper	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^class WithThresholdResamplingAlgorithmWrapper : public ResamplingAlgorithm$/;"	c
WithoutReplacementResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithoutReplacementResamplingAlgorithm.cpp	/^WithoutReplacementResamplingAlgorithm::WithoutReplacementResamplingAlgorithm(ResamplingCriterion resamplingCriterion): ResamplingAlgorithm(resamplingCriterion)$/;"	f	class:WithoutReplacementResamplingAlgorithm
WithoutReplacementResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithoutReplacementResamplingAlgorithm.h	/^    WithoutReplacementResamplingAlgorithm(ResamplingCriterion resamplingCriterion);$/;"	p	class:WithoutReplacementResamplingAlgorithm
WithoutReplacementResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithoutReplacementResamplingAlgorithm.h	/^class WithoutReplacementResamplingAlgorithm : public ResamplingAlgorithm$/;"	c
XML_STRING_ATTRIBUTE	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^#define XML_STRING_ATTRIBUTE(/;"	d	file:
_ARcoefficient	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^	double _ARcoefficient;$/;"	m	class:LinearFilterBasedAlgorithm
_ARcoefficient	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_ARcoefficient	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:MLSDmAlgorithm
_ARcoefficient	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	double _ARcoefficient;$/;"	m	class:PSPAlgorithm
_ARcoefficient	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.h	/^	double _ARcoefficient;$/;"	m	class:PSPBasedSMCAlgorithm
_ARcoefficient	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:TriangularizationBasedSMCAlgorithm
_ARcoefficient	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:USIS
_ARproc	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.h	/^	ARprocess _ARproc;$/;"	m	class:ARchannel
_ARprocess	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARMultiuserCDMAchannel.h	/^    ARprocess _ARprocess;$/;"	m	class:ARMultiuserCDMAchannel
_ARprocessVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_ARprocessVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:MLSDmAlgorithm
_ARprocessVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:TriangularizationBasedSMCAlgorithm
_ARprocessVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:USIS
_E	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tMatrix _E,_varianceInvRtildeChannelMatrix;$/;"	m	class:RMMSEDetector
_Nr	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    const int _Nr; \/\/\/ number of receiving antennas of the system$/;"	m	class:Algorithm
_R_eigen	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    MatrixXd _R_eigen,_stateEquationCovariance_eigen,_predictiveCovariance_eigen,_filteredCovariance_eigen;$/;"	m	class:KalmanFilter
_Rx	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^	tMatrix _Rx;$/;"	m	class:MMSEDetector
__done	/usr/local/.home/manu/c++/comunicaciones/com/com.cpp	/^bool __done = false;$/;"	v
__done	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^extern bool __done;$/;"	x
_activeUsers	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^    std::vector<std::vector<bool> > _activeUsers;$/;"	m	class:WithActiveUsersParticleAddon
_algorithmAlreadyExecuted	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.h	/^    vector<bool> _algorithmAlreadyExecuted;$/;"	m	class:LinearFilterBasedCMEapplyingAlgorithm
_allSymbolsRows	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    tRange _allSymbolsRows;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_allSymbolsRows	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    tRange _allSymbolsRows;$/;"	m	class:SMCAlgorithm
_alphaPower	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    double _alphaPower,_alphaPowerSumFactor;$/;"	m	class:RMMSEDetector
_alphaPowerSumFactor	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    double _alphaPower,_alphaPowerSumFactor;$/;"	m	class:RMMSEDetector
_alphaPowerSumNow	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    double _alphaPowerSumNow,_alphaPowerSumPrevious;$/;"	m	class:RMMSEDetector
_alphaPowerSumPrevious	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    double _alphaPowerSumNow,_alphaPowerSumPrevious;$/;"	m	class:RMMSEDetector
_alphabet	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    const Alphabet _alphabet;$/;"	m	class:Algorithm
_alphabetVariance	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    double _alphabetVariance;$/;"	m	class:LinearDetector
_alphabetVarianceChannelMatrixChannelMatrixTransPlusNoiseCovariance	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tMatrix _alphabetVarianceChannelMatrixChannelMatrixTransPlusNoiseCovariance;$/;"	m	class:RMMSEDetector
_amplitudes	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    std::vector<double> _amplitudes;$/;"	m	class:DelayPowerProfile
_arrivalStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    PSPPath **_exitStage, **_arrivalStage;$/;"	m	class:PSPAlgorithm
_arrivalStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    ViterbiPath *_exitStage, *_arrivalStage;$/;"	m	class:ViterbiAlgorithm
_auxInvRtilde	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tMatrix _auxInvRtilde;$/;"	m	class:RMMSEDetector
_bestArrivingPaths	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	PSPPathCandidate **_bestArrivingPaths;$/;"	m	class:PSPAlgorithm
_bitsSequences	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        std::vector<std::vector<tBit> > _bitsSequences;$/;"	m	class:Alphabet
_buffer	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	tMatrix **_buffer;$/;"	m	class:ARprocess
_c	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^	int _c,_d;$/;"	m	class:LinearFilterBasedAlgorithm
_c	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    int _c,_e;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_candidateOrders	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^    vector<int> _candidateOrders;$/;"	m	class:UnknownChannelOrderAlgorithm
_candidateOrders	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    std::vector<int> _candidateOrders;$/;"	m	class:ChannelOrderEstimator
_capacity	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    const uint _capacity;$/;"	m	class:ParticleFilter
_channel	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.h	/^	const MIMOChannel &_channel;$/;"	m	class:KnownChannelAlgorithm
_channel	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    const MIMOChannel *_channel;$/;"	m	class:SMCAlgorithm
_channel	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.h	/^    const MIMOChannel *_channel;$/;"	m	class:KnownChannelChannelMatrixEstimator
_channel	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    MIMOChannel *_channel;$/;"	m	class:ChannelDependentNoise
_channelCovariances	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    vector<tMatrix> _channelCovariances;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_channelEstimator	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^	ChannelMatrixEstimator *_channelEstimator;$/;"	m	class:KnownChannelOrderAlgorithm
_channelEstimators	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	vector<ChannelMatrixEstimator *> _channelEstimators;$/;"	m	class:UnknownChannelOrderAlgorithm
_channelMatrices	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.h	/^	tMatrix* _channelMatrices;$/;"	m	class:ARchannel
_channelMatrices	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.h	/^	tMatrix *_channelMatrices;$/;"	m	class:BesselChannel
_channelMatrices	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/EstimatedMIMOChannel.h	/^	tMatrix *_channelMatrices;$/;"	m	class:EstimatedMIMOChannel
_channelMatrix	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^	tMatrix _channelMatrix;$/;"	m	class:MMSEDetector
_channelMatrix	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tMatrix _channelMatrix;$/;"	m	class:RMMSEDetector
_channelMatrix	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/TimeInvariantChannel.h	/^	tMatrix _channelMatrix;$/;"	m	class:TimeInvariantChannel
_channelMatrixCols	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    int _channelMatrixRows, _channelMatrixCols;$/;"	m	class:LinearDetector
_channelMatrixEstimators	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^	std::vector<ChannelMatrixEstimator *> _channelMatrixEstimators;$/;"	m	class:PSPPath
_channelMatrixEstimators	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    std::vector<ChannelMatrixEstimator *> _channelMatrixEstimators;$/;"	m	class:ParticleWithChannelEstimation
_channelMatrixMean	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    tMatrix _channelMatrixMean,_channelMatrixVariances;$/;"	m	class:SMCAlgorithm
_channelMatrixMeans	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    vector<tMatrix> _channelMatrixMeans;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_channelMatrixRows	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    int _channelMatrixRows, _channelMatrixCols;$/;"	m	class:LinearDetector
_channelMatrixVariances	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    vector<tMatrix> _channelMatrixVariances;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_channelMatrixVariances	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    tMatrix _channelMatrixMean,_channelMatrixVariances;$/;"	m	class:SMCAlgorithm
_channelMeanVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    vector<tMatrix> _channelMeanVectors;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_channelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^	int _channelOrder,_nInputsXchannelOrder;$/;"	m	class:KnownChannelOrderAlgorithm
_channelOrder	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int _nOutputs,_nChannelMatrixRows,_nInputsXchannelOrder,_nInputs,_channelOrder,_nChannelCoeffs;$/;"	m	class:ChannelMatrixEstimator
_channelOrder2index	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	int *_channelOrder2index;$/;"	m	class:UnknownChannelOrderAlgorithm
_channelOrder2index	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    vector<int> _channelOrder2index;$/;"	m	class:APPbasedChannelOrderEstimator
_channelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^    std::vector<double> _channelOrderAPP;$/;"	m	class:WithChannelOrderAppParticleAddon
_channelOrderAPPs	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	tMatrix _channelOrderAPPs;$/;"	m	class:UnknownChannelOrderAlgorithm
_channelOrderAPPs	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    std::vector<double> _channelOrderAPPs;$/;"	m	class:ChannelOrderEstimator
_channelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    ChannelOrderEstimator *_channelOrderEstimator;$/;"	m	class:USIS
_channelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.h	/^	ChannelOrderEstimator *_channelOrderEstimator;$/;"	m	class:WithChannelOrderEstimationParticleAddon
_channelUniqueMean	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    double _channelUniqueMean, _channelUniqueVariance;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_channelUniqueVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    double _channelUniqueMean, _channelUniqueVariance;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_coefficients	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	vector<double> _coefficients;$/;"	m	class:ARprocess
_columns	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	int _nCoefficients, _rows, _columns, _iNextMatrix;$/;"	m	class:ARprocess
_continuousDelays	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.h	/^    std::vector<double> _continuousDelays;$/;"	m	class:ContinuousPowerProfile
_continuousPowers	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.h	/^    std::vector<double> _continuousPowers;$/;"	m	class:ContinuousPowerProfile
_cost	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^	double _cost;$/;"	m	class:PathCandidate
_cost	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    double _cost;$/;"	m	class:ViterbiPath
_d	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^	int _c,_d;$/;"	m	class:LinearFilterBasedAlgorithm
_d	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    int _d;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_d	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    int _nSurvivors,_d,_startDetectionTime;$/;"	m	class:PSPAlgorithm
_d	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    int _d,_startDetectionTime;$/;"	m	class:SMCAlgorithm
_d	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    int _d;$/;"	m	class:ViterbiAlgorithm
_detectedSequence	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    tMatrix *_detectedSequence;$/;"	m	class:ViterbiPath
_detectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^	tMatrix _detectedSymbolVectors;$/;"	m	class:LinearFilterBasedAlgorithm
_detectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    tMatrix *_detectedSymbolVectors;$/;"	m	class:PSPAlgorithm
_detectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    tMatrix _preamble,*_detectedSymbolVectors;$/;"	m	class:ViterbiAlgorithm
_detectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPathCandidate.h	/^	tMatrix _detectedSymbolVectors;$/;"	m	class:PSPPathCandidate
_detectedSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    tMatrix _detectedSymbols;$/;"	m	class:KnownFlatChannelOptimalAlgorithm
_detectionStart	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^	int _nSymbolsToBeDetected,_detectionStart;$/;"	m	class:MMSEDetector
_e	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    int _c,_e;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_estimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^    vector<tMatrix> _estimatedChannelMatrices;$/;"	m	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
_estimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^	tMatrix *_estimatedChannelMatrices;$/;"	m	class:LinearFilterBasedAlgorithm
_estimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    std::vector<tMatrix> _estimatedChannelMatrices;$/;"	m	class:PSPAlgorithm
_estimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^		tMatrix **_estimatedChannelMatrices;$/;"	m	class:PSPPath
_estimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^        tMatrix **_estimatedChannelMatrices;$/;"	m	class:ParticleWithChannelEstimation
_estimatorIndex	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    int _estimatorIndex; \/\/! it indicates which of the all the estimator that each particle contain is interesting at every moment$/;"	m	class:SMCAlgorithm
_exitStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    PSPPath **_exitStage, **_arrivalStage;$/;"	m	class:PSPAlgorithm
_exitStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    ViterbiPath *_exitStage, *_arrivalStage;$/;"	m	class:ViterbiAlgorithm
_extendedAlphabet	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    Alphabet *_extendedAlphabet;$/;"	m	class:KnownFlatChannelOptimalAlgorithm
_filter	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^	tMatrix _filter;$/;"	m	class:DecorrelatorDetector
_filter	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^	tMatrix _filter;$/;"	m	class:MMSEDetector
_filter	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tMatrix _filter;$/;"	m	class:RMMSEDetector
_filteredCovariance_eigen	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    MatrixXd _R_eigen,_stateEquationCovariance_eigen,_predictiveCovariance_eigen,_filteredCovariance_eigen;$/;"	m	class:KalmanFilter
_filteredMean_eigen	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    VectorXd _predictiveMean_eigen,_filteredMean_eigen;$/;"	m	class:KalmanFilter
_firstSymbolVectorDetectedAt	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	int _firstSymbolVectorDetectedAt;$/;"	m	class:PSPAlgorithm
_forgettingFactor	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    double _forgettingFactor,_invForgettingFactor;$/;"	m	class:RMMSEDetector
_fromState	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^	int _fromState;$/;"	m	class:PathCandidate
_fromSurvivor	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPathCandidate.h	/^	int _fromSurvivor;$/;"	m	class:PSPPathCandidate
_g	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tVector _g;$/;"	m	class:RMMSEDetector
_generatedCoefficientsMean	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    double _generatedCoefficientsMean;$/;"	m	class:DelayPowerProfile
_havesmpl	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		bool _havesmpl;$/;"	m	class:Random
_iFirstObservation	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	int _maxOrder,_iFirstObservation,_nInputsXchannelOrderaxOrder;$/;"	m	class:UnknownChannelOrderAlgorithm
_iLastSymbolVectorToBeDetected	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    const int _iLastSymbolVectorToBeDetected;$/;"	m	class:Algorithm
_iNextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.h	/^    int _iNextMatrix;$/;"	m	class:KnownChannelChannelMatrixEstimator
_iNextMatrix	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	int _nCoefficients, _rows, _columns, _iNextMatrix;$/;"	m	class:ARprocess
_input	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^	int _input;$/;"	m	class:PathCandidate
_inputVector	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	vector<tSymbol> _inputVector;$/;"	m	class:PSPAlgorithm
_inputVector	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^	vector<tSymbol> _inputVector;$/;"	m	class:ViterbiAlgorithm
_invForgettingFactor	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    double _forgettingFactor,_invForgettingFactor;$/;"	m	class:RMMSEDetector
_invForgettingFactor	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.h	/^	double _invForgettingFactor;$/;"	m	class:RLSEstimator
_invRtilde	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tMatrix _invRtilde;$/;"	m	class:RMMSEDetector
_invRtilde	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.h	/^	tMatrix _invRtilde;$/;"	m	class:RLSEstimator
_iterationsForConvergence	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	int _iterationsForConvergence;$/;"	m	class:ARprocess
_kalmanFilter	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    KalmanFilter *_kalmanFilter;$/;"	m	class:KalmanEstimator
_lastEstimatedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    tMatrix _lastEstimatedChannelMatrix;$/;"	m	class:ChannelMatrixEstimator
_length	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        int _nBitsBySymbol,_length;$/;"	m	class:Alphabet
_length	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	int _nOutputs,_length;$/;"	m	class:Noise
_length	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int _nInputs, _nOutputs,_length,_nInputsnOutputs;$/;"	m	class:MIMOChannel
_linearDetector	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^	LinearDetector *_linearDetector;$/;"	m	class:LinearFilterBasedAlgorithm
_linearDetector	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    LinearDetector *_linearDetector;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_linearDetector	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.h	/^    LinearDetector *_linearDetector;$/;"	m	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
_linearDetectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    vector<LinearDetector *> _linearDetectors;$/;"	m	class:USIS
_linearDetectors	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.h	/^    std::vector<LinearDetector *> _linearDetectors;$/;"	m	class:WithLinearDetectionParticleAddon
_matrix	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    tBit *_matrix;$/;"	m	class:Bits
_matrix	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    tMatrix _matrix;$/;"	m	class:ChannelDependentNoise
_matrix	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^	tMatrix _matrix;$/;"	m	class:PowerProfileDependentNoise
_maxChannelOrder	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    int _maxChannelOrder,_nInputsXchannelOrderaxChannelOrder;$/;"	m	class:APPbasedChannelOrderEstimator
_maxOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	int _maxOrder,_iFirstObservation,_nInputsXchannelOrderaxOrder;$/;"	m	class:UnknownChannelOrderAlgorithm
_mean	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        double _mean,_variance;$/;"	m	class:Alphabet
_means	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    tMatrix _means,_variances;$/;"	m	class:DelayPowerProfile
_memory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^	int _memory,_nInputsnOutputsMemory,_nInputsMemory;$/;"	m	class:StillMemoryMIMOChannel
_mu	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.h	/^	double _mu;$/;"	m	class:LMSEstimator
_nBits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    uint _nStreams, _nBitsByStream,_nBits;$/;"	m	class:Bits
_nBitsByStream	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    uint _nStreams, _nBitsByStream,_nBits;$/;"	m	class:Bits
_nBitsBySymbol	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        int _nBitsBySymbol,_length;$/;"	m	class:Alphabet
_nChannelCoeffs	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int _nOutputs,_nChannelMatrixRows,_nInputsXchannelOrder,_nInputs,_channelOrder,_nChannelCoeffs;$/;"	m	class:ChannelMatrixEstimator
_nChannelMatrixRows	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int _nOutputs,_nChannelMatrixRows,_nInputsXchannelOrder,_nInputs,_channelOrder,_nChannelCoeffs;$/;"	m	class:ChannelMatrixEstimator
_nCoefficients	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	int _nCoefficients, _rows, _columns, _iNextMatrix;$/;"	m	class:ARprocess
_nElementsToEstimate	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    int _nElementsToEstimate;$/;"	m	class:KalmanFilter
_nExtStateVectorCoeffs	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    int _nExtStateVectorCoeffs;$/;"	m	class:KalmanEstimator
_nInputs	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    const int _nInputs; \/\/\/ number of inputs of the system at each time instant (assumed to be equal to the number of transmitting antennas\/users)$/;"	m	class:Algorithm
_nInputs	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int _nOutputs,_nChannelMatrixRows,_nInputsXchannelOrder,_nInputs,_channelOrder,_nChannelCoeffs;$/;"	m	class:ChannelMatrixEstimator
_nInputs	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    int _nInputs;$/;"	m	class:ChannelOrderEstimator
_nInputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int _nInputs, _nOutputs,_length,_nInputsnOutputs;$/;"	m	class:MIMOChannel
_nInputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    int _nOutputs,_nInputs;$/;"	m	class:DelayPowerProfile
_nInputsMemory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^	int _memory,_nInputsnOutputsMemory,_nInputsMemory;$/;"	m	class:StillMemoryMIMOChannel
_nInputsXchannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^	int _channelOrder,_nInputsXchannelOrder;$/;"	m	class:KnownChannelOrderAlgorithm
_nInputsXchannelOrder	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int _nOutputs,_nChannelMatrixRows,_nInputsXchannelOrder,_nInputs,_channelOrder,_nChannelCoeffs;$/;"	m	class:ChannelMatrixEstimator
_nInputsXchannelOrderaxChannelOrder	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    int _maxChannelOrder,_nInputsXchannelOrderaxChannelOrder;$/;"	m	class:APPbasedChannelOrderEstimator
_nInputsXchannelOrderaxOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	int _maxOrder,_iFirstObservation,_nInputsXchannelOrderaxOrder;$/;"	m	class:UnknownChannelOrderAlgorithm
_nInputsnOutputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int _nInputs, _nOutputs,_length,_nInputsnOutputs;$/;"	m	class:MIMOChannel
_nInputsnOutputsMemory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^	int _memory,_nInputsnOutputsMemory,_nInputsMemory;$/;"	m	class:StillMemoryMIMOChannel
_nOutputs	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    const int _nOutputs; \/\/\/ number of outputs (observations) of the system at each time instant$/;"	m	class:Algorithm
_nOutputs	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int _nOutputs,_nChannelMatrixRows,_nInputsXchannelOrder,_nInputs,_channelOrder,_nChannelCoeffs;$/;"	m	class:ChannelMatrixEstimator
_nOutputs	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	int _nOutputs,_length;$/;"	m	class:Noise
_nOutputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int _nInputs, _nOutputs,_length,_nInputsnOutputs;$/;"	m	class:MIMOChannel
_nOutputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    int _nOutputs,_nInputs;$/;"	m	class:DelayPowerProfile
_nParticles	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    uint _nParticles;$/;"	m	class:ParticleFilter
_nPossibleInputs	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^    int _nStates,_nPossibleInputs;$/;"	m	class:Trellis
_nStates	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^    int _nStates,_nPossibleInputs;$/;"	m	class:Trellis
_nStreams	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    uint _nStreams, _nBitsByStream,_nBits;$/;"	m	class:Bits
_nSurvivors	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    int _nSurvivors,_d,_startDetectionTime;$/;"	m	class:PSPAlgorithm
_nSymbolsToBeDetected	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^	int _nSymbolsToBeDetected,_detectionStart;$/;"	m	class:MMSEDetector
_nSymbolsToBeDetected	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    int _nSymbolsToBeDetected;$/;"	m	class:RMMSEDetector
_nTimeInstants	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    int _nTimeInstants;$/;"	m	class:ViterbiPath
_name	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    const string _name;$/;"	m	class:Algorithm
_newSymbolVector	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PathCandidate.h	/^	tVector _newSymbolVector;$/;"	m	class:PathCandidate
_noTransmissionAlphabet	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.h	/^    Alphabet *_noTransmissionAlphabet;$/;"	m	class:KnownFlatChannelAndActiveUsersOptimalAlgorithm
_noiseMean	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	double _noiseMean;$/;"	m	class:ARprocess
_noiseVariance	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	double _noiseVariance;$/;"	m	class:ARprocess
_particleFilter	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^	ParticleFilter _particleFilter;$/;"	m	class:ISIS
_particleFilter	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    ParticleFilter *_particleFilter;$/;"	m	class:MLSDmAlgorithm
_particleFilter	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    ParticleFilter *_particleFilter;$/;"	m	class:SMCAlgorithm
_particleFilter	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^	ParticleFilter _particleFilter;$/;"	m	class:USIS
_particleFilterNeedToBeDeleted	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    bool _particleFilterNeedToBeDeleted;$/;"	m	class:SMCAlgorithm
_particles	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    ParticleWithChannelEstimation **_particles;$/;"	m	class:ParticleFilter
_particlesBestChannelOrders	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    vector<int> _particlesBestChannelOrders;$/;"	m	class:MLSDmAlgorithm
_particlesInitializerRandomGenerator	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^Random StatUtil::_particlesInitializerRandomGenerator;$/;"	m	class:StatUtil	file:
_particlesInitializerRandomGenerator	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static Random _particlesInitializerRandomGenerator;$/;"	m	class:StatUtil
_preamble	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^	tMatrix _preamble;$/;"	m	class:KnownChannelOrderAlgorithm
_preamble	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	tMatrix _preamble;$/;"	m	class:UnknownChannelOrderAlgorithm
_preamble	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    tMatrix _preamble,*_detectedSymbolVectors;$/;"	m	class:ViterbiAlgorithm
_preambleLength	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    const int _preambleLength;$/;"	m	class:KnownFlatChannelOptimalAlgorithm
_predictiveCovariance_eigen	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    MatrixXd _R_eigen,_stateEquationCovariance_eigen,_predictiveCovariance_eigen,_filteredCovariance_eigen;$/;"	m	class:KalmanFilter
_predictiveMean_eigen	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    VectorXd _predictiveMean_eigen,_filteredMean_eigen;$/;"	m	class:KalmanFilter
_presentTime	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.h	/^	int _presentTime;$/;"	m	class:KnownSymbolsKalmanEstimator
_prior	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^    std::vector<double> _prior;$/;"	m	class:UsersActivityDistribution
_processDoneExternally	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^	bool _processDoneExternally;$/;"	m	class:USIS
_rAllObservationRows	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    tRange _rAllObservationRows;$/;"	m	class:USIS
_rAllSymbolRows	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	tRange _rAllSymbolRows;$/;"	m	class:PSPAlgorithm
_rAllSymbolRows	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    tRange _rAllSymbolRows;$/;"	m	class:APPbasedChannelOrderEstimator
_rChannelCoefficients	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    tRange _rChannelCoefficients;$/;"	m	class:KalmanEstimator
_randomGenerator	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static Random _randomGenerator;$/;"	m	class:StatUtil
_randomParticlesInitilization	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    bool _randomParticlesInitilization;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_randomParticlesInitilization	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    bool _randomParticlesInitilization;$/;"	m	class:SMCAlgorithm
_ratio	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/UniformRelatedCriterion.h	/^	double _ratio;$/;"	m	class:UniformRelatedCriterion
_realResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^	ResamplingAlgorithm *_realResamplingAlgorithm;$/;"	m	class:WithThresholdResamplingAlgorithmWrapper
_resamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    ResamplingAlgorithm *_resamplingAlgorithm;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_resamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    ResamplingAlgorithm *_resamplingAlgorithm;$/;"	m	class:SMCAlgorithm
_resamplingCriterion	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^    ResamplingCriterion _resamplingCriterion;$/;"	m	class:ResamplingAlgorithm
_resamplingRatio	/usr/local/.home/manu/c++/comunicaciones/smc/ResamplingCriterion.h	/^	double _resamplingRatio;$/;"	m	class:ResamplingCriterion
_rows	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	int _nCoefficients, _rows, _columns, _iNextMatrix;$/;"	m	class:ARprocess
_samplingVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_samplingVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:MLSDmAlgorithm
_samplingVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:TriangularizationBasedSMCAlgorithm
_samplingVariance	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:USIS
_seed	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		uint32_t _seed;$/;"	m	class:Random
_smpl	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		double _smpl;$/;"	m	class:Random
_spreadingCodes	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.h	/^    tMatrix _spreadingCodes;$/;"	m	class:CDMAKalmanEstimator
_spreadingCodes	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.h	/^    tMatrix _spreadingCodes;$/;"	m	class:CDMAKnownChannelChannelMatrixEstimator
_spreadingCodes	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    tMatrix _spreadingCodes;$/;"	m	class:CDMASystem
_spreadingCodes	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MultiuserCDMAchannel.h	/^    tMatrix _spreadingCodes;$/;"	m	class:MultiuserCDMAchannel
_startDetectionTime	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    int _startDetectionTime;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_startDetectionTime	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    int _nSurvivors,_d,_startDetectionTime;$/;"	m	class:PSPAlgorithm
_startDetectionTime	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    int _d,_startDetectionTime;$/;"	m	class:SMCAlgorithm
_stateEquationCovariance_eigen	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    MatrixXd _R_eigen,_stateEquationCovariance_eigen,_predictiveCovariance_eigen,_filteredCovariance_eigen;$/;"	m	class:KalmanFilter
_stateTransitionMatrix	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^    int **_stateTransitionMatrix;$/;"	m	class:Trellis
_stateVector	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	vector<tSymbol> _stateVector;$/;"	m	class:PSPAlgorithm
_stateVector	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^	vector<tSymbol> _stateVector;$/;"	m	class:ViterbiAlgorithm
_stdDev	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^	double _varianceConstant,_stdDev;$/;"	m	class:PowerProfileDependentNoise
_stdDevs	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    double *_stdDevs;$/;"	m	class:ChannelDependentNoise
_substractContributionFromKnownSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^    bool _substractContributionFromKnownSymbols;$/;"	m	class:LinearFilterBasedAlgorithm
_substractContributionFromKnownSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    bool _substractContributionFromKnownSymbols;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_symbolVector	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    tVector _symbolVector;$/;"	m	class:APPbasedChannelOrderEstimator
_symbolVectorLength	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^    uint _symbolVectorLength;$/;"	m	class:WithActiveUsersParticleAddon
_symbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.h	/^    tMatrix _symbolVectors;$/;"	m	class:CMEBasedAlgorithm
_symbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.h	/^    tMatrix _symbolVectors;$/;"	m	class:KnownSymbolsCMEapplyingAlgorithm
_symbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^    tMatrix _symbolVectors;$/;"	m	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
_symbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.h	/^    tMatrix _symbolVectors;$/;"	m	class:TimeVaryingChannelCMEbasedAlgorithm
_symbolVectors	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    tMatrix _symbolVectors;$/;"	m	class:Particle
_symbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    const tMatrix *_symbols;$/;"	m	class:SMCAlgorithm
_symbols	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.h	/^	const tMatrix &_symbols;$/;"	m	class:KnownSymbolsKalmanEstimator
_symbols	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        std::vector<tSymbol> _symbols;$/;"	m	class:Alphabet
_threshold	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/MaximumProbabilityCriterion.h	/^	double _threshold;$/;"	m	class:MaximumProbabilityCriterion
_threshold	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^	double _threshold;$/;"	m	class:WithThresholdResamplingAlgorithmWrapper
_transitionCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.h	/^    TransitionCriterion *_transitionCriterion;$/;"	m	class:USIS2SISAlgorithm
_trellis	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	Trellis _trellis;$/;"	m	class:PSPAlgorithm
_trellis	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^	Trellis _trellis;$/;"	m	class:ViterbiAlgorithm
_unnormalizedChannelOrderAPPs	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    vector<double> _unnormalizedChannelOrderAPPs;$/;"	m	class:APPbasedChannelOrderEstimator
_userActiveGivenItWasNotPdf	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^    std::vector<double> _userActiveGivenItWasNotPdf;$/;"	m	class:UsersActivityDistribution
_userActiveGivenItWasPdf	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^    std::vector<double> _userActiveGivenItWasPdf;$/;"	m	class:UsersActivityDistribution
_userCoeffs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARMultiuserCDMAchannel.h	/^    vector<tMatrix> _userCoeffs;$/;"	m	class:ARMultiuserCDMAchannel
_usersActivity	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.h	/^    std::vector<std::vector<bool> > _usersActivity;    $/;"	m	class:KnownFlatChannelAndActiveUsersOptimalAlgorithm
_usersActivity	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    vector<vector<bool> > _usersActivity;$/;"	m	class:CDMASystem
_usersActivityPdf	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^    const UsersActivityDistribution &_usersActivityPdf; \/\/\/ object describing the pdf of the users activity$/;"	m	class:CDMAunknownActiveUsersSISopt
_usersActivityPdf	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.h	/^    const UsersActivityDistribution &_usersActivityPdf; \/\/\/ object describing the pdf of the users activity    $/;"	m	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
_variance	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        double _mean,_variance;$/;"	m	class:Alphabet
_varianceConstant	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^	double _varianceConstant,_stdDev;$/;"	m	class:PowerProfileDependentNoise
_varianceInvRtildeChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tMatrix _E,_varianceInvRtildeChannelMatrix;$/;"	m	class:RMMSEDetector
_variances	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    tMatrix _means,_variances;$/;"	m	class:DelayPowerProfile
_weight	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    double _weight;$/;"	m	class:Particle
add	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::add(const tMatrix& A,const tMatrix& B,tMatrix& C,double alpha,double beta)$/;"	f	class:Util
add	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::add(const tVector &a,const tVector &b,tVector &c,double alpha,double beta)$/;"	f	class:Util
add	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void add(const tMatrix &A,const tMatrix &B,tMatrix &C,double = 1.0,double = 1.0);$/;"	p	class:Util
add	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void add(const tVector &a,const tVector &b,tVector &c,double = 1.0,double = 1.0);$/;"	p	class:Util
addParticle	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    virtual void addParticle(ParticleWithChannelEstimation *particle)$/;"	f	class:ParticleFilter
adjustParticlesNumberFromSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:LMSmuTestSystem
adjustParticlesNumberFromSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    bool adjustParticlesNumberFromSurvivors;$/;"	m	class:PSPvsPSPBasedSMCSystem
adjustParticlesNumberFromSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:PSPvsSMCSystem
adjustParticlesNumberFromSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:TVT2007System
adjustParticlesNumberFromSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:TesisComplejidadReducidaSystem
adjustParticlesNumberFromSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
adjustParticlesNumberFromSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:WSA08System
adjustSurvivorsFromParticlesNumber	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:LMSmuTestSystem
adjustSurvivorsFromParticlesNumber	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:PSPvsSMCSystem
adjustSurvivorsFromParticlesNumber	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:TVT2007System
adjustSurvivorsFromParticlesNumber	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:TesisComplejidadReducidaSystem
adjustSurvivorsFromParticlesNumber	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
adjustSurvivorsFromParticlesNumber	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    bool adjustParticlesNumberFromSurvivors,adjustSurvivorsFromParticlesNumber;$/;"	m	class:WSA08System
algorithms	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^    std::vector<Algorithm *> algorithms;$/;"	m	class:CMEapplyingAlgorithm
algorithms	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<Algorithm *> algorithms;$/;"	m	class:BaseSystem
algorithmsNames	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<std::string> algorithmsNames;$/;"	m	class:BaseSystem
algoritmoRemuestreo	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    ResamplingAlgorithm *algoritmoRemuestreo;$/;"	m	class:SMCSystem
alphabet	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    Alphabet *alphabet;$/;"	m	class:BaseSystem
append	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::append(const tMatrix &A,const tMatrix &B)$/;"	f	class:Util
append	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix append(const tMatrix &A,const tMatrix &B);$/;"	p	class:Util
applyPermutation	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::applyPermutation(const tMatrix &symbols,const vector<uint> &permutation,const vector<int> &signs)$/;"	f	class:Util
applyPermutation	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix applyPermutation(const tMatrix &symbols,const vector<uint> &permutation,const vector<int> &signs);$/;"	p	class:Util
arrivalStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^enum tStage {exitStage,arrivalStage};$/;"	e	enum:tStage
as_func_failure	/usr/local/.home/manu/c++/comunicaciones/configure	/^as_func_failure () {$/;"	f
as_func_ret_failure	/usr/local/.home/manu/c++/comunicaciones/configure	/^as_func_ret_failure () {$/;"	f
as_func_ret_success	/usr/local/.home/manu/c++/comunicaciones/configure	/^as_func_ret_success () {$/;"	f
as_func_success	/usr/local/.home/manu/c++/comunicaciones/configure	/^as_func_success () {$/;"	f
beforeInitializingParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^void LinearFilterBasedSMCAlgorithm::beforeInitializingParticles(const tMatrix &observations, const tMatrix &trainingSequence)$/;"	f	class:LinearFilterBasedSMCAlgorithm
beforeInitializingParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    virtual void beforeInitializingParticles(const tMatrix &observations, const tMatrix &trainingSequence);$/;"	p	class:LinearFilterBasedSMCAlgorithm
beforeInitializingParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.cpp	/^void MLSDmAlgorithm::beforeInitializingParticles(const tMatrix &observations,vector<double> &noiseVariances,const tMatrix &trainingSequence)$/;"	f	class:MLSDmAlgorithm
beforeInitializingParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    virtual void beforeInitializingParticles(const tMatrix &observations,vector<double> &noiseVariances,const tMatrix &trainingSequence);$/;"	p	class:MLSDmAlgorithm
beforeInitializingParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual void beforeInitializingParticles(const tMatrix &observations,vector<double> &noiseVariances,const tMatrix &trainingSequence) {}$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
beforeInitializingParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    virtual void beforeInitializingParticles(const tMatrix &observations, const tMatrix &trainingSequence) {}$/;"	f	class:SMCAlgorithm
beforeInitializingParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.cpp	/^void USIS::beforeInitializingParticles(const tMatrix &observations,vector<double> &noiseVariances,const tMatrix &trainingSequence)$/;"	f	class:USIS
beforeInitializingParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    virtual void beforeInitializingParticles(const tMatrix &observations,vector<double> &noiseVariances,const tMatrix &trainingSequence);$/;"	p	class:USIS
beforeRunStatUtilSeeds	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<LaGenMatLongInt> beforeRunStatUtilSeeds;$/;"	m	class:BaseSystem
bestParticlesResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm;$/;"	m	class:PSPvsPSPBasedSMCSystem
bestParticlesResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm;$/;"	m	class:TVT2007System
bestParticlesResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm,*multinomialResamplingAlgorithm;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
bestParticlesResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm;$/;"	m	class:WSA08System
buildMeasurementMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.cpp	/^tMatrix CDMAKalmanEstimator::buildMeasurementMatrix(const tVector& symbolsVector)$/;"	f	class:CDMAKalmanEstimator
buildMeasurementMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.h	/^    virtual tMatrix buildMeasurementMatrix(const tVector& symbolsVector);    $/;"	p	class:CDMAKalmanEstimator
buildMeasurementMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^tMatrix KalmanEstimator::buildMeasurementMatrix(const tVector &symbolsVector)$/;"	f	class:KalmanEstimator
buildMeasurementMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    virtual tMatrix buildMeasurementMatrix(const tVector &symbolsVector);$/;"	p	class:KalmanEstimator
c	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    int c,e;$/;"	m	class:SMCSystem
candidateChannelOrders	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^	vector<int> candidateChannelOrders;$/;"	m	class:ChannelOrderEstimationSystem
capacity	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    int capacity() const { return _capacity;}$/;"	f	class:ParticleFilter
carrierFrequency	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^    double carrierFrequency; \/\/ (Hz)$/;"	m	class:Elsevier2007BesselChannelSystem
carrierFrequency	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    double carrierFrequency; \/\/ (Hz)$/;"	m	class:LMSmuTestSystem
carrierFrequency	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    double carrierFrequency; \/\/ (Hz)$/;"	m	class:PSPvsSMCSystem
carrierFrequency	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^    double carrierFrequency; \/\/ (Hz)$/;"	m	class:TesisComplejidadReducidaBesselSystem
carrierFrequency	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^    double carrierFrequency; \/\/ (Hz)$/;"	m	class:TesisOrdenCanalDesconocidoBesselSystem
cdmaKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    CDMAKalmanEstimator *cdmaKalmanEstimator;$/;"	m	class:CDMASystem
cdmaKnownChannelChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    CDMAKnownChannelChannelMatrixEstimator *cdmaKnownChannelChannelMatrixEstimator;$/;"	m	class:CDMASystem
channel	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    MIMOChannel *channel;$/;"	m	class:BaseSystem
channelMatrices2stackedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.cpp	/^tMatrix Algorithm::channelMatrices2stackedChannelMatrix(vector<tMatrix> matrices,int m,int start,int d)$/;"	f	class:Algorithm
channelMatrices2stackedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    tMatrix channelMatrices2stackedChannelMatrix(vector<tMatrix> matrices,int m)$/;"	f	class:Algorithm
channelMatrices2stackedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    tMatrix channelMatrices2stackedChannelMatrix(vector<tMatrix> matrices,int m,int d)$/;"	f	class:Algorithm
channelMatrices2stackedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    tMatrix channelMatrices2stackedChannelMatrix(vector<tMatrix> matrices,int m,int start,int d);$/;"	p	class:Algorithm
channelMatrices2stackedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^	tMatrix channelMatrices2stackedChannelMatrix(vector<tMatrix> matrices) { return channelMatrices2stackedChannelMatrix(matrices,_channelOrder);}$/;"	f	class:KnownChannelOrderAlgorithm
channelMatrixcols	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    int channelMatrixcols() { return _channelMatrixCols;}$/;"	f	class:LinearDetector
channelOrderAPPsAlongTime	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^    vector<vector<vector<tMatrix> > > channelOrderAPPsAlongTime;$/;"	m	class:ChannelOrderEstimationSystem
channelOrderCoefficientsMeans	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^	vector<tMatrix> channelOrderCoefficientsMeans;$/;"	m	class:ChannelOrderEstimationSystem
channelOrderCoefficientsVariances	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^	vector<tMatrix> channelOrderCoefficientsVariances;$/;"	m	class:ChannelOrderEstimationSystem
channelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    APPbasedChannelOrderEstimator *channelOrderEstimator;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
channelVariance	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.h	/^    double channelVariance;$/;"	m	class:Elsevier2007ARChannelSystem
channelVariance	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.h	/^    double channelVariance;$/;"	m	class:TesisComplejidadReducidaARSystem
channelVariance	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoARSystem.h	/^    double channelVariance;$/;"	m	class:TesisOrdenCanalDesconocidoARSystem
children	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^        std::vector<int> children;$/;"	m	struct:KnownFlatChannelOptimalAlgorithm::__anon1
cholesky	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::cholesky(const tMatrix &matrix)$/;"	f	class:Util
cholesky	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix cholesky(const tMatrix &matrix);$/;"	p	class:Util
clear	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.cpp	/^void ParticleFilter::clear()$/;"	f	class:ParticleFilter
clear	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    void clear();$/;"	p	class:ParticleFilter
clone	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.cpp	/^LinearDetector* DecorrelatorDetector::clone()$/;"	f	class:DecorrelatorDetector
clone	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^    virtual LinearDetector* clone();$/;"	p	class:DecorrelatorDetector
clone	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    virtual LinearDetector *clone() = 0;$/;"	p	class:LinearDetector
clone	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.cpp	/^MMSEDetector *MMSEDetector::clone()$/;"	f	class:MMSEDetector
clone	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^    virtual MMSEDetector * clone();$/;"	p	class:MMSEDetector
clone	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.cpp	/^RMMSEDetector *RMMSEDetector::clone()$/;"	f	class:RMMSEDetector
clone	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    RMMSEDetector *clone();$/;"	p	class:RMMSEDetector
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.cpp	/^APPbasedChannelOrderEstimator* APPbasedChannelOrderEstimator::clone()$/;"	f	class:APPbasedChannelOrderEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    virtual APPbasedChannelOrderEstimator *clone();$/;"	p	class:APPbasedChannelOrderEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.cpp	/^CDMAKalmanEstimator* CDMAKalmanEstimator::clone() const$/;"	f	class:CDMAKalmanEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.h	/^    virtual CDMAKalmanEstimator* clone() const;$/;"	p	class:CDMAKalmanEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.cpp	/^CDMAKnownChannelChannelMatrixEstimator *CDMAKnownChannelChannelMatrixEstimator::clone() const$/;"	f	class:CDMAKnownChannelChannelMatrixEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.h	/^    virtual CDMAKnownChannelChannelMatrixEstimator *clone() const;$/;"	p	class:CDMAKnownChannelChannelMatrixEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    virtual ChannelMatrixEstimator *clone() const = 0;$/;"	p	class:ChannelMatrixEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    virtual ChannelOrderEstimator *clone() = 0;$/;"	p	class:ChannelOrderEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^KalmanEstimator *KalmanEstimator::clone() const$/;"	f	class:KalmanEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    virtual KalmanEstimator *clone() const;$/;"	p	class:KalmanEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.cpp	/^KnownChannelChannelMatrixEstimator* KnownChannelChannelMatrixEstimator::clone() const$/;"	f	class:KnownChannelChannelMatrixEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.h	/^    virtual KnownChannelChannelMatrixEstimator* clone() const;$/;"	p	class:KnownChannelChannelMatrixEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.cpp	/^KnownSymbolsKalmanEstimator* KnownSymbolsKalmanEstimator::clone() const$/;"	f	class:KnownSymbolsKalmanEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.h	/^	KnownSymbolsKalmanEstimator* clone() const;$/;"	p	class:KnownSymbolsKalmanEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.cpp	/^LMSEstimator* LMSEstimator::clone() const$/;"	f	class:LMSEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.h	/^    virtual LMSEstimator* clone() const;$/;"	p	class:LMSEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/NLMSEstimator.cpp	/^LMSEstimator* NLMSEstimator::clone() const$/;"	f	class:NLMSEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/NLMSEstimator.h	/^    virtual LMSEstimator* clone() const;$/;"	p	class:NLMSEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.cpp	/^ChannelMatrixEstimator* RLSEstimator::clone() const$/;"	f	class:RLSEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.h	/^    virtual ChannelMatrixEstimator* clone() const;$/;"	p	class:RLSEstimator
clone	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    virtual Particle *clone()$/;"	f	class:Particle
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    ParticleWithChannelEstimation *clone()$/;"	f	class:ParticleWithChannelEstimation
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndActiveUsers.cpp	/^ParticleWithChannelEstimationAndActiveUsers* ParticleWithChannelEstimationAndActiveUsers::clone()$/;"	f	class:ParticleWithChannelEstimationAndActiveUsers
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndActiveUsers.h	/^    ParticleWithChannelEstimationAndActiveUsers* clone();$/;"	p	class:ParticleWithChannelEstimationAndActiveUsers
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndChannelOrderAPP *ParticleWithChannelEstimationAndChannelOrderAPP::clone()$/;"	f	class:ParticleWithChannelEstimationAndChannelOrderAPP
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^	ParticleWithChannelEstimationAndChannelOrderAPP *clone();$/;"	p	class:ParticleWithChannelEstimationAndChannelOrderAPP
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.cpp	/^ParticleWithChannelEstimationAndLinearDetection *ParticleWithChannelEstimationAndLinearDetection::clone()$/;"	f	class:ParticleWithChannelEstimationAndLinearDetection
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetection.h	/^	ParticleWithChannelEstimationAndLinearDetection *clone();$/;"	p	class:ParticleWithChannelEstimationAndLinearDetection
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers *ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers::clone()$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers.h	/^    ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers *clone();$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndActiveUsers
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation* ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation::clone()$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation
clone	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation.h	/^	ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation* clone();$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderEstimation
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/BestParticlesResamplingAlgorithm.cpp	/^BestParticlesResamplingAlgorithm* BestParticlesResamplingAlgorithm::clone() const$/;"	f	class:BestParticlesResamplingAlgorithm
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/BestParticlesResamplingAlgorithm.h	/^    virtual BestParticlesResamplingAlgorithm* clone() const;$/;"	p	class:BestParticlesResamplingAlgorithm
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/MultinomialResamplingAlgorithm.cpp	/^MultinomialResamplingAlgorithm* MultinomialResamplingAlgorithm::clone() const$/;"	f	class:MultinomialResamplingAlgorithm
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/MultinomialResamplingAlgorithm.h	/^	virtual MultinomialResamplingAlgorithm* clone() const;$/;"	p	class:MultinomialResamplingAlgorithm
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^	virtual ResamplingAlgorithm* clone() const = 0;$/;"	p	class:ResamplingAlgorithm
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResidualResamplingAlgorithm.cpp	/^ResidualResamplingAlgorithm* ResidualResamplingAlgorithm::clone() const$/;"	f	class:ResidualResamplingAlgorithm
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResidualResamplingAlgorithm.h	/^	virtual ResidualResamplingAlgorithm* clone() const;$/;"	p	class:ResidualResamplingAlgorithm
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.cpp	/^WithThresholdResamplingAlgorithmWrapper* WithThresholdResamplingAlgorithmWrapper::clone() const$/;"	f	class:WithThresholdResamplingAlgorithmWrapper
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^	virtual WithThresholdResamplingAlgorithmWrapper* clone() const;$/;"	p	class:WithThresholdResamplingAlgorithmWrapper
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithoutReplacementResamplingAlgorithm.cpp	/^WithoutReplacementResamplingAlgorithm* WithoutReplacementResamplingAlgorithm::clone() const$/;"	f	class:WithoutReplacementResamplingAlgorithm
clone	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithoutReplacementResamplingAlgorithm.h	/^    virtual WithoutReplacementResamplingAlgorithm* clone() const;$/;"	p	class:WithoutReplacementResamplingAlgorithm
cols	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int cols() { return _nInputsXchannelOrder;}$/;"	f	class:ChannelMatrixEstimator
cols	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	int cols() {return _columns;}$/;"	f	class:ARprocess
columnwise	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^enum tOrder {rowwise,columnwise};$/;"	e	enum:tOrder
complexRandn	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.cpp	/^complex<double> Random::complexRandn()$/;"	f	class:Random
complexRandn	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		std::complex<double> complexRandn();$/;"	p	class:Random
computeBER	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.cpp	/^double TransmissionUtil::computeBER(const Bits &bits1,int from1,int to1,const Bits &bits2,int from2,int to2)$/;"	f	class:TransmissionUtil
computeBER	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.h	/^    static double computeBER(const Bits &bits1,int from1,int to1,const Bits &bits2,int from2,int to2);$/;"	p	class:TransmissionUtil
computeBERsolvingAmbiguity	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.cpp	/^double TransmissionUtil::computeBERsolvingAmbiguity(const Bits &sourceBits,int from1,int to1,const Bits &detectedBits,int from2,int to2,vector<vector<uint> > permutations)$/;"	f	class:TransmissionUtil
computeBERsolvingAmbiguity	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.h	/^    static double computeBERsolvingAmbiguity(const Bits &sourceBits,int from1,int to1,const Bits &detectedBits,int from2,int to2,vector<vector<uint> > permutations);$/;"	p	class:TransmissionUtil
computeFromActiveOperands	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^inline double StatUtil::computeFromActiveOperands(const tVector &probabilities,bool *activeOperands)$/;"	f	class:StatUtil
computeFromActiveOperands	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static double computeFromActiveOperands(const tVector &probabilities,bool *activeOperands);$/;"	p	class:StatUtil
computeMeanAndVariance	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.cpp	/^void Alphabet::computeMeanAndVariance()$/;"	f	class:Alphabet
computeMeanAndVariance	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        void computeMeanAndVariance();$/;"	p	class:Alphabet
computeSER	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.cpp	/^double TransmissionUtil::computeSER(const tMatrix &sourceSymbols,const tMatrix &detectedSymbols,const vector<vector<bool> > &mask,vector<vector<uint> > permutations,const Alphabet * const alphabet)$/;"	f	class:TransmissionUtil
computeSER	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.h	/^    static double computeSER(const tMatrix &sourceSymbols,const tMatrix &detectedSymbols,const vector<vector<bool> > &mask,vector<vector<uint> > permutations,const Alphabet * const alphabet);    $/;"	p	class:TransmissionUtil
computedFilter	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^	virtual tMatrix computedFilter() { return _filter;}$/;"	f	class:DecorrelatorDetector
computedFilter	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    virtual tMatrix computedFilter() = 0;$/;"	p	class:LinearDetector
computedFilter	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.cpp	/^tMatrix MMSEDetector::computedFilter()$/;"	f	class:MMSEDetector
computedFilter	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^	virtual tMatrix computedFilter();$/;"	p	class:MMSEDetector
computedFilter	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tMatrix computedFilter() { return _filter;}$/;"	f	class:RMMSEDetector
cost	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^        double cost;$/;"	m	struct:KnownFlatChannelOptimalAlgorithm::__anon1
d	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
decorrelatorDetector	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    DecorrelatorDetector *decorrelatorDetector;$/;"	m	class:Elsevier2007System
decorrelatorDetector	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    DecorrelatorDetector *decorrelatorDetector;$/;"	m	class:TesisComplejidadReducidaSystem
delays	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.h	/^    vector <double> delays() const { return _continuousDelays;}$/;"	f	class:ContinuousPowerProfile
demodulate	/usr/local/.home/manu/c++/comunicaciones/transmision/Demodulator.cpp	/^Bits Demodulator::demodulate(const tMatrix &symbols,Alphabet alphabet)$/;"	f	class:Demodulator
demodulate	/usr/local/.home/manu/c++/comunicaciones/transmision/Demodulator.h	/^	static Bits demodulate(const tMatrix &simbolos,Alphabet alfabeto);$/;"	p	class:Demodulator
detect	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.cpp	/^tVector DecorrelatorDetector::detect(tVector observations, tMatrix channelMatrix, const tMatrix& noiseCovariance)$/;"	f	class:DecorrelatorDetector
detect	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^    virtual tVector detect(tVector observations, tMatrix channelMatrix, const tMatrix& noiseCovariance);$/;"	p	class:DecorrelatorDetector
detect	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    virtual tVector detect(tVector observations,tMatrix channelMatrix,const tMatrix &noiseCovariance) = 0;$/;"	p	class:LinearDetector
detect	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.cpp	/^tVector MMSEDetector::detect(tVector observations, tMatrix channelMatrix, const tMatrix& noiseCovariance)$/;"	f	class:MMSEDetector
detect	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^    virtual tVector detect(tVector observations, tMatrix channelMatrix, const tMatrix& noiseCovariance);$/;"	p	class:MMSEDetector
detect	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.cpp	/^tVector RMMSEDetector::detect(tVector observations, tMatrix channelMatrix,const tMatrix &noiseCovariance)$/;"	f	class:RMMSEDetector
detect	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    tVector detect(tVector observations, tMatrix channelMatrix,const tMatrix &noiseCovariance);$/;"	p	class:RMMSEDetector
detectedSymbols	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tMatrix detectedSymbols;$/;"	m	class:BaseSystem
detectedSymbolsForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^    virtual tMatrix detectedSymbolsForChannelOrder(uint iChannelOrder,const tMatrix &observations,const vector<double> &noiseVariances,const tMatrix& trainingSequence) = 0;$/;"	p	class:CMEapplyingAlgorithm
detectedSymbolsForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.cpp	/^tMatrix KnownSymbolsCMEapplyingAlgorithm::detectedSymbolsForChannelOrder(uint iChannelOrder,const tMatrix &observations,const vector<double> &noiseVariances,const tMatrix& trainingSequence)$/;"	f	class:KnownSymbolsCMEapplyingAlgorithm
detectedSymbolsForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.h	/^    virtual tMatrix detectedSymbolsForChannelOrder(uint iChannelOrder,const tMatrix &observations,const vector<double> &noiseVariances,const tMatrix& trainingSequence);$/;"	p	class:KnownSymbolsCMEapplyingAlgorithm
detectedSymbolsForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.cpp	/^tMatrix LinearFilterBasedCMEapplyingAlgorithm::detectedSymbolsForChannelOrder(uint iChannelOrder, const tMatrix& observations, const vector< double >& noiseVariances,const tMatrix& trainingSequence)$/;"	f	class:LinearFilterBasedCMEapplyingAlgorithm
detectedSymbolsForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.h	/^    virtual tMatrix detectedSymbolsForChannelOrder(uint iChannelOrder, const tMatrix& observations, const vector< double >& noiseVariances,const tMatrix& trainingSequence);$/;"	p	class:LinearFilterBasedCMEapplyingAlgorithm
differentialDecoding	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^Bits Bits::differentialDecoding()$/;"	f	class:Bits
differentialDecoding	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    Bits differentialDecoding();$/;"	p	class:Bits
differentialEncoding	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^Bits Bits::differentialEncoding()$/;"	f	class:Bits
differentialEncoding	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    Bits differentialEncoding();$/;"	p	class:Bits
discrete_rnd	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^int StatUtil::discrete_rnd(const std::vector<double> &probabilities,Random &randomGenerator)$/;"	f	class:StatUtil
discrete_rnd	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^int StatUtil::discrete_rnd(const tVector &probabilities,Random &randomGenerator)$/;"	f	class:StatUtil
discrete_rnd	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^vector<int> StatUtil::discrete_rnd(int nSamples,const tVector &probabilities,Random &randomGenerator)$/;"	f	class:StatUtil
discrete_rnd	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static int discrete_rnd(const std::vector<double> &probabilities,Random &randomGenerator = _randomGenerator);    $/;"	p	class:StatUtil
discrete_rnd	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static int discrete_rnd(const tVector &probabilities,Random &randomGenerator = _randomGenerator);$/;"	p	class:StatUtil
discrete_rnd	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static vector<int> discrete_rnd(int nSamples,const tVector &probabilities,Random &randomGenerator = _randomGenerator);$/;"	p	class:StatUtil
e	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    int c,e;$/;"	m	class:SMCSystem
effectiveMemory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    virtual int effectiveMemory() const = 0;$/;"	p	class:MIMOChannel
effectiveMemory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^	int effectiveMemory() const {return _memory;}$/;"	f	class:StillMemoryMIMOChannel
eigen2lapack	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::eigen2lapack(const MatrixXd &A)$/;"	f	class:Util
eigen2lapack	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tVector Util::eigen2lapack(const VectorXd &v)$/;"	f	class:Util
eigen2lapack	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix eigen2lapack(const MatrixXd &A);$/;"	p	class:Util
eigen2lapack	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tVector eigen2lapack(const VectorXd &v);$/;"	p	class:Util
elementWiseDiv	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::elementWiseDiv(const tMatrix &A,const tMatrix &B,tMatrix &C)$/;"	f	class:Util
elementWiseDiv	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void elementWiseDiv(const tMatrix &A,const tMatrix &B,tMatrix &C);$/;"	p	class:Util
elementWiseMult	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::elementWiseMult(const tMatrix &A,const tMatrix &B,tMatrix &C)$/;"	f	class:Util
elementWiseMult	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void elementWiseMult(const tMatrix &A,const tMatrix &B,tMatrix &C);    $/;"	p	class:Util
estimateChannelFromTrainingSequence	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.cpp	/^vector<vector<tMatrix> > UnknownChannelOrderAlgorithm::estimateChannelFromTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence)$/;"	f	class:UnknownChannelOrderAlgorithm
estimateChannelFromTrainingSequence	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^	virtual vector<vector<tMatrix> > estimateChannelFromTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence);$/;"	p	class:UnknownChannelOrderAlgorithm
estimatedChannelMatricesForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^    virtual std::vector<tMatrix> estimatedChannelMatricesForChannelOrder(uint iChannelOrder,const tMatrix &observations,const vector<double> &noiseVariances,const tMatrix& trainingSequence) = 0;$/;"	p	class:CMEapplyingAlgorithm
estimatedChannelMatricesForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.cpp	/^std::vector< tMatrix > KnownSymbolsCMEapplyingAlgorithm::estimatedChannelMatricesForChannelOrder(uint iChannelOrder,const tMatrix &observations,const vector<double> &noiseVariances,const tMatrix& trainingSequence)$/;"	f	class:KnownSymbolsCMEapplyingAlgorithm
estimatedChannelMatricesForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.h	/^    virtual std::vector< tMatrix > estimatedChannelMatricesForChannelOrder(uint iChannelOrder,const tMatrix &observations,const vector<double> &noiseVariances,const tMatrix& trainingSequence);$/;"	p	class:KnownSymbolsCMEapplyingAlgorithm
estimatedChannelMatricesForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.cpp	/^std::vector< tMatrix > LinearFilterBasedCMEapplyingAlgorithm::estimatedChannelMatricesForChannelOrder(uint iChannelOrder, const tMatrix& observations, const vector< double >& noiseVariances,const tMatrix& trainingSequence)$/;"	f	class:LinearFilterBasedCMEapplyingAlgorithm
estimatedChannelMatricesForChannelOrder	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.h	/^    virtual std::vector< tMatrix > estimatedChannelMatricesForChannelOrder(uint iChannelOrder, const tMatrix& observations, const vector< double >& noiseVariances,const tMatrix& trainingSequence);$/;"	p	class:LinearFilterBasedCMEapplyingAlgorithm
exitStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^enum tStage {exitStage,arrivalStage};$/;"	e	enum:tStage
f	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    ofstream f,xmlFile;$/;"	m	class:BaseSystem
fillFirstEstimatedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedMKFAlgorithm.h	/^    virtual void fillFirstEstimatedChannelMatrix(int iParticle, tMatrix& firstEstimatedChannelMatrix) const$/;"	f	class:LinearFilterBasedMKFAlgorithm
fillFirstEstimatedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    virtual void fillFirstEstimatedChannelMatrix(int iParticle,tMatrix &firstEstimatedChannelMatrix) const$/;"	f	class:LinearFilterBasedSMCAlgorithm
filteredCovariance	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    tMatrix filteredCovariance() const { return Util::eigen2lapack(_filteredCovariance_eigen);}$/;"	f	class:KalmanFilter
filteredMean	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    tVector filteredMean() const { return Util::eigen2lapack(_filteredMean_eigen);}$/;"	f	class:KalmanFilter
firstSampledChannelMatrixVariance	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    double firstSampledChannelMatrixVariance;$/;"	m	class:SMCSystem
flipLR	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::flipLR(const tMatrix &A)$/;"	f	class:Util
flipLR	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix flipLR(const tMatrix &A);$/;"	p	class:Util
forgettingFactor	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    double forgettingFactor;$/;"	m	class:TVT2007System
forgettingFactor	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    double forgettingFactor;$/;"	m	class:TesisComplejidadReducidaSystem
forgettingFactor	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    double forgettingFactor;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
forgettingFactor	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    double forgettingFactor;$/;"	m	class:WSA08System
forgettingFactorDetector	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    double forgettingFactorDetector;$/;"	m	class:LMSmuTestSystem
forgettingFactorDetector	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    double forgettingFactorDetector;$/;"	m	class:TVT2007System
forgettingFactorDetector	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    double forgettingFactorDetector;$/;"	m	class:TesisComplejidadReducidaSystem
forgettingFactorDetector	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    double forgettingFactorDetector;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
forgettingFactorDetector	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    double forgettingFactorDetector;$/;"	m	class:WSA08System
frameLength	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
func_extract_an_archive	/usr/local/.home/manu/c++/comunicaciones/debug/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	/usr/local/.home/manu/c++/comunicaciones/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	/usr/local/.home/manu/c++/comunicaciones/optimized/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	/usr/local/.home/manu/c++/comunicaciones/debug/libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	/usr/local/.home/manu/c++/comunicaciones/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	/usr/local/.home/manu/c++/comunicaciones/optimized/libtool	/^func_extract_archives ()$/;"	f
func_infer_tag	/usr/local/.home/manu/c++/comunicaciones/debug/libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	/usr/local/.home/manu/c++/comunicaciones/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	/usr/local/.home/manu/c++/comunicaciones/optimized/libtool	/^func_infer_tag ()$/;"	f
func_mktempdir	/usr/local/.home/manu/c++/comunicaciones/debug/libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	/usr/local/.home/manu/c++/comunicaciones/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	/usr/local/.home/manu/c++/comunicaciones/optimized/libtool	/^func_mktempdir ()$/;"	f
func_win32_libid	/usr/local/.home/manu/c++/comunicaciones/debug/libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	/usr/local/.home/manu/c++/comunicaciones/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	/usr/local/.home/manu/c++/comunicaciones/optimized/libtool	/^func_win32_libid ()$/;"	f
generateChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.cpp	/^tMatrix DelayPowerProfile::generateChannelMatrix(Random &random)$/;"	f	class:DelayPowerProfile
generateChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    virtual tMatrix generateChannelMatrix(Random &random);$/;"	p	class:DelayPowerProfile
generateTrainingSequence	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.cpp	/^tMatrix TransmissionUtil::generateTrainingSequence(const Alphabet &alphabet,int nInputs,int length)$/;"	f	class:TransmissionUtil
generateTrainingSequence	/usr/local/.home/manu/c++/comunicaciones/transmision/TransmissionUtil.h	/^    static tMatrix generateTrainingSequence(const Alphabet &alphabet,int nInputs,int length);$/;"	p	class:TransmissionUtil
getActivityAtTime	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^    std::vector<bool> getActivityAtTime(uint time) const { return _activeUsers[time];}$/;"	f	class:WithActiveUsersParticleAddon
getAllSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    tMatrix getAllSymbolVectors() const { return _symbolVectors;}$/;"	f	class:Particle
getAlphabetAt	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.h	/^    const Alphabet* getAlphabetAt(int time, int leafHeight) const$/;"	f	class:KnownFlatChannelAndActiveUsersOptimalAlgorithm
getAlphabetAt	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    virtual const Alphabet *getAlphabetAt(int time, int leafHeight) const { return _extendedAlphabet;}$/;"	f	class:KnownFlatChannelOptimalAlgorithm
getBestParticle	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    ParticleWithChannelEstimation *getBestParticle() const { return _particles[iBestParticle()]; }$/;"	f	class:ParticleFilter
getChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^	tMatrix getChannelMatrix(int n)$/;"	f	class:PSPPath
getChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    tMatrix getChannelMatrix(int iChannelOrder,int n) const$/;"	f	class:ParticleWithChannelEstimation
getChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^	ChannelMatrixEstimator * getChannelMatrixEstimator() const { return _channelMatrixEstimators[0];}$/;"	f	class:PSPPath
getChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    ChannelMatrixEstimator *getChannelMatrixEstimator(int iChannelOrder) const { return _channelMatrixEstimators[iChannelOrder];}$/;"	f	class:ParticleWithChannelEstimation
getChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    double getChannelOrderAPP(int n) {return _channelOrderAPPs[n];}$/;"	f	class:ChannelOrderEstimator
getChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^    double getChannelOrderAPP(int n) { return _channelOrderAPP[n];}$/;"	f	class:WithChannelOrderAppParticleAddon
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    virtual tMatrix getDetectedSymbolVectors() = 0;$/;"	p	class:Algorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.cpp	/^tMatrix CMEBasedAlgorithm::getDetectedSymbolVectors()$/;"	f	class:CMEBasedAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.h	/^    virtual tMatrix getDetectedSymbolVectors();$/;"	p	class:CMEBasedAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.cpp	/^tMatrix CMEapplyingAlgorithm::getDetectedSymbolVectors()$/;"	f	class:CMEapplyingAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^    virtual tMatrix getDetectedSymbolVectors();$/;"	p	class:CMEapplyingAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.cpp	/^tMatrix KnownFlatChannelOptimalAlgorithm::getDetectedSymbolVectors()$/;"	f	class:KnownFlatChannelOptimalAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    tMatrix getDetectedSymbolVectors();$/;"	p	class:KnownFlatChannelOptimalAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.cpp	/^tMatrix KnownSymbolsKalmanBasedChannelEstimatorAlgorithm::getDetectedSymbolVectors()$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^    tMatrix getDetectedSymbolVectors();$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.cpp	/^tMatrix LinearFilterBasedAlgorithm::getDetectedSymbolVectors()$/;"	f	class:LinearFilterBasedAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^    tMatrix getDetectedSymbolVectors();$/;"	p	class:LinearFilterBasedAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^tMatrix MultipleChannelEstimatorsPerParticleSMCAlgorithm::getDetectedSymbolVectors()$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    tMatrix getDetectedSymbolVectors();$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^tMatrix PSPAlgorithm::getDetectedSymbolVectors()$/;"	f	class:PSPAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	tMatrix getDetectedSymbolVectors();$/;"	p	class:PSPAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^tMatrix SMCAlgorithm::getDetectedSymbolVectors()$/;"	f	class:SMCAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    tMatrix getDetectedSymbolVectors();$/;"	p	class:SMCAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.cpp	/^tMatrix TimeVaryingChannelCMEbasedAlgorithm::getDetectedSymbolVectors()$/;"	f	class:TimeVaryingChannelCMEbasedAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.h	/^    virtual tMatrix getDetectedSymbolVectors();$/;"	p	class:TimeVaryingChannelCMEbasedAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.cpp	/^tMatrix ViterbiAlgorithm::getDetectedSymbolVectors()$/;"	f	class:ViterbiAlgorithm
getDetectedSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    tMatrix getDetectedSymbolVectors();$/;"	p	class:ViterbiAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    virtual vector<tMatrix> getEstimatedChannelMatrices() = 0;$/;"	p	class:Algorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.cpp	/^vector<tMatrix> CMEBasedAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:CMEBasedAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.h	/^    virtual vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:CMEBasedAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.cpp	/^vector<tMatrix> CMEapplyingAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:CMEapplyingAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^    virtual vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:CMEapplyingAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.cpp	/^vector<tMatrix> ISIS::getEstimatedChannelMatrices()$/;"	f	class:ISIS
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^	vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:ISIS
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.cpp	/^vector<tMatrix> KnownChannelAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:KnownChannelAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.h	/^    vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:KnownChannelAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.cpp	/^vector<tMatrix> KnownSymbolsKalmanBasedChannelEstimatorAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^    vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.cpp	/^vector<tMatrix> LinearFilterBasedAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:LinearFilterBasedAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^    vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:LinearFilterBasedAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^vector<tMatrix> MultipleChannelEstimatorsPerParticleSMCAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^vector<tMatrix> PSPAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:PSPAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	std::vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:PSPAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^vector<tMatrix> SMCAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:SMCAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:SMCAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.cpp	/^vector<tMatrix> TimeVaryingChannelCMEbasedAlgorithm::getEstimatedChannelMatrices()$/;"	f	class:TimeVaryingChannelCMEbasedAlgorithm
getEstimatedChannelMatrices	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.h	/^    virtual vector<tMatrix> getEstimatedChannelMatrices();$/;"	p	class:TimeVaryingChannelCMEbasedAlgorithm
getLinearDetector	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.h	/^    LinearDetector *getLinearDetector(int n) { return _linearDetectors[n];}$/;"	f	class:WithLinearDetectionParticleAddon
getName	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    string getName() const {return _name;}$/;"	f	class:Algorithm
getParticle	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    ParticleWithChannelEstimation *getParticle(int n) const { return _particles[n];}$/;"	f	class:ParticleFilter
getRandomGenerator	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static Random& getRandomGenerator() { return _randomGenerator;}$/;"	f	class:StatUtil
getSeed	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		uint32_t getSeed() { return _seed; }$/;"	f	class:Random
getSymbolVector	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    tVector getSymbolVector(int n) const { \/*cout << "getSymbolVector" << endl; cout << "nº de columnas de la matriz " << _detectedSequence->cols() << endl;*\/ return _detectedSequence->col(n);}$/;"	f	class:ViterbiPath
getSymbolVector	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    tVector getSymbolVector(int n) const { return _symbolVectors.col(n);}$/;"	f	class:Particle
getSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    tMatrix getSymbolVectors(const tRange &range) const { return _symbolVectors(tRange(0,_symbolVectors.rows()-1),range);}$/;"	f	class:Particle
getSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    tMatrix getSymbolVectors(int a,int b) const { return _symbolVectors(tRange(0,_symbolVectors.rows()-1),tRange(a,b));}$/;"	f	class:Particle
getTransmissionMatrix	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    virtual tMatrix getTransmissionMatrix(const int n) const { return operator[](n);}$/;"	f	class:MIMOChannel
getTransmissionMatrix	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MultiuserCDMAchannel.cpp	/^tMatrix MultiuserCDMAchannel::getTransmissionMatrix(const int n) const$/;"	f	class:MultiuserCDMAchannel
getTransmissionMatrix	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MultiuserCDMAchannel.h	/^    virtual tMatrix getTransmissionMatrix(const int n) const;    $/;"	p	class:MultiuserCDMAchannel
getUserActivity	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^    bool getUserActivity(uint iUser,uint time) const { return _activeUsers[time][iUser];}$/;"	f	class:WithActiveUsersParticleAddon
getWeight	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    double getWeight() const { return _weight;}$/;"	f	class:Particle
getWeightsVector	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    tVector getWeightsVector() const$/;"	f	class:ParticleFilter
hardDecision	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.cpp	/^tSymbol Alphabet::hardDecision(double softEstimation) const$/;"	f	class:Alphabet
hardDecision	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        tSymbol hardDecision(double softEstimation) const;$/;"	p	class:Alphabet
height	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^        uint height,id;$/;"	m	struct:KnownFlatChannelOptimalAlgorithm::__anon1
howManyTimes	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::howManyTimes(const vector<int> &v,vector<int> &firstOccurrence,vector<int> &times);$/;"	p	class:Util	file:
howManyTimes	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::howManyTimes(const vector<T> &v,vector<int> &firstOccurrence,vector<int> &times)$/;"	f	class:Util
howManyTimes	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void howManyTimes(const vector<T> &v,vector<int> &firstOccurrence,vector<int> &times);$/;"	p	class:Util
iAlgorithmPerformingChannelOrderAPPestimation	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^	int iAlgorithmPerformingChannelOrderAPPestimation;$/;"	m	class:ChannelOrderEstimationSystem
iAlgorithmsPerformingChannelOrderAPPestimation	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^    vector<int> iAlgorithmsPerformingChannelOrderAPPestimation;$/;"	m	class:ChannelOrderEstimationSystem
iBestLeaf	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.cpp	/^int KnownFlatChannelOptimalAlgorithm::iBestLeaf(const vector<tTreeNode> &nodes)$/;"	f	class:KnownFlatChannelOptimalAlgorithm
iBestLeaf	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    int iBestLeaf(const std::vector<tTreeNode> &nodes);$/;"	p	class:KnownFlatChannelOptimalAlgorithm
iBestParticle	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.cpp	/^int ParticleFilter::iBestParticle() const$/;"	f	class:ParticleFilter
iBestParticle	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    int iBestParticle() const;$/;"	p	class:ParticleFilter
iLastSymbolVectorToBeDetected	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int iLastSymbolVectorToBeDetected;$/;"	m	class:BaseSystem
iMaxChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.cpp	/^int WithChannelOrderAppParticleAddon::iMaxChannelOrderAPP()$/;"	f	class:WithChannelOrderAppParticleAddon
iMaxChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^    int iMaxChannelOrderAPP();$/;"	p	class:WithChannelOrderAppParticleAddon
iSNR	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    uint iSNR;$/;"	m	class:BaseSystem
iTrueChannelOrder	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^	int iTrueChannelOrder;$/;"	m	class:ChannelOrderEstimationSystem
id	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^        uint height,id;$/;"	m	struct:KnownFlatChannelOptimalAlgorithm::__anon1
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.cpp	/^void CDMAunknownActiveUsersSISopt::initializeParticles()$/;"	f	class:CDMAunknownActiveUsersSISopt
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^    virtual void initializeParticles();$/;"	p	class:CDMAunknownActiveUsersSISopt
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.cpp	/^void ISIS::initializeParticles()$/;"	f	class:ISIS
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^    virtual void initializeParticles();$/;"	p	class:ISIS
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^void LinearFilterBasedSMCAlgorithm::initializeParticles()$/;"	f	class:LinearFilterBasedSMCAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    void initializeParticles();$/;"	p	class:LinearFilterBasedSMCAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.cpp	/^void MLSDmAlgorithm::initializeParticles()$/;"	f	class:MLSDmAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    virtual void initializeParticles();$/;"	p	class:MLSDmAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual void initializeParticles() = 0;$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.cpp	/^void PSPBasedSMCAlgorithm::initializeParticles()$/;"	f	class:PSPBasedSMCAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.h	/^    virtual void initializeParticles();$/;"	p	class:PSPBasedSMCAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^void SMCAlgorithm::initializeParticles()$/;"	f	class:SMCAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    virtual void initializeParticles();$/;"	p	class:SMCAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.cpp	/^void USIS::initializeParticles()$/;"	f	class:USIS
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    virtual void initializeParticles();$/;"	p	class:USIS
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.cpp	/^void UnknownActiveUsersLinearFilterBasedSMCAlgorithm::initializeParticles()$/;"	f	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
initializeParticles	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.h	/^    virtual void initializeParticles();$/;"	p	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
inject	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^void Bits::inject(int index,const std::vector<tBit> &stream)$/;"	f	class:Bits
inject	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    void inject(int index,const std::vector<tBit> &stream);$/;"	p	class:Bits
int2symbolsArray	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.cpp	/^void Alphabet::int2symbolsArray(int numero, vector<tSymbol> &res) const$/;"	f	class:Alphabet
int2symbolsArray	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        void int2symbolsArray(int numero, std::vector<tSymbol> &res) const;$/;"	p	class:Alphabet
invertStream	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^void Bits::invertStream(int index)$/;"	f	class:Bits
invertStream	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    void invertStream(int index);$/;"	p	class:Bits
isSymbolAccountedForDetection	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    vector<vector<bool> > isSymbolAccountedForDetection;$/;"	m	class:BaseSystem
isUserActive	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^    bool isUserActive(const tSymbol symbol) const { return symbol!=0.0;}$/;"	f	class:CDMAunknownActiveUsersSISopt
kalmanChannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^	vector<ChannelMatrixEstimator *> kalmanChannelEstimators;$/;"	m	class:TVT2007System
kalmanChannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    vector<ChannelMatrixEstimator *> kalmanChannelEstimators;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
kalmanChannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^	vector<ChannelMatrixEstimator *> kalmanChannelEstimators;$/;"	m	class:WSA08System
kalmanEstimatedChannel	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^	EstimatedMIMOChannel *kalmanEstimatedChannel;$/;"	m	class:Elsevier2007System
kalmanEstimatedChannel	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    EstimatedMIMOChannel *kalmanEstimatedChannel;$/;"	m	class:TesisComplejidadReducidaSystem
kalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    KalmanEstimator *kalmanEstimator;$/;"	m	class:Elsevier2007System
kalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    KalmanEstimator *kalmanEstimator;$/;"	m	class:PSPvsPSPBasedSMCSystem
kalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    KalmanEstimator *kalmanEstimator;$/;"	m	class:PSPvsSMCSystem
kalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    KalmanEstimator *kalmanEstimator;$/;"	m	class:TVT2007System
kalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    KalmanEstimator *kalmanEstimator;$/;"	m	class:TesisComplejidadReducidaSystem
kalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    KalmanEstimator *kalmanEstimator;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
kalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    KalmanEstimator *kalmanEstimator;$/;"	m	class:WSA08System
keepParticles	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.cpp	/^void ParticleFilter::keepParticles(std::vector<int> resamplingIndexes,std::vector<int> indexes)$/;"	f	class:ParticleFilter
keepParticles	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.cpp	/^void ParticleFilter::keepParticles(vector<int> indexes)$/;"	f	class:ParticleFilter
keepParticles	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    virtual void keepParticles(std::vector<int> resamplingIndexes);$/;"	p	class:ParticleFilter
keepParticles	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    virtual void keepParticles(std::vector<int> resamplingIndexes,std::vector<int> indexes);$/;"	p	class:ParticleFilter
knownSymbolsKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    KnownSymbolsKalmanEstimator *knownSymbolsKalmanEstimator;$/;"	m	class:Elsevier2007System
knownSymbolsKalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    KnownSymbolsKalmanEstimator *knownSymbolsKalmanEstimator;$/;"	m	class:TesisComplejidadReducidaSystem
lapack2eigen	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^MatrixXd Util::lapack2eigen(const tMatrix &A)$/;"	f	class:Util
lapack2eigen	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^VectorXd Util::lapack2eigen(const tVector &v)$/;"	f	class:Util
lapack2eigen	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static MatrixXd lapack2eigen(const tMatrix &A);$/;"	p	class:Util
lapack2eigen	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static VectorXd lapack2eigen(const tVector &v);$/;"	p	class:Util
lastEstimatedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    virtual tMatrix lastEstimatedChannelMatrix() { return _lastEstimatedChannelMatrix;}$/;"	f	class:ChannelMatrixEstimator
length	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        int length() const { return _length;}$/;"	f	class:Alphabet
length	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	int length() const { return _length;}$/;"	f	class:Noise
length	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int length() const {return _length;};$/;"	f	class:MIMOChannel
likelihood	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.cpp	/^double CDMAKnownChannelChannelMatrixEstimator::likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance)$/;"	f	class:CDMAKnownChannelChannelMatrixEstimator
likelihood	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKnownChannelChannelMatrixEstimator.h	/^    virtual double likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance);$/;"	p	class:CDMAKnownChannelChannelMatrixEstimator
likelihood	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    virtual double likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance)$/;"	f	class:ChannelMatrixEstimator
likelihood	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^double KalmanEstimator::likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance)$/;"	f	class:KalmanEstimator
likelihood	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    double likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance);$/;"	p	class:KalmanEstimator
likelihood	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.cpp	/^double RLSEstimator::likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance)$/;"	f	class:RLSEstimator
likelihood	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.h	/^	virtual double likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance);$/;"	p	class:RLSEstimator
lmsEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    LMSEstimator *lmsEstimator;$/;"	m	class:TesisComplejidadReducidaSystem
m	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
main	/usr/local/.home/manu/c++/comunicaciones/com/com.cpp	/^int main(int argc,char* argv[])$/;"	f
main	/usr/local/.home/manu/c++/comunicaciones/config.guess	/^		main()$/;"	f
main	/usr/local/.home/manu/c++/comunicaciones/config.guess	/^	main ()$/;"	f
main	/usr/local/.home/manu/c++/comunicaciones/config.guess	/^main ()$/;"	f
mainSeeds	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<uint32_t> mainSeeds,statUtilSeeds;$/;"	m	class:BaseSystem
matricesVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::matricesVectorToOctaveFileStream(vector<LaGenMatLongInt> matrices,string name,ofstream &f);$/;"	p	class:Util	file:
matricesVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::matricesVectorToOctaveFileStream(vector<tMatrix> matrices,string name,ofstream &f);$/;"	p	class:Util	file:
matricesVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::matricesVectorToOctaveFileStream(vector<T> matrices,string name,ofstream &f)$/;"	f	class:Util
matricesVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void matricesVectorToOctaveFileStream(vector<T> matrices,string name,ofstream &f);$/;"	p	class:Util
matricesVectorsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::matricesVectorsVectorToOctaveFileStream(vector<vector<tMatrix> > matrices,string name,ofstream &f)$/;"	f	class:Util
matricesVectorsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void matricesVectorsVectorToOctaveFileStream(vector<vector<tMatrix> > matrices,string name,ofstream &f);$/;"	p	class:Util
matricesVectorsVectorsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::matricesVectorsVectorsVectorToOctaveFileStream(vector<vector<vector<tMatrix> > > matrices,string name,ofstream &f)$/;"	f	class:Util
matricesVectorsVectorsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void matricesVectorsVectorsVectorToOctaveFileStream(vector<vector<vector<tMatrix> > > matrices,string name,ofstream &f);$/;"	p	class:Util
matrixToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::matrixToOctaveFileStream(tMatrix A,string name,ofstream &f)$/;"	f	class:Util
matrixToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void matrixToOctaveFileStream(tMatrix A,string name,ofstream &f);$/;"	p	class:Util
max	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template int Util::max(const std::vector<double> &vector);$/;"	p	class:Util	file:
max	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template int Util::max(const std::vector<int> &vector);$/;"	p	class:Util	file:
max	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> int Util::max(const std::vector<T> &vector)$/;"	f	class:Util
max	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::max(const tVector &v,int &index)$/;"	f	class:Util
max	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void max(const tVector &v,int &index);$/;"	p	class:Util
max	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static int max(const std::vector<T> &vector);$/;"	p	class:Util
mean	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^double StatUtil::mean(const tMatrix &A)$/;"	f	class:StatUtil
mean	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static double mean(const tMatrix &A);$/;"	p	class:StatUtil
means	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    tMatrix means() const { return _means;}$/;"	f	class:DelayPowerProfile
memory	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.cpp	/^int ChannelMatrixEstimator::memory()$/;"	f	class:ChannelMatrixEstimator
memory	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int memory();$/;"	p	class:ChannelMatrixEstimator
memory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    virtual int memory(int n) const = 0;$/;"	p	class:MIMOChannel
memory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^	int memory() const {return _memory;};$/;"	f	class:StillMemoryMIMOChannel
memory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^	int memory(int n) const {return _memory;}$/;"	f	class:StillMemoryMIMOChannel
memory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    int memory() const { return _amplitudes.size();}$/;"	f	class:DelayPowerProfile
min	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::min(const std::vector<double> &vector,int &iMin);$/;"	p	class:Util	file:
min	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::min(const std::vector<T> &vector,int &iMin)$/;"	f	class:Util
min	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::min(const tVector &v,int &index)$/;"	f	class:Util
min	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void min(const tVector &v,int &index);$/;"	p	class:Util
min	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void min(const std::vector<T> &vector,int &iMin);$/;"	p	class:Util
mmseDetector	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    MMSEDetector *mmseDetector;$/;"	m	class:CDMASystem
mmseDetectorLarge	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    MMSEDetector *mmseDetectorLarge,*mmseDetectorSmall,*mmseDetectorXL;$/;"	m	class:Elsevier2007System
mmseDetectorSmall	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    MMSEDetector *mmseDetectorLarge,*mmseDetectorSmall,*mmseDetectorXL;$/;"	m	class:Elsevier2007System
mmseDetectorSmall	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    MMSEDetector *mmseDetectorSmall;$/;"	m	class:TesisComplejidadReducidaSystem
mmseDetectorXL	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    MMSEDetector *mmseDetectorLarge,*mmseDetectorSmall,*mmseDetectorXL;$/;"	m	class:Elsevier2007System
modulate	/usr/local/.home/manu/c++/comunicaciones/transmision/Modulator.cpp	/^tMatrix Modulator::modulate(const Bits &bits, Alphabet alphabet)$/;"	f	class:Modulator
modulate	/usr/local/.home/manu/c++/comunicaciones/transmision/Modulator.h	/^    static tMatrix modulate(const Bits &bits,Alphabet alfabeto);$/;"	p	class:Modulator
mse	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    double pe,mse;$/;"	m	class:BaseSystem
muLMS	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    double muLMS,muNLMS;$/;"	m	class:TesisComplejidadReducidaSystem
muNLMS	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    double muLMS,muNLMS;$/;"	m	class:TesisComplejidadReducidaSystem
mult	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::mult(const tVector &a,const tVector &b,tMatrix &C,double alpha)$/;"	f	class:Util
mult	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void mult(const tVector &a,const tVector &b,tMatrix &C,double = 1.0);$/;"	p	class:Util
multinomialResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm,*multinomialResamplingAlgorithm;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
musLMS	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    vector<double> musLMS;$/;"	m	class:LMSmuTestSystem
nBitsGenerated	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
nBitsPerStream	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    int nBitsPerStream() const {return _nBitsByStream;}$/;"	f	class:Bits
nBitsPerSymbol	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        int nBitsPerSymbol() const { return _nBitsBySymbol;}$/;"	f	class:Alphabet
nChannelMatrixEstimators	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    int nChannelMatrixEstimators() const {return _channelMatrixEstimators.size();}$/;"	f	class:ParticleWithChannelEstimation
nDelays	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.h	/^    int nDelays() const {return _continuousDelays.size();}$/;"	f	class:ContinuousPowerProfile
nFrames	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
nInputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int nInputs() const { return _nInputs;};$/;"	f	class:MIMOChannel
nInputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    int nInputs() { return _nInputs;}$/;"	f	class:DelayPowerProfile
nInputsMemory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int nInputsMemory(int n) const {return _nInputs*memory(n);};$/;"	f	class:MIMOChannel
nInputsmemory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^	int nInputsmemory() const {return _nInputsMemory;};$/;"	f	class:StillMemoryMIMOChannel
nInputsnOutputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int nInputsnOutputs() const {return _nInputsnOutputs;};$/;"	f	class:MIMOChannel
nInputsnOutputsMemory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int nInputsnOutputsMemory(int n) const {return _nInputs*_nOutputs*memory(n);};$/;"	f	class:MIMOChannel
nInputsnOutputsmemory	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/StillMemoryMIMOChannel.h	/^	int nInputsnOutputsmemory() const {return _nInputsnOutputsMemory;};$/;"	f	class:StillMemoryMIMOChannel
nMax	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^vector<int> Util::nMax(int n,const tVector &v)$/;"	f	class:Util
nMax	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static std::vector<int> nMax(int n,const tVector &v);$/;"	p	class:Util
nOutputs	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	int nOutputs() const { return _nOutputs;}$/;"	f	class:Noise
nOutputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    int nOutputs() const { return _nOutputs;};$/;"	f	class:MIMOChannel
nOutputs	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    int nOutputs() { return _nOutputs;}$/;"	f	class:DelayPowerProfile
nParticles	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    int nParticles() const { return _nParticles;}$/;"	f	class:ParticleFilter
nParticles	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    int nParticles;$/;"	m	class:SMCSystem
nSmoothingSymbolsVectors	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nSmoothingSymbolsVectors;$/;"	m	class:BaseSystem
nStreams	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    int nStreams() const { return _nStreams;}$/;"	f	class:Bits
nSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    int nSurvivors;$/;"	m	class:LMSmuTestSystem
nSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    int nSurvivors;$/;"	m	class:PSPvsPSPBasedSMCSystem
nSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    int nSurvivors;$/;"	m	class:PSPvsSMCSystem
nSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    int nSurvivors;$/;"	m	class:TVT2007System
nSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    int nSurvivors;$/;"	m	class:TesisComplejidadReducidaSystem
nSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    int nSurvivors;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
nSurvivors	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    int nSurvivors;$/;"	m	class:WSA08System
newActiveUserProb	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    double userPersistenceProb,newActiveUserProb,userPriorProb;$/;"	m	class:CDMASystem
nextMatricesFromObservationsSequence	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.cpp	/^vector<tMatrix> ChannelMatrixEstimator::nextMatricesFromObservationsSequence(const tMatrix &observations,vector<double> &noiseVariances,const tMatrix &symbolVectors,int iFrom,int iTo)$/;"	f	class:ChannelMatrixEstimator
nextMatricesFromObservationsSequence	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    vector<tMatrix> nextMatricesFromObservationsSequence(const tMatrix &observations,vector<double> &noiseVariances,const tMatrix &symbolVectors,int iFrom,int iTo);$/;"	p	class:ChannelMatrixEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    virtual tMatrix nextMatrix(const tVector &observations,const tMatrix &symbolsMatrix,double noiseVariance) = 0;$/;"	p	class:ChannelMatrixEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^tMatrix KalmanEstimator::nextMatrix(const tVector &observations,const tMatrix &symbolsMatrix,double noiseVariance)$/;"	f	class:KalmanEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    virtual tMatrix nextMatrix(const tVector &observations,const tMatrix &symbolsMatrix,double noiseVariance);$/;"	p	class:KalmanEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.cpp	/^tMatrix KnownChannelChannelMatrixEstimator::nextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance)$/;"	f	class:KnownChannelChannelMatrixEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.h	/^    virtual tMatrix nextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance);$/;"	p	class:KnownChannelChannelMatrixEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.cpp	/^tMatrix KnownSymbolsKalmanEstimator::nextMatrix(const tVector &observations, const tMatrix &symbolsMatrix, double noiseVariance)$/;"	f	class:KnownSymbolsKalmanEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownSymbolsKalmanEstimator.h	/^    virtual tMatrix nextMatrix(const tVector &observations, const tMatrix &symbolsMatrix, double noiseVariance);$/;"	p	class:KnownSymbolsKalmanEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.cpp	/^tMatrix LMSEstimator::nextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance)$/;"	f	class:LMSEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/LMSEstimator.h	/^    virtual tMatrix nextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance);$/;"	p	class:LMSEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/NLMSEstimator.cpp	/^tMatrix NLMSEstimator::nextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance)$/;"	f	class:NLMSEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/NLMSEstimator.h	/^    virtual tMatrix nextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance);$/;"	p	class:NLMSEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.cpp	/^tMatrix RLSEstimator::nextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance)$/;"	f	class:RLSEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/RLSEstimator.h	/^    virtual tMatrix nextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance);$/;"	p	class:RLSEstimator
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.cpp	/^tMatrix ARprocess::nextMatrix()$/;"	f	class:ARprocess
nextMatrix	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	tMatrix nextMatrix();$/;"	p	class:ARprocess
nextVector	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::nextVector(vector<double> &vector,const vector<vector<double> > &alphabets);$/;"	p	class:Util	file:
nextVector	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::nextVector(vector<T> &vector,const vector<vector<T> > &alphabets)$/;"	f	class:Util
nextVector	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void nextVector(vector<T> &vector,const vector<vector<T> > &alphabets);$/;"	p	class:Util
nlmsEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    NLMSEstimator *nlmsEstimator;$/;"	m	class:TesisComplejidadReducidaSystem
noForgetRLSchannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^	vector<ChannelMatrixEstimator *> noForgetRLSchannelEstimators;$/;"	m	class:TVT2007System
noForgetRLSchannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    vector<ChannelMatrixEstimator *> noForgetRLSchannelEstimators;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
noForgetRLSchannelEstimators	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^	vector<ChannelMatrixEstimator *> noForgetRLSchannelEstimators;$/;"	m	class:WSA08System
noise	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    Noise *noise;$/;"	m	class:BaseSystem
normalPdf	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^double StatUtil::normalPdf(const tVector &x,const tVector &mean,const tMatrix &covariance)$/;"	f	class:StatUtil
normalPdf	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^double StatUtil::normalPdf(const tVector &x,const tVector &mean,double variance)$/;"	f	class:StatUtil
normalPdf	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^double StatUtil::normalPdf(double x,double mean,double variance)$/;"	f	class:StatUtil
normalPdf	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static double normalPdf(const tVector &x,const tVector &mean,const tMatrix &covariance);$/;"	p	class:StatUtil
normalPdf	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static double normalPdf(const tVector &x,const tVector &mean,double variance);$/;"	p	class:StatUtil
normalPdf	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static double normalPdf(double x,double mean,double variance);$/;"	p	class:StatUtil
normalize	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tVector Util::normalize(const tVector &v)$/;"	f	class:Util
normalize	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::normalize(std::vector<double> &v)$/;"	f	class:Util
normalize	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tVector normalize(const tVector &v);$/;"	p	class:Util
normalize	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void normalize(std::vector<double> &v);    $/;"	p	class:Util
normalizeWeights	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    void normalizeWeights()$/;"	f	class:ParticleFilter
normalizeWeights	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    void normalizeWeights(std::vector<int> indexes)$/;"	f	class:ParticleFilter
normalizedSquareError	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^double Util::normalizedSquareError(const tMatrix &A,const tMatrix &B)$/;"	f	class:Util
normalizedSquareError	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static double normalizedSquareError(const tMatrix &A,const tMatrix &B);    $/;"	p	class:Util
nthSymbolGain	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    virtual double nthSymbolGain(int n) const { return 1.0;}$/;"	f	class:LinearDetector
nthSymbolVariance	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.cpp	/^double DecorrelatorDetector::nthSymbolVariance(int n)$/;"	f	class:DecorrelatorDetector
nthSymbolVariance	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^    virtual double nthSymbolVariance(int n);$/;"	p	class:DecorrelatorDetector
nthSymbolVariance	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    virtual double nthSymbolVariance(int n) = 0;$/;"	p	class:LinearDetector
nthSymbolVariance	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.cpp	/^double MMSEDetector::nthSymbolVariance(int n)$/;"	f	class:MMSEDetector
nthSymbolVariance	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^	virtual double nthSymbolVariance(int n);$/;"	p	class:MMSEDetector
nthSymbolVariance	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.cpp	/^double RMMSEDetector::nthSymbolVariance(int n)$/;"	f	class:RMMSEDetector
nthSymbolVariance	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    double nthSymbolVariance(int n);$/;"	p	class:RMMSEDetector
observations	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tMatrix observations;$/;"	m	class:BaseSystem
operator ()	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^    int operator ()(int state, int input) const { return _stateTransitionMatrix[state][input];}$/;"	f	class:Trellis
operator ()	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    tBit operator()(int i,int j) const {return _matrix[i*_nBitsByStream+j];}$/;"	f	class:Bits
operator -	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^int Bits::operator-(const Bits &bits) const$/;"	f	class:Bits
operator -	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    int operator-(const Bits &bits) const;$/;"	p	class:Bits
operator =	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.cpp	/^void PSPPath::operator=(const PSPPath &path)$/;"	f	class:PSPPath
operator =	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^	void operator=(const PSPPath &path);$/;"	p	class:PSPPath
operator =	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.cpp	/^void ViterbiPath::operator=(const ViterbiPath &path)$/;"	f	class:ViterbiPath
operator =	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    virtual void operator=(const ViterbiPath &path);$/;"	p	class:ViterbiPath
operator =	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.cpp	/^void Particle::operator=(const Particle &particle)$/;"	f	class:Particle
operator =	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    void operator=(const Particle &particle);$/;"	p	class:Particle
operator =	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^Bits& Bits::operator=(const Bits& bits)$/;"	f	class:Bits
operator =	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    Bits& operator=(const Bits& bits);$/;"	p	class:Bits
operator ==	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^bool Bits::operator==(const Bits &bits) const$/;"	f	class:Bits
operator ==	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    bool operator==(const Bits &bits) const;$/;"	p	class:Bits
operator [	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.cpp	/^tSymbol Alphabet::operator [ ](vector<tBit> secuenciaBitsBuscada) const$/;"	f	class:Alphabet
operator [	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.cpp	/^vector<tBit> Alphabet::operator [ ](tSymbol simbolo) const$/;"	f	class:Alphabet
operator [	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.cpp	/^tVector NullNoise::operator [ ](int n) const$/;"	f	class:NullNoise
operator [	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.h	/^    virtual tVector operator [ ](int n) const;$/;"	p	class:NullNoise
operator [	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.cpp	/^tVector PowerProfileDependentNoise::operator [ ](int n) const$/;"	f	class:PowerProfileDependentNoise
operator [	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^    virtual tVector operator [ ](int n) const;$/;"	p	class:PowerProfileDependentNoise
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        std::vector<tBit> operator [](tSymbol simbolo) const;$/;"	p	class:Alphabet
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        tSymbol operator [](int index) const { return _symbols[index];}$/;"	f	class:Alphabet
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        tSymbol operator [](std::vector<tBit> secuenciaBitsBuscada) const;$/;"	p	class:Alphabet
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.cpp	/^tVector ChannelDependentNoise::operator[](int n) const$/;"	f	class:ChannelDependentNoise
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    tVector operator[](int n) const;$/;"	p	class:ChannelDependentNoise
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	virtual tVector operator[](int n) const = 0;$/;"	p	class:Noise
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARMultiuserCDMAchannel.h	/^    virtual tMatrix operator[](int n) const { return _userCoeffs[n];}$/;"	f	class:ARMultiuserCDMAchannel
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.h	/^	tMatrix operator[](int n) const { return _channelMatrices[n];};$/;"	f	class:ARchannel
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.h	/^	tMatrix operator[](int n) const { return _channelMatrices[n];};$/;"	f	class:BesselChannel
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/EstimatedMIMOChannel.h	/^	tMatrix operator[](int n) const { return _channelMatrices[n];}$/;"	f	class:EstimatedMIMOChannel
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    virtual tMatrix operator[](int n) const = 0;$/;"	p	class:MIMOChannel
operator []	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/TimeInvariantChannel.h	/^	tMatrix operator[](int n) const { return _channelMatrix;};$/;"	f	class:TimeInvariantChannel
opposite	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        tSymbol opposite(const tSymbol symbol) const { return -1.0*symbol;}$/;"	f	class:Alphabet
outputFileName	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    char outputFileName[HOSTNAME_LENGTH+4];$/;"	m	class:BaseSystem
overallErrorsNumberTimeEvolution	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<LaGenMatInt> overallErrorsNumberTimeEvolution;$/;"	m	class:BaseSystem
overallMseMatrix	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tMatrix overallPeMatrix,overallMseMatrix;$/;"	m	class:BaseSystem
overallPeMatrix	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tMatrix overallPeMatrix,overallMseMatrix;$/;"	m	class:BaseSystem
overallPeTimeEvolution	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<tMatrix> overallPeTimeEvolution;$/;"	m	class:BaseSystem
parametersFromYuleWalker	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.cpp	/^vector<double> ARprocess::parametersFromYuleWalker(int order,double velocity,double carrierFrequency,double T,double &noiseVariance)$/;"	f	class:ARprocess
parametersFromYuleWalker	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	static vector<double> parametersFromYuleWalker(int order,double velocity,double carrierFrequency,double T,double &noiseVariance);$/;"	p	class:ARprocess
particlesNumbers	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselNumeroParticulasSystem.h	/^    vector<int> particlesNumbers;$/;"	m	class:TesisComplejidadReducidaBesselNumeroParticulasSystem
pe	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    double pe,mse;$/;"	m	class:BaseSystem
peMatrices	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    vector<tMatrix> peMatrices, MSEMatrices;$/;"	m	class:BaseSystem
performsChannelOrderAPPestimation	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    virtual bool performsChannelOrderAPPestimation() const { return false;}$/;"	f	class:Algorithm
performsChannelOrderAPPestimation	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^    bool performsChannelOrderAPPestimation() const { return true;}$/;"	f	class:UnknownChannelOrderAlgorithm
permutations	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<std::vector<uint> > permutations;$/;"	m	class:BaseSystem
powerProfile	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    DelayPowerProfile *powerProfile;$/;"	m	class:BaseSystem
powers	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/ContinuousPowerProfile.h	/^    vector<double> powers() const { return _continuousPowers;}$/;"	f	class:ContinuousPowerProfile
preamble	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tMatrix preamble;$/;"	m	class:BaseSystem
preambleLength	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
predictiveCovariance	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    tMatrix predictiveCovariance() const { return Util::eigen2lapack(_predictiveCovariance_eigen);}$/;"	f	class:KalmanFilter
predictiveMean	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    tVector predictiveMean() const { return Util::eigen2lapack(_predictiveMean_eigen);}$/;"	f	class:KalmanFilter
presentFrameChannelOrderAPPsAlongTime	/usr/local/.home/manu/c++/comunicaciones/systems/ChannelOrderEstimationSystem.h	/^    vector<vector<tMatrix> > presentFrameChannelOrderAPPsAlongTime;$/;"	m	class:ChannelOrderEstimationSystem
presentFrameMSE	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tMatrix presentFramePe,presentFrameMSE;$/;"	m	class:BaseSystem
presentFrameMSEtimeEvolution	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    vector<tMatrix> presentFrameMSEtimeEvolution;$/;"	m	class:BaseSystem
presentFramePe	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tMatrix presentFramePe,presentFrameMSE;$/;"	m	class:BaseSystem
presentFrameStatUtilSeeds	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    LaGenMatLongInt presentFrameStatUtilSeeds;$/;"	m	class:BaseSystem
print	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.cpp	/^void PSPPath::print() const$/;"	f	class:PSPPath
print	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^    void print() const;$/;"	p	class:PSPPath
print	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.cpp	/^void ViterbiPath::print() const$/;"	f	class:ViterbiPath
print	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    virtual void print() const;$/;"	p	class:ViterbiPath
print	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    void print() const { std::cout << _symbolVectors << std::endl << "peso = " << _weight << std::endl;}$/;"	f	class:Particle
print	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^void Bits::print() const$/;"	f	class:Bits
print	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    void print() const;$/;"	p	class:Bits
print	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    virtual void print() const { cout << _matrix;}$/;"	f	class:ChannelDependentNoise
print	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	virtual void print() const = 0;$/;"	p	class:Noise
print	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.h	/^	virtual void print() const {std::cout << "Null Noise" << std::endl;}$/;"	f	class:NullNoise
print	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^	virtual void print() const { cout << _matrix;}$/;"	f	class:PowerProfileDependentNoise
print	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.cpp	/^void DelayPowerProfile::print() const$/;"	f	class:DelayPowerProfile
print	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    virtual void print() const;$/;"	p	class:DelayPowerProfile
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::print(const int* array,int nElements);$/;"	p	class:Util	file:
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::print(const std::vector<bool> &vector);$/;"	p	class:Util	file:
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::print(const std::vector<double> &vector);$/;"	p	class:Util	file:
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::print(const std::vector<int> &vector);$/;"	p	class:Util	file:
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::print(const std::vector<std::vector<bool> > &matrix);$/;"	p	class:Util	file:
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::print(const std::vector<std::vector<uint> > &matrix);$/;"	p	class:Util	file:
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::print(const std::vector<uint> &vector);$/;"	p	class:Util	file:
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::print(const T* array,int nElements)$/;"	f	class:Util
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::print(const std::vector<T> &vector)$/;"	f	class:Util
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::print(const std::vector<std::vector<T> > &matrix)$/;"	f	class:Util
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::print(const tMatrix &A)$/;"	f	class:Util
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void print(const tMatrix &A);$/;"	p	class:Util
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void print(const T* array,int nElements);$/;"	p	class:Util
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void print(const std::vector<T> &vector);$/;"	p	class:Util
print	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void print(const std::vector<std::vector<T> > &matrix);$/;"	p	class:Util
printWeights	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.cpp	/^void ParticleFilter::printWeights() const$/;"	f	class:ParticleFilter
printWeights	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    void printWeights() const;$/;"	p	class:ParticleFilter
probApriori	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.cpp	/^double UsersActivityDistribution::probApriori(bool X) const$/;"	f	class:UsersActivityDistribution
probApriori	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^    double probApriori(bool X) const;$/;"	p	class:UsersActivityDistribution
probSymbolsVectorXprobActiveUsers	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.cpp	/^double CDMAunknownActiveUsersSISopt::probSymbolsVectorXprobActiveUsers(const tVector &symbolsVector) const$/;"	f	class:CDMAunknownActiveUsersSISopt
probSymbolsVectorXprobActiveUsers	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.cpp	/^double CDMAunknownActiveUsersSISopt::probSymbolsVectorXprobActiveUsers(const tVector &symbolsVector, const std::vector<bool> &lastUsersActivity) const$/;"	f	class:CDMAunknownActiveUsersSISopt
probSymbolsVectorXprobActiveUsers	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^    double probSymbolsVectorXprobActiveUsers(const tVector &symbolsVector) const;    $/;"	p	class:CDMAunknownActiveUsersSISopt
probSymbolsVectorXprobActiveUsers	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^    double probSymbolsVectorXprobActiveUsers(const tVector &symbolsVector, const std::vector<bool> &lastUsersActivity) const;$/;"	p	class:CDMAunknownActiveUsersSISopt
probXgivenY	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.cpp	/^double UsersActivityDistribution::probXgivenY(bool X, bool Y) const$/;"	f	class:UsersActivityDistribution
probXgivenY	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^    double probXgivenY(bool X, bool Y) const;$/;"	p	class:UsersActivityDistribution
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.cpp	/^void CDMAunknownActiveUsersSISopt::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:CDMAunknownActiveUsersSISopt
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:CDMAunknownActiveUsersSISopt
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/DSISoptAlgorithm.cpp	/^void DSISoptAlgorithm::process(const tMatrix &observations, vector< double > noiseVariances)$/;"	f	class:DSISoptAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/DSISoptAlgorithm.h	/^    void process(const tMatrix &observations, vector< double > noiseVariances);$/;"	p	class:DSISoptAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.cpp	/^void ISIS::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:ISIS
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/ISIS.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:ISIS
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.cpp	/^void LinearFilterBasedAlgorithm::process(const tMatrix &observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:LinearFilterBasedAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^	void process(const tMatrix &observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:LinearFilterBasedAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^void LinearFilterBasedSMCAlgorithm::process(const tMatrix &observations, vector< double > noiseVariances)$/;"	f	class:LinearFilterBasedSMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    void process(const tMatrix &observations, vector< double > noiseVariances);$/;"	p	class:LinearFilterBasedSMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.cpp	/^void MLSDmAlgorithm::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:MLSDmAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:MLSDmAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmFeedBackAlgorithm.cpp	/^void MLSDmFeedBackAlgorithm::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:MLSDmFeedBackAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmFeedBackAlgorithm.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:MLSDmFeedBackAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual void process(const tMatrix &observations,vector<double> noiseVariances) = 0;$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^void PSPAlgorithm::process(const tMatrix &observations,vector<double> noiseVariances)$/;"	f	class:PSPAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	void process(const tMatrix &observations,vector<double> noiseVariances);$/;"	p	class:PSPAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.cpp	/^void PSPBasedSMCAlgorithm::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:PSPBasedSMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:PSPBasedSMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/SISoptAlgorithm.cpp	/^void SISoptAlgorithm::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:SISoptAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/SISoptAlgorithm.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:SISoptAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    virtual void process(const tMatrix &observations,vector<double> noiseVariances) = 0;$/;"	p	class:SMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.cpp	/^void TriangularizationBasedSMCAlgorithm::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:TriangularizationBasedSMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/TriangularizationBasedSMCAlgorithm.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:TriangularizationBasedSMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.cpp	/^void USIS::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:USIS
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:USIS
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.cpp	/^void UnknownActiveUsersLinearFilterBasedSMCAlgorithm::process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
process	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.h	/^    virtual void process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
prototypes	/usr/local/.home/manu/c++/comunicaciones/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
rAll	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tRange rFrameDuration,rTrainingSeqDuration,rAll;$/;"	m	class:BaseSystem
rAllSymbolRows	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    tRange rAllSymbolRows,rmMinus1FirstColumns;$/;"	m	class:ViterbiAlgorithm
rFrameDuration	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tRange rFrameDuration,rTrainingSeqDuration,rAll;$/;"	m	class:BaseSystem
rTrainingSeqDuration	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tRange rFrameDuration,rTrainingSeqDuration,rAll;$/;"	m	class:BaseSystem
rand	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		double rand() { return ((double) rand_r(&_seed))\/((double) RAND_MAX); }$/;"	f	class:Random
randMatrix	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^tVector StatUtil::randMatrix(const tVector &mean,const tMatrix &covariance,Random &randomGenerator)$/;"	f	class:StatUtil
randMatrix	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static tVector randMatrix(const tVector &mean,const tMatrix &covariance,Random &randomGenerator = _randomGenerator);$/;"	p	class:StatUtil
randab	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		int randab(int a, int b) { return (a+(int) ((double) (b-a+1)*rand_r(&_seed)\/(RAND_MAX+1.0))); };$/;"	f	class:Random
randn	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.cpp	/^double Random::randn ()$/;"	f	class:Random
randn	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		double randn();$/;"	p	class:Random
randnMatrix	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^tMatrix StatUtil::randnMatrix(int rows,int cols,double mean,double variance,Random &randomGenerator)$/;"	f	class:StatUtil
randnMatrix	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static tMatrix randnMatrix(int rows,int cols,double mean,double variance,Random &randomGenerator = _randomGenerator);    $/;"	p	class:StatUtil
randomGenerator	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    Random randomGenerator;$/;"	m	class:BaseSystem
range	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.cpp	/^tMatrix ChannelDependentNoise::range(int start,int end) const$/;"	f	class:ChannelDependentNoise
range	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    virtual tMatrix range(int start,int end) const;$/;"	p	class:ChannelDependentNoise
range	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	virtual tMatrix range(int start,int end) const {throw RuntimeException("Noise::Range: not implemented.");}$/;"	f	class:Noise
range	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.cpp	/^vector<tMatrix> MIMOChannel::range(int a,int b)$/;"	f	class:MIMOChannel
range	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    vector<tMatrix> range(int a,int b);$/;"	p	class:MIMOChannel
realChannel	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.cpp	/^    extern MIMOChannel *realChannel;$/;"	x
realChannel	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.cpp	/^	extern MIMOChannel *realChannel;$/;"	x
realChannel	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.cpp	/^    extern MIMOChannel *realChannel;$/;"	x
realChannel	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.cpp	/^	extern MIMOChannel *realChannel;$/;"	x
realChannel	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.cpp	/^	extern MIMOChannel *realChannel;$/;"	x
realChannel	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.cpp	/^    extern MIMOChannel *realChannel;$/;"	x
realNoise	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.cpp	/^    extern Noise *realNoise;$/;"	x
realNoise	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.cpp	/^	extern Noise *realNoise;$/;"	x
realNoise	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.cpp	/^    extern Noise *realNoise;$/;"	x
realNoise	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.cpp	/^	extern Noise *realNoise;$/;"	x
realNoise	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.cpp	/^	extern Noise *realNoise;$/;"	x
realNoise	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.cpp	/^    extern Noise *realNoise;$/;"	x
realNoise	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^    Noise *realNoise;$/;"	v
realSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/CDMAunknownActiveUsersSISopt.cpp	/^    extern tMatrix *realSymbols;$/;"	x
realSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.cpp	/^	extern tMatrix *realSymbols;$/;"	x
realSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.cpp	/^    extern tMatrix *realSymbols;$/;"	x
realSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPBasedSMCAlgorithm.cpp	/^	extern tMatrix *realSymbols;$/;"	x
realSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.cpp	/^	extern tMatrix *realSymbols;$/;"	x
realSymbols	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.cpp	/^    extern tMatrix *realSymbols;$/;"	x
realSymbols	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^    tMatrix *realSymbols;$/;"	v
resampleWhenNecessary	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.cpp	/^bool ResamplingAlgorithm::resampleWhenNecessary(ParticleFilter *particleFilter)$/;"	f	class:ResamplingAlgorithm
resampleWhenNecessary	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^    virtual bool resampleWhenNecessary(ParticleFilter *particleFilter);$/;"	p	class:ResamplingAlgorithm
resamplingNeeded	/usr/local/.home/manu/c++/comunicaciones/smc/ResamplingCriterion.cpp	/^bool ResamplingCriterion::resamplingNeeded(tVector weights,std::vector<int> indexes)$/;"	f	class:ResamplingCriterion
resamplingNeeded	/usr/local/.home/manu/c++/comunicaciones/smc/ResamplingCriterion.h	/^	bool resamplingNeeded(tVector weights)$/;"	f	class:ResamplingCriterion
resamplingNeeded	/usr/local/.home/manu/c++/comunicaciones/smc/ResamplingCriterion.h	/^	bool resamplingNeeded(tVector weights,std::vector<int> indexes);$/;"	p	class:ResamplingCriterion
resamplingRatio	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    double resamplingRatio;$/;"	m	class:SMCSystem
rlsEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^	RLSEstimator *rlsEstimator;$/;"	m	class:TVT2007System
rlsEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    RLSEstimator *rlsEstimator;$/;"	m	class:TesisComplejidadReducidaSystem
rlsEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    RLSEstimator *rlsEstimator;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
rlsEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^	RLSEstimator *rlsEstimator;$/;"	m	class:WSA08System
rmMinus1FirstColumns	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    tRange rAllSymbolRows,rmMinus1FirstColumns;$/;"	m	class:ViterbiAlgorithm
rmmseDetector	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    RMMSEDetector *rmmseDetector;$/;"	m	class:LMSmuTestSystem
rmmseDetector	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^	RMMSEDetector *rmmseDetector;$/;"	m	class:TVT2007System
rmmseDetector	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    RMMSEDetector *rmmseDetector;$/;"	m	class:TesisComplejidadReducidaSystem
rmmseDetector	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    RMMSEDetector *rmmseDetector;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
rmmseDetector	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^	RMMSEDetector *rmmseDetector;$/;"	m	class:WSA08System
rows	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    int rows() { return _nOutputs;}$/;"	f	class:ChannelMatrixEstimator
rows	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	int rows() {return _rows;}$/;"	f	class:ARprocess
rowwise	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^enum tOrder {rowwise,columnwise};$/;"	e	enum:tOrder
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    virtual void run(tMatrix observations,vector<double> noiseVariances) = 0;$/;"	p	class:Algorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    virtual void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence) = 0;$/;"	p	class:Algorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.cpp	/^void CMEBasedAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:CMEBasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.cpp	/^void CMEBasedAlgorithm::run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:CMEBasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.h	/^	virtual void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:CMEBasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEBasedAlgorithm.h	/^	virtual void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:CMEBasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.cpp	/^void CMEapplyingAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:CMEapplyingAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.cpp	/^void CMEapplyingAlgorithm::run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:CMEapplyingAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^    virtual void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:CMEapplyingAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/CMEapplyingAlgorithm.h	/^    virtual void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:CMEapplyingAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.cpp	/^void KnownChannelAlgorithm::run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:KnownChannelAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:KnownChannelAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.cpp	/^void KnownFlatChannelOptimalAlgorithm::run(tMatrix observations, vector< double > noiseVariances)$/;"	f	class:KnownFlatChannelOptimalAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    void run(tMatrix observations, vector< double > noiseVariances);$/;"	p	class:KnownFlatChannelOptimalAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.cpp	/^void KnownSymbolsKalmanBasedChannelEstimatorAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.cpp	/^void KnownSymbolsKalmanBasedChannelEstimatorAlgorithm::run(tMatrix observations,vector<double> noiseVariances,tMatrix trainingSequence)$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.cpp	/^void LinearFilterBasedAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:LinearFilterBasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.cpp	/^void LinearFilterBasedAlgorithm::run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:LinearFilterBasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:LinearFilterBasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:LinearFilterBasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^void MultipleChannelEstimatorsPerParticleSMCAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^void MultipleChannelEstimatorsPerParticleSMCAlgorithm::run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^void PSPAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:PSPAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^void PSPAlgorithm::run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:PSPAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:PSPAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^	void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:PSPAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^void SMCAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:SMCAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^void SMCAlgorithm::run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:SMCAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:SMCAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:SMCAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.cpp	/^void TimeVaryingChannelCMEbasedAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:TimeVaryingChannelCMEbasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.cpp	/^void TimeVaryingChannelCMEbasedAlgorithm::run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:TimeVaryingChannelCMEbasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.h	/^	virtual void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:TimeVaryingChannelCMEbasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/TimeVaryingChannelCMEbasedAlgorithm.h	/^	virtual void run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:TimeVaryingChannelCMEbasedAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:ViterbiAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::run(tMatrix observations,vector<double> noiseVariances,int firstSymbolVectorDetectedAt)$/;"	f	class:ViterbiAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:ViterbiAlgorithm
run	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    void run(tMatrix observations,vector<double> noiseVariances,int firstSymbolVectorDetectedAt);$/;"	p	class:ViterbiAlgorithm
runFrom	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^void SMCAlgorithm::runFrom(int n,tMatrix observations,vector<double> noiseVariances)$/;"	f	class:SMCAlgorithm
runFrom	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    void runFrom(int n,tMatrix observations,vector<double> noiseVariances);$/;"	p	class:SMCAlgorithm
sampleFromPredictive	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.cpp	/^tMatrix CDMAKalmanEstimator::sampleFromPredictive() const$/;"	f	class:CDMAKalmanEstimator
sampleFromPredictive	/usr/local/.home/manu/c++/comunicaciones/estimation/CDMAKalmanEstimator.h	/^    virtual tMatrix sampleFromPredictive() const;$/;"	p	class:CDMAKalmanEstimator
sampleFromPredictive	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^tMatrix KalmanEstimator::sampleFromPredictive() const$/;"	f	class:KalmanEstimator
sampleFromPredictive	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    virtual tMatrix sampleFromPredictive() const;$/;"	p	class:KalmanEstimator
sampleFromPrior	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.cpp	/^bool UsersActivityDistribution::sampleFromPrior() const$/;"	f	class:UsersActivityDistribution
sampleFromPrior	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^    bool sampleFromPrior() const;$/;"	p	class:UsersActivityDistribution
sampleGivenItWas	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.cpp	/^bool UsersActivityDistribution::sampleGivenItWas(bool previous) const$/;"	f	class:UsersActivityDistribution
sampleGivenItWas	/usr/local/.home/manu/c++/comunicaciones/statistics/UsersActivityDistribution.h	/^    bool sampleGivenItWas(bool previous) const;$/;"	p	class:UsersActivityDistribution
scalarToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::scalarToOctaveFileStream(double scalar,string name,ofstream &f);$/;"	p	class:Util	file:
scalarToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::scalarToOctaveFileStream(int scalar,string name,ofstream &f);$/;"	p	class:Util	file:
scalarToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::scalarToOctaveFileStream(T scalar,string name,ofstream &f)$/;"	f	class:Util
scalarToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void scalarToOctaveFileStream(T scalar,string name,ofstream &f);$/;"	p	class:Util
scalarsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::scalarsVectorToOctaveFileStream(std::vector<double> vector,string name,ofstream &f);$/;"	p	class:Util	file:
scalarsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::scalarsVectorToOctaveFileStream(std::vector<int> vector,string name,ofstream &f);$/;"	p	class:Util	file:
scalarsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template void Util::scalarsVectorToOctaveFileStream(std::vector<uint32_t> vector,string name,ofstream &f);$/;"	p	class:Util	file:
scalarsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> void Util::scalarsVectorToOctaveFileStream(std::vector<T> vector,string name,ofstream &f)$/;"	f	class:Util
scalarsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static void scalarsVectorToOctaveFileStream(std::vector<T> vector,string name,ofstream &f);$/;"	p	class:Util
setActivityAtTime	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^    void setActivityAtTime(uint time,const std::vector<bool> &usersActivity) { _activeUsers[time] = usersActivity;}    $/;"	f	class:WithActiveUsersParticleAddon
setChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    void setChannelMatrix(int iChannelOrder,int n,const tMatrix &matrix)$/;"	f	class:ParticleWithChannelEstimation
setChannelOrderAPP	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderAppParticleAddon.h	/^    void setChannelOrderAPP(double channelOrderAPP,int n) { _channelOrderAPP[n] = channelOrderAPP;}$/;"	f	class:WithChannelOrderAppParticleAddon
setDoneTrue	/usr/local/.home/manu/c++/comunicaciones/com/com.cpp	/^void setDoneTrue(int signal)$/;"	f
setFilteredCovariance	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.cpp	/^void KalmanFilter::setFilteredCovariance(const MatrixXd &filteredCovariance)$/;"	f	class:KalmanFilter
setFilteredCovariance	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    void setFilteredCovariance(const MatrixXd &filteredCovariance);    $/;"	p	class:KalmanFilter
setFilteredCovariance	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    void setFilteredCovariance(const tMatrix &filteredCovariance) { setFilteredCovariance(Util::lapack2eigen(filteredCovariance));}$/;"	f	class:KalmanFilter
setFilteredMean	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.cpp	/^void KalmanFilter::setFilteredMean(const VectorXd &filteredMean)$/;"	f	class:KalmanFilter
setFilteredMean	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    void setFilteredMean(const VectorXd &filteredMean);$/;"	p	class:KalmanFilter
setFilteredMean	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    void setFilteredMean(const tVector &filteredMean) { setFilteredMean(Util::lapack2eigen(filteredMean));}$/;"	f	class:KalmanFilter
setFirstEstimatedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    virtual void setFirstEstimatedChannelMatrix(const tMatrix &matrix) { _lastEstimatedChannelMatrix = matrix;}$/;"	f	class:ChannelMatrixEstimator
setFirstEstimatedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^void KalmanEstimator::setFirstEstimatedChannelMatrix(const tMatrix &matrix)$/;"	f	class:KalmanEstimator
setFirstEstimatedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    virtual void setFirstEstimatedChannelMatrix(const tMatrix &matrix);$/;"	p	class:KalmanEstimator
setFirstEstimatedChannelMatrix	/usr/local/.home/manu/c++/comunicaciones/estimation/KnownChannelChannelMatrixEstimator.h	/^    virtual void setFirstEstimatedChannelMatrix(const tMatrix &matrix) {}    $/;"	f	class:KnownChannelChannelMatrixEstimator
setSNR	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.cpp	/^void ChannelDependentNoise::setSNR(int SNR,double alphabetVariance)$/;"	f	class:ChannelDependentNoise
setSNR	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    virtual void setSNR(int SNR,double alphabetVariance);$/;"	p	class:ChannelDependentNoise
setSNR	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	virtual void setSNR(int SNR,double alphabetVariance) = 0;$/;"	p	class:Noise
setSNR	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.h	/^	virtual void setSNR(int SNR,double alphabetVariance) {}$/;"	f	class:NullNoise
setSNR	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.cpp	/^void PowerProfileDependentNoise::setSNR(int SNR, double alphabetVariance)$/;"	f	class:PowerProfileDependentNoise
setSNR	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^    virtual void setSNR(int SNR, double alphabetVariance);$/;"	p	class:PowerProfileDependentNoise
setSeed	/usr/local/.home/manu/c++/comunicaciones/randomutil/Random.h	/^		void setSeed(uint32_t seed) { _seed = seed; }$/;"	f	class:Random
setSymbolVector	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    void setSymbolVector(int n,const std::vector<tSymbol> &v)$/;"	f	class:Particle
setSymbolVector	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    void setSymbolVector(int n,const tVector &v) { _symbolVectors.col(n).inject(v);}$/;"	f	class:Particle
setSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    void setSymbolVectors(const tRange &range,const tMatrix &symbolVectors)$/;"	f	class:Particle
setSymbolVectors	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    void setSymbolVectors(int a,int b,const tMatrix &symbolVectors)$/;"	f	class:Particle
setUserActivity	/usr/local/.home/manu/c++/comunicaciones/smc/WithActiveUsersParticleAddon.h	/^    void setUserActivity(uint iUser,uint time,bool value) { _activeUsers[time][iUser] = value;}$/;"	f	class:WithActiveUsersParticleAddon
setWeight	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    void setWeight(double weight) { _weight = weight;}$/;"	f	class:Particle
shiftUp	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::shiftUp(tVector &v,int n)$/;"	f	class:Util
shiftUp	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void shiftUp(tVector &v,int n);$/;"	p	class:Util
sign	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::sign(const tMatrix &A)$/;"	f	class:Util
sign	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix sign(const tMatrix &A);$/;"	p	class:Util
smoothedLikelihood	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^double SMCAlgorithm::smoothedLikelihood(const vector<tMatrix> &channelMatrices,const tMatrix &involvedSymbolVectors,ParticleWithChannelEstimation *particle,int iObservationToBeProcessed,const tMatrix &observations,const vector<double> &noiseVariances)$/;"	f	class:SMCAlgorithm
smoothedLikelihood	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    double smoothedLikelihood(const vector<tMatrix> &channelMatrices,const tMatrix &involvedSymbolVectors,ParticleWithChannelEstimation *particle,int iObservationToBeProcessed,const tMatrix &observations,const vector<double> &noiseVariances);$/;"	p	class:SMCAlgorithm
solveAmbiguity	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^vector<int> Util::solveAmbiguity(const tMatrix &H1,const tMatrix &H2,const vector<vector<uint> > &permutations,int &iBestPermutation)$/;"	f	class:Util
solveAmbiguity	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static vector<int> solveAmbiguity(const tMatrix &H1,const tMatrix &H2,const vector<vector<uint> > &permutations,int &iBestPermutation);$/;"	p	class:Util
squareError	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^double Util::squareError(const tMatrix &A,const tMatrix &B)$/;"	f	class:Util
squareError	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static double squareError(const tMatrix &A,const tMatrix &B);$/;"	p	class:Util
squareErrorPaddingWithZeros	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^double Util::squareErrorPaddingWithZeros(const tMatrix &A,const tMatrix &B)$/;"	f	class:Util
squareErrorPaddingWithZeros	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static double squareErrorPaddingWithZeros(const tMatrix &A,const tMatrix &B);$/;"	p	class:Util
statUtilSeeds	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    std::vector<uint32_t> mainSeeds,statUtilSeeds;$/;"	m	class:BaseSystem
stateStep	/usr/local/.home/manu/c++/comunicaciones/detection/DecorrelatorDetector.h	/^	virtual void stateStep(tVector observations) {}$/;"	f	class:DecorrelatorDetector
stateStep	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    virtual void stateStep(tVector observations) = 0;$/;"	p	class:LinearDetector
stateStep	/usr/local/.home/manu/c++/comunicaciones/detection/MMSEDetector.h	/^    virtual void stateStep(tVector observations) {}$/;"	f	class:MMSEDetector
stateStep	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.cpp	/^void RMMSEDetector::stateStep(tVector observations)$/;"	f	class:RMMSEDetector
stateStep	/usr/local/.home/manu/c++/comunicaciones/detection/RMMSEDetector.h	/^    void stateStep(tVector observations);$/;"	p	class:RMMSEDetector
stateStepsFromObservationsSequence	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.cpp	/^void LinearDetector::stateStepsFromObservationsSequence(const tMatrix &observations,int smoothingLag,int iFrom,int iTo)$/;"	f	class:LinearDetector
stateStepsFromObservationsSequence	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    void stateStepsFromObservationsSequence(const tMatrix &observations,int smoothingLag,int iFrom,int iTo);$/;"	p	class:LinearDetector
stdDevAt	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.cpp	/^double ChannelDependentNoise::stdDevAt(int n) const$/;"	f	class:ChannelDependentNoise
stdDevAt	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    double stdDevAt(int n) const;$/;"	p	class:ChannelDependentNoise
stdDevAt	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	virtual double stdDevAt(int n) const = 0;$/;"	p	class:Noise
stdDevAt	/usr/local/.home/manu/c++/comunicaciones/transmision/NullNoise.h	/^    virtual double stdDevAt(int n) const {return 0.0;}$/;"	f	class:NullNoise
stdDevAt	/usr/local/.home/manu/c++/comunicaciones/transmision/PowerProfileDependentNoise.h	/^	virtual double stdDevAt(int n) const {return _stdDev;}$/;"	f	class:PowerProfileDependentNoise
step	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.cpp	/^void KalmanFilter::step(const MatrixXd &F_eigen,const VectorXd &observation_eigen,const MatrixXd &observationEquationCovariance_eigen)$/;"	f	class:KalmanFilter
step	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.cpp	/^void KalmanFilter::step(const tMatrix &F,const tVector &observation,const tMatrix &observationEquationCovariance)$/;"	f	class:KalmanFilter
step	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    void step(const MatrixXd &F_eigen,const VectorXd &observation_eigen,const MatrixXd &observationEquationCovariance_eigen); \/\/ eigen$/;"	p	class:KalmanFilter
step	/usr/local/.home/manu/c++/comunicaciones/filters/KalmanFilter.h	/^    void step(const tMatrix &F,const tVector &observation,const tMatrix &observationEquationCovariance);$/;"	p	class:KalmanFilter
stringsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::stringsVectorToOctaveFileStream(std::vector<string> strings,string name,ofstream &f)$/;"	f	class:Util
stringsVectorToOctaveFileStream	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void stringsVectorToOctaveFileStream(std::vector<string> strings,string name,ofstream &f);$/;"	p	class:Util
substractKnownSymbolsContribution	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.cpp	/^tVector Algorithm::substractKnownSymbolsContribution(const vector<tMatrix> &matrices,int m,int c,int e,const tVector &observations,const tMatrix &involvedSymbolVectors)$/;"	f	class:Algorithm
substractKnownSymbolsContribution	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    tVector substractKnownSymbolsContribution(const vector<tMatrix> &matrices,int m,int c,int d,const tVector &observations,const tMatrix &symbolVectors);$/;"	p	class:Algorithm
sum	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^double Util::sum(const tVector &v)$/;"	f	class:Util
sum	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template double Util::sum(const std::vector<double> &vector);$/;"	p	class:Util	file:
sum	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template int Util::sum(const std::vector<int> &vector);$/;"	p	class:Util	file:
sum	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^template<class T> T Util::sum(const std::vector<T> &vector)$/;"	f	class:Util
sum	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static double sum(const tVector &v);$/;"	p	class:Util
sum	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    template<class T> static T sum(const std::vector<T> &vector);$/;"	p	class:Util
symbolRate	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^    double symbolRate; \/\/ (Hz)$/;"	m	class:Elsevier2007BesselChannelSystem
symbolRate	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    double symbolRate; \/\/ (Hz)$/;"	m	class:LMSmuTestSystem
symbolRate	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    double symbolRate; \/\/ (Hz)$/;"	m	class:PSPvsSMCSystem
symbolRate	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^    double symbolRate; \/\/ (Hz)$/;"	m	class:TesisComplejidadReducidaBesselSystem
symbolRate	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^    double symbolRate; \/\/ (Hz)$/;"	m	class:TesisOrdenCanalDesconocidoBesselSystem
symbols	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    tMatrix symbols;$/;"	m	class:BaseSystem
symbolsArray2int	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.cpp	/^int Alphabet::symbolsArray2int(vector<tSymbol> symbolsVector) const$/;"	f	class:Alphabet
symbolsArray2int	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        int symbolsArray2int(std::vector<tSymbol> symbolsVector) const;$/;"	p	class:Alphabet
symbolsDetectionWindowStart	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int MSEwindowStart,symbolsDetectionWindowStart;$/;"	m	class:BaseSystem
symbolsVector	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^        tVector symbolsVector;$/;"	m	struct:KnownFlatChannelOptimalAlgorithm::__anon1
tBit	/usr/local/.home/manu/c++/comunicaciones/src/types.h	/^typedef unsigned short int tBit;$/;"	t
tLongIntVector	/usr/local/.home/manu/c++/comunicaciones/src/types.h	/^typedef LaVectorLongInt tLongIntVector;$/;"	t
tMatrix	/usr/local/.home/manu/c++/comunicaciones/src/types.h	/^typedef LaGenMatDouble tMatrix;$/;"	t
tOrder	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^enum tOrder {rowwise,columnwise};$/;"	g
tRange	/usr/local/.home/manu/c++/comunicaciones/src/types.h	/^typedef LaIndex tRange;$/;"	t
tStage	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^enum tStage {exitStage,arrivalStage};$/;"	g
tSymbol	/usr/local/.home/manu/c++/comunicaciones/src/types.h	/^typedef double tSymbol;$/;"	t
tTreeNode	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    } tTreeNode;$/;"	t	class:KnownFlatChannelOptimalAlgorithm	typeref:struct:KnownFlatChannelOptimalAlgorithm::__anon1
tVector	/usr/local/.home/manu/c++/comunicaciones/src/types.h	/^typedef LaVectorDouble tVector;$/;"	t
tapsAmplitudes	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    std::vector<double> tapsAmplitudes() const { return _amplitudes;}$/;"	f	class:DelayPowerProfile
toMatrix	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::toMatrix(const tVector &vector,tOrder order,int rows,int cols)$/;"	f	class:Util
toMatrix	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::toMatrix(const tVector &vector,tOrder order,uint rows)$/;"	f	class:Util
toMatrix	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::toMatrix(const vector<double> &vector,tOrder order,uint rows,uint cols)$/;"	f	class:Util
toMatrix	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix toMatrix(const tVector &vector,tOrder order,int rows,int cols);$/;"	p	class:Util
toMatrix	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix toMatrix(const tVector &vector,tOrder order,uint rows);$/;"	p	class:Util
toMatrix	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix toMatrix(const vector<double> &vector,tOrder order,uint rows,uint cols);$/;"	p	class:Util
toVector	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tVector Util::toVector(const tMatrix &matrix,tOrder order)$/;"	f	class:Util
toVector	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tVector toVector(const tMatrix &matrix,tOrder order);$/;"	p	class:Util
trainSeqLength	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    int nFrames,L,N,frameLength,nBitsGenerated,m,d,trainSeqLength,preambleLength;$/;"	m	class:BaseSystem
trajectorylength	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    int trajectorylength() const { return _symbolVectors.cols();}$/;"	f	class:Particle
transmit	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.cpp	/^tMatrix MIMOChannel::transmit(tMatrix &symbols,Noise &noise)$/;"	f	class:MIMOChannel
transmit	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    tMatrix transmit(tMatrix &symbols,Noise &noise);$/;"	p	class:MIMOChannel
transpose	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^void Util::transpose(const tMatrix &A,tMatrix &B)$/;"	f	class:Util
transpose	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static void transpose(const tMatrix &A,tMatrix &B);$/;"	p	class:Util
uint	/usr/local/.home/manu/c++/comunicaciones/src/types.h	/^typedef unsigned int uint;$/;"	t
uniqueRLSchannelEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/Rev2TVT2007System.h	/^	vector<ChannelMatrixEstimator *> uniqueRLSchannelEstimator;$/;"	m	class:Rev2TVT2007System
uniquekalmanChannelEstimator	/usr/local/.home/manu/c++/comunicaciones/systems/Rev2TVT2007System.h	/^	vector<ChannelMatrixEstimator *> uniquekalmanChannelEstimator;$/;"	m	class:Rev2TVT2007System
userPersistenceProb	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    double userPersistenceProb,newActiveUserProb,userPriorProb;$/;"	m	class:CDMASystem
userPriorProb	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    double userPersistenceProb,newActiveUserProb,userPriorProb;$/;"	m	class:CDMASystem
usersActivityPdf	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    UsersActivityDistribution usersActivityPdf;    $/;"	m	class:CDMASystem
variance	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^double StatUtil::variance(const tVector &v)$/;"	f	class:StatUtil
variance	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static double variance(const tVector &v);$/;"	p	class:StatUtil
variance	/usr/local/.home/manu/c++/comunicaciones/transmision/Alphabet.h	/^        double variance() const { return _variance;}$/;"	f	class:Alphabet
variances	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.cpp	/^vector<double> Noise::variances() const$/;"	f	class:Noise
variances	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	vector<double> variances() const;$/;"	p	class:Noise
variances	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    tMatrix variances() const {return _variances;}$/;"	f	class:DelayPowerProfile
velocity	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^    double velocity; \/\/ (Km\/h)$/;"	m	class:Elsevier2007BesselChannelSystem
velocity	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    double velocity; \/\/ (Km\/h)$/;"	m	class:LMSmuTestSystem
velocity	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    double velocity; \/\/ (Km\/h)$/;"	m	class:PSPvsSMCSystem
velocity	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^	double velocity;$/;"	m	class:TVT2007System
velocity	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^    double velocity; \/\/ (Km\/h)$/;"	m	class:TesisComplejidadReducidaBesselSystem
velocity	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoBesselSystem.h	/^    double velocity; \/\/ (Km\/h)$/;"	m	class:TesisOrdenCanalDesconocidoBesselSystem
velocity	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^	double velocity;$/;"	m	class:WSA08System
verticalAppend	/usr/local/.home/manu/c++/comunicaciones/util/Util.cpp	/^tMatrix Util::verticalAppend(const tMatrix &A,const tMatrix &B)$/;"	f	class:Util
verticalAppend	/usr/local/.home/manu/c++/comunicaciones/util/Util.h	/^    static tMatrix verticalAppend(const tMatrix &A,const tMatrix &B);$/;"	p	class:Util
withoutReplacementResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm;$/;"	m	class:PSPvsPSPBasedSMCSystem
withoutReplacementResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm;$/;"	m	class:TVT2007System
withoutReplacementResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm,*multinomialResamplingAlgorithm;$/;"	m	class:TesisOrdenCanalDesconocidoSystem
withoutReplacementResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    ResamplingAlgorithm *withoutReplacementResamplingAlgorithm,*bestParticlesResamplingAlgorithm;$/;"	m	class:WSA08System
withoutReplacementSampling	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.cpp	/^vector<int> StatUtil::withoutReplacementSampling(int nSamples,const tVector &probabilities,Random &randomGenerator)$/;"	f	class:StatUtil
withoutReplacementSampling	/usr/local/.home/manu/c++/comunicaciones/statistics/StatUtil.h	/^    static vector<int> withoutReplacementSampling(int nSamples,const tVector &probabilities,Random &randomGenerator = _randomGenerator);$/;"	p	class:StatUtil
xmlFile	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    ofstream f,xmlFile;$/;"	m	class:BaseSystem
~APPbasedChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.cpp	/^APPbasedChannelOrderEstimator::~APPbasedChannelOrderEstimator()$/;"	f	class:APPbasedChannelOrderEstimator
~APPbasedChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/APPbasedChannelOrderEstimator.h	/^    ~APPbasedChannelOrderEstimator();$/;"	p	class:APPbasedChannelOrderEstimator
~ARchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.cpp	/^ARchannel::~ ARchannel()$/;"	f	class:ARchannel
~ARchannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/ARchannel.h	/^	~ARchannel();$/;"	p	class:ARchannel
~ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.cpp	/^ARprocess::~ARprocess()$/;"	f	class:ARprocess
~ARprocess	/usr/local/.home/manu/c++/comunicaciones/statistics/ARprocess.h	/^	~ARprocess();$/;"	p	class:ARprocess
~Algorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/Algorithm.h	/^    virtual ~Algorithm() {};$/;"	f	class:Algorithm
~BaseSystem	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.cpp	/^BaseSystem::~BaseSystem()$/;"	f	class:BaseSystem
~BaseSystem	/usr/local/.home/manu/c++/comunicaciones/systems/BaseSystem.h	/^    virtual ~BaseSystem();$/;"	p	class:BaseSystem
~BesselChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.cpp	/^BesselChannel::~BesselChannel()$/;"	f	class:BesselChannel
~BesselChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/BesselChannel.h	/^    ~BesselChannel();$/;"	p	class:BesselChannel
~Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.cpp	/^Bits::~Bits()$/;"	f	class:Bits
~Bits	/usr/local/.home/manu/c++/comunicaciones/transmision/Bits.h	/^    ~Bits();$/;"	p	class:Bits
~CDMASystem	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.cpp	/^CDMASystem::~CDMASystem()$/;"	f	class:CDMASystem
~CDMASystem	/usr/local/.home/manu/c++/comunicaciones/systems/CDMASystem.h	/^    ~CDMASystem();$/;"	p	class:CDMASystem
~ChannelDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.cpp	/^ChannelDependentNoise::~ChannelDependentNoise()$/;"	f	class:ChannelDependentNoise
~ChannelDependentNoise	/usr/local/.home/manu/c++/comunicaciones/transmision/ChannelDependentNoise.h	/^    ~ChannelDependentNoise();$/;"	p	class:ChannelDependentNoise
~ChannelMatrixEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelMatrixEstimator.h	/^    virtual ~ChannelMatrixEstimator() {};$/;"	f	class:ChannelMatrixEstimator
~ChannelOrderEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/ChannelOrderEstimator.h	/^    virtual ~ChannelOrderEstimator() {}$/;"	f	class:ChannelOrderEstimator
~DelayPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.cpp	/^DelayPowerProfile::~DelayPowerProfile()$/;"	f	class:DelayPowerProfile
~DelayPowerProfile	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/delayPowerProfile/DelayPowerProfile.h	/^    virtual ~DelayPowerProfile();$/;"	p	class:DelayPowerProfile
~Elsevier2007ARChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.cpp	/^Elsevier2007ARChannelSystem::~Elsevier2007ARChannelSystem()$/;"	f	class:Elsevier2007ARChannelSystem
~Elsevier2007ARChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007ARChannelSystem.h	/^    ~Elsevier2007ARChannelSystem();$/;"	p	class:Elsevier2007ARChannelSystem
~Elsevier2007BesselChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.cpp	/^Elsevier2007BesselChannelSystem::~Elsevier2007BesselChannelSystem()$/;"	f	class:Elsevier2007BesselChannelSystem
~Elsevier2007BesselChannelSystem	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007BesselChannelSystem.h	/^    ~Elsevier2007BesselChannelSystem();$/;"	p	class:Elsevier2007BesselChannelSystem
~Elsevier2007System	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.cpp	/^Elsevier2007System::~Elsevier2007System()$/;"	f	class:Elsevier2007System
~Elsevier2007System	/usr/local/.home/manu/c++/comunicaciones/systems/Elsevier2007System.h	/^    ~Elsevier2007System();$/;"	p	class:Elsevier2007System
~EstimatedMIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/EstimatedMIMOChannel.cpp	/^EstimatedMIMOChannel::~EstimatedMIMOChannel()$/;"	f	class:EstimatedMIMOChannel
~EstimatedMIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/EstimatedMIMOChannel.h	/^    ~EstimatedMIMOChannel();$/;"	p	class:EstimatedMIMOChannel
~KalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.cpp	/^KalmanEstimator::~KalmanEstimator()$/;"	f	class:KalmanEstimator
~KalmanEstimator	/usr/local/.home/manu/c++/comunicaciones/estimation/KalmanEstimator.h	/^    ~KalmanEstimator();$/;"	p	class:KalmanEstimator
~KnownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.cpp	/^KnownChannelOrderAlgorithm::~ KnownChannelOrderAlgorithm()$/;"	f	class:KnownChannelOrderAlgorithm
~KnownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownChannelOrderAlgorithm.h	/^	~KnownChannelOrderAlgorithm();$/;"	p	class:KnownChannelOrderAlgorithm
~KnownFlatChannelAndActiveUsersOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.cpp	/^KnownFlatChannelAndActiveUsersOptimalAlgorithm::~KnownFlatChannelAndActiveUsersOptimalAlgorithm()$/;"	f	class:KnownFlatChannelAndActiveUsersOptimalAlgorithm
~KnownFlatChannelAndActiveUsersOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelAndActiveUsersOptimalAlgorithm.h	/^    ~KnownFlatChannelAndActiveUsersOptimalAlgorithm();$/;"	p	class:KnownFlatChannelAndActiveUsersOptimalAlgorithm
~KnownFlatChannelOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.cpp	/^KnownFlatChannelOptimalAlgorithm::~KnownFlatChannelOptimalAlgorithm()$/;"	f	class:KnownFlatChannelOptimalAlgorithm
~KnownFlatChannelOptimalAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownFlatChannelOptimalAlgorithm.h	/^    ~KnownFlatChannelOptimalAlgorithm();$/;"	p	class:KnownFlatChannelOptimalAlgorithm
~KnownSymbolsCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.cpp	/^KnownSymbolsCMEapplyingAlgorithm::~KnownSymbolsCMEapplyingAlgorithm()$/;"	f	class:KnownSymbolsCMEapplyingAlgorithm
~KnownSymbolsCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsCMEapplyingAlgorithm.h	/^    ~KnownSymbolsCMEapplyingAlgorithm();$/;"	p	class:KnownSymbolsCMEapplyingAlgorithm
~KnownSymbolsKalmanBasedChannelEstimatorAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.cpp	/^KnownSymbolsKalmanBasedChannelEstimatorAlgorithm::~KnownSymbolsKalmanBasedChannelEstimatorAlgorithm()$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
~KnownSymbolsKalmanBasedChannelEstimatorAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/KnownSymbolsKalmanBasedChannelEstimatorAlgorithm.h	/^    ~KnownSymbolsKalmanBasedChannelEstimatorAlgorithm();$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimatorAlgorithm
~LMSmuTestSystem	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.cpp	/^LMSmuTestSystem::~LMSmuTestSystem()$/;"	f	class:LMSmuTestSystem
~LMSmuTestSystem	/usr/local/.home/manu/c++/comunicaciones/systems/LMSmuTestSystem.h	/^    ~LMSmuTestSystem();$/;"	p	class:LMSmuTestSystem
~LinearDetector	/usr/local/.home/manu/c++/comunicaciones/detection/LinearDetector.h	/^    virtual ~LinearDetector() {}$/;"	f	class:LinearDetector
~LinearFilterBasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.cpp	/^LinearFilterBasedAlgorithm::~LinearFilterBasedAlgorithm()$/;"	f	class:LinearFilterBasedAlgorithm
~LinearFilterBasedAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedAlgorithm.h	/^    ~LinearFilterBasedAlgorithm();$/;"	p	class:LinearFilterBasedAlgorithm
~LinearFilterBasedCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.cpp	/^LinearFilterBasedCMEapplyingAlgorithm::~LinearFilterBasedCMEapplyingAlgorithm()$/;"	f	class:LinearFilterBasedCMEapplyingAlgorithm
~LinearFilterBasedCMEapplyingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedCMEapplyingAlgorithm.h	/^    ~LinearFilterBasedCMEapplyingAlgorithm();$/;"	p	class:LinearFilterBasedCMEapplyingAlgorithm
~LinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^LinearFilterBasedSMCAlgorithm::~LinearFilterBasedSMCAlgorithm()$/;"	f	class:LinearFilterBasedSMCAlgorithm
~LinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/LinearFilterBasedSMCAlgorithm.h	/^    ~LinearFilterBasedSMCAlgorithm();$/;"	p	class:LinearFilterBasedSMCAlgorithm
~MIMOChannel	/usr/local/.home/manu/c++/comunicaciones/transmision/channel/MIMOChannel.h	/^    virtual ~MIMOChannel() {};$/;"	f	class:MIMOChannel
~MLSDmAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.cpp	/^MLSDmAlgorithm::~MLSDmAlgorithm()$/;"	f	class:MLSDmAlgorithm
~MLSDmAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/MLSDmAlgorithm.h	/^    ~MLSDmAlgorithm();$/;"	p	class:MLSDmAlgorithm
~Noise	/usr/local/.home/manu/c++/comunicaciones/transmision/Noise.h	/^	virtual ~Noise() {};$/;"	f	class:Noise
~PSPAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.cpp	/^PSPAlgorithm::~PSPAlgorithm()$/;"	f	class:PSPAlgorithm
~PSPAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/PSPAlgorithm.h	/^    ~PSPAlgorithm();$/;"	p	class:PSPAlgorithm
~PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.cpp	/^PSPPath::~PSPPath()$/;"	f	class:PSPPath
~PSPPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/PSPPath.h	/^    ~PSPPath();$/;"	p	class:PSPPath
~PSPvsPSPBasedSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.cpp	/^PSPvsPSPBasedSMCSystem::~PSPvsPSPBasedSMCSystem()$/;"	f	class:PSPvsPSPBasedSMCSystem
~PSPvsPSPBasedSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsPSPBasedSMCSystem.h	/^    ~PSPvsPSPBasedSMCSystem();$/;"	p	class:PSPvsPSPBasedSMCSystem
~PSPvsSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.cpp	/^PSPvsSMCSystem::~PSPvsSMCSystem()$/;"	f	class:PSPvsSMCSystem
~PSPvsSMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/PSPvsSMCSystem.h	/^    ~PSPvsSMCSystem();$/;"	p	class:PSPvsSMCSystem
~Particle	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.cpp	/^Particle::~Particle()$/;"	f	class:Particle
~Particle	/usr/local/.home/manu/c++/comunicaciones/smc/Particle.h	/^    virtual ~Particle();$/;"	p	class:Particle
~ParticleFilter	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.cpp	/^ParticleFilter::~ParticleFilter()$/;"	f	class:ParticleFilter
~ParticleFilter	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleFilter.h	/^    virtual ~ParticleFilter();$/;"	p	class:ParticleFilter
~ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation::~ParticleWithChannelEstimation()$/;"	f	class:ParticleWithChannelEstimation
~ParticleWithChannelEstimation	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimation.h	/^    ~ParticleWithChannelEstimation();$/;"	p	class:ParticleWithChannelEstimation
~ParticleWithChannelEstimationAndActiveUsers	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndActiveUsers.cpp	/^ParticleWithChannelEstimationAndActiveUsers::~ParticleWithChannelEstimationAndActiveUsers()$/;"	f	class:ParticleWithChannelEstimationAndActiveUsers
~ParticleWithChannelEstimationAndActiveUsers	/usr/local/.home/manu/c++/comunicaciones/smc/ParticleWithChannelEstimationAndActiveUsers.h	/^    ~ParticleWithChannelEstimationAndActiveUsers();$/;"	p	class:ParticleWithChannelEstimationAndActiveUsers
~ResamplingAlgorithm	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/ResamplingAlgorithm.h	/^	virtual ~ResamplingAlgorithm() {}$/;"	f	class:ResamplingAlgorithm
~SMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.cpp	/^SMCAlgorithm::~SMCAlgorithm()$/;"	f	class:SMCAlgorithm
~SMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/SMCAlgorithm.h	/^    ~SMCAlgorithm();$/;"	p	class:SMCAlgorithm
~SMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.cpp	/^SMCSystem::~SMCSystem()$/;"	f	class:SMCSystem
~SMCSystem	/usr/local/.home/manu/c++/comunicaciones/systems/SMCSystem.h	/^    ~SMCSystem();$/;"	p	class:SMCSystem
~TVT2007System	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.cpp	/^TVT2007System::~TVT2007System()$/;"	f	class:TVT2007System
~TVT2007System	/usr/local/.home/manu/c++/comunicaciones/systems/TVT2007System.h	/^    ~TVT2007System();$/;"	p	class:TVT2007System
~TesisComplejidadReducidaARSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.cpp	/^TesisComplejidadReducidaARSystem::~TesisComplejidadReducidaARSystem()$/;"	f	class:TesisComplejidadReducidaARSystem
~TesisComplejidadReducidaARSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaARSystem.h	/^    ~TesisComplejidadReducidaARSystem();$/;"	p	class:TesisComplejidadReducidaARSystem
~TesisComplejidadReducidaBesselSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.cpp	/^TesisComplejidadReducidaBesselSystem::~TesisComplejidadReducidaBesselSystem()$/;"	f	class:TesisComplejidadReducidaBesselSystem
~TesisComplejidadReducidaBesselSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaBesselSystem.h	/^    ~TesisComplejidadReducidaBesselSystem();$/;"	p	class:TesisComplejidadReducidaBesselSystem
~TesisComplejidadReducidaSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.cpp	/^TesisComplejidadReducidaSystem::~TesisComplejidadReducidaSystem()$/;"	f	class:TesisComplejidadReducidaSystem
~TesisComplejidadReducidaSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisComplejidadReducidaSystem.h	/^    ~TesisComplejidadReducidaSystem();$/;"	p	class:TesisComplejidadReducidaSystem
~TesisOrdenCanalDesconocidoSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.cpp	/^TesisOrdenCanalDesconocidoSystem::~TesisOrdenCanalDesconocidoSystem()$/;"	f	class:TesisOrdenCanalDesconocidoSystem
~TesisOrdenCanalDesconocidoSystem	/usr/local/.home/manu/c++/comunicaciones/systems/TesisOrdenCanalDesconocidoSystem.h	/^    ~TesisOrdenCanalDesconocidoSystem();$/;"	p	class:TesisOrdenCanalDesconocidoSystem
~TransitionCriterion	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/TransitionCriterion.h	/^    virtual ~TransitionCriterion() {}$/;"	f	class:TransitionCriterion
~Trellis	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.cpp	/^Trellis::~Trellis()$/;"	f	class:Trellis
~Trellis	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/Trellis.h	/^    ~Trellis();$/;"	p	class:Trellis
~USIS	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.cpp	/^USIS::~USIS()$/;"	f	class:USIS
~USIS	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS.h	/^    ~USIS();$/;"	p	class:USIS
~USIS2SISAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.cpp	/^USIS2SISAlgorithm::~USIS2SISAlgorithm()$/;"	f	class:USIS2SISAlgorithm
~USIS2SISAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/USIS2SIS/USIS2SISAlgorithm.h	/^    ~USIS2SISAlgorithm();$/;"	p	class:USIS2SISAlgorithm
~UnknownActiveUsersLinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.cpp	/^UnknownActiveUsersLinearFilterBasedSMCAlgorithm::~UnknownActiveUsersLinearFilterBasedSMCAlgorithm()$/;"	f	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
~UnknownActiveUsersLinearFilterBasedSMCAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownActiveUsersLinearFilterBasedSMCAlgorithm.h	/^    ~UnknownActiveUsersLinearFilterBasedSMCAlgorithm();$/;"	p	class:UnknownActiveUsersLinearFilterBasedSMCAlgorithm
~UnknownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.cpp	/^UnknownChannelOrderAlgorithm::~UnknownChannelOrderAlgorithm()$/;"	f	class:UnknownChannelOrderAlgorithm
~UnknownChannelOrderAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/UnknownChannelOrderAlgorithm.h	/^    ~UnknownChannelOrderAlgorithm();$/;"	p	class:UnknownChannelOrderAlgorithm
~ViterbiAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.cpp	/^ViterbiAlgorithm::~ViterbiAlgorithm()$/;"	f	class:ViterbiAlgorithm
~ViterbiAlgorithm	/usr/local/.home/manu/c++/comunicaciones/algorithms/ViterbiAlgorithm.h	/^    ~ViterbiAlgorithm();$/;"	p	class:ViterbiAlgorithm
~ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.cpp	/^ViterbiPath::~ViterbiPath()$/;"	f	class:ViterbiPath
~ViterbiPath	/usr/local/.home/manu/c++/comunicaciones/detection/trellis/ViterbiPath.h	/^    virtual ~ViterbiPath();$/;"	p	class:ViterbiPath
~WSA08System	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.cpp	/^WSA08System::~WSA08System()$/;"	f	class:WSA08System
~WSA08System	/usr/local/.home/manu/c++/comunicaciones/systems/WSA08System.h	/^    ~WSA08System();$/;"	p	class:WSA08System
~WithChannelOrderEstimationParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.cpp	/^WithChannelOrderEstimationParticleAddon::~WithChannelOrderEstimationParticleAddon()$/;"	f	class:WithChannelOrderEstimationParticleAddon
~WithChannelOrderEstimationParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithChannelOrderEstimationParticleAddon.h	/^    ~WithChannelOrderEstimationParticleAddon();$/;"	p	class:WithChannelOrderEstimationParticleAddon
~WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.cpp	/^WithLinearDetectionParticleAddon::~WithLinearDetectionParticleAddon()$/;"	f	class:WithLinearDetectionParticleAddon
~WithLinearDetectionParticleAddon	/usr/local/.home/manu/c++/comunicaciones/smc/WithLinearDetectionParticleAddon.h	/^    ~WithLinearDetectionParticleAddon();$/;"	p	class:WithLinearDetectionParticleAddon
~WithThresholdResamplingAlgorithmWrapper	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.cpp	/^WithThresholdResamplingAlgorithmWrapper::~WithThresholdResamplingAlgorithmWrapper()$/;"	f	class:WithThresholdResamplingAlgorithmWrapper
~WithThresholdResamplingAlgorithmWrapper	/usr/local/.home/manu/c++/comunicaciones/smc/resampling/WithThresholdResamplingAlgorithmWrapper.h	/^    ~WithThresholdResamplingAlgorithmWrapper();$/;"	p	class:WithThresholdResamplingAlgorithmWrapper
