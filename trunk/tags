!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ALGORITHM_H	algorithms/Algorithm.h	/^#define ALGORITHM_H$/;"	d
ALPHABET_H	transmision/Alphabet.h	/^#define ALPHABET_H$/;"	d
ARCHANNEL_H	transmision/ARchannel.h	/^#define ARCHANNEL_H$/;"	d
ARPROCESS_H	statistics/ARprocess.h	/^#define ARPROCESS_H$/;"	d
ARchannel	transmision/ARchannel.cpp	/^ARchannel::ARchannel(const ARchannel &archannel):MIMOChannel(archannel),_ARproc(archannel._ARproc),_channelMatrices(new tMatrix[_length])$/;"	f	class:ARchannel
ARchannel	transmision/ARchannel.cpp	/^ARchannel::ARchannel(int nTx, int nRx, int memory, int length,double mean,double variance,vector<double> ARcoefficients,double ARvariance,Random randomGenerator): MIMOChannel(nTx, nRx, memory, length),$/;"	f	class:ARchannel
ARchannel	transmision/ARchannel.cpp	/^ARchannel::~ ARchannel()$/;"	f
ARchannel	transmision/ARchannel.h	/^	ARchannel(const ARchannel &archannel);$/;"	p	class:ARchannel
ARchannel	transmision/ARchannel.h	/^    ARchannel(int nTx, int nRx, int memory, int length,double mean,double variance,vector<double> ARcoefficients,double ARvariance,Random randomGenerator =  Random(0));$/;"	p	class:ARchannel
ARchannel	transmision/ARchannel.h	/^class ARchannel : public MIMOChannel$/;"	c
ARprocess	statistics/ARprocess.cpp	/^ARprocess::ARprocess(const ARprocess &arprocess):_coefficients(arprocess._coefficients),_noiseVariance(arprocess._noiseVariance),_noiseMean(arprocess._noiseMean),_nCoefficients(arprocess._nCoefficients),_rows(arprocess._rows),_columns(arprocess._columns),_iNextMatrix(arprocess._iNextMatrix),_iterationsForConvergence(arprocess._iterationsForConvergence),_buffer(new tMatrix*[_nCoefficients]),_randomGenerator(arprocess._randomGenerator)$/;"	f	class:ARprocess
ARprocess	statistics/ARprocess.cpp	/^ARprocess::ARprocess(tMatrix seed,vector<double> coefficients,double noiseVariance,Random randomGenerator):_coefficients(coefficients),_noiseVariance(noiseVariance),_noiseMean(0),_rows(seed.rows()),_columns(seed.cols()),_nCoefficients(coefficients.size()),_buffer(new tMatrix*[_nCoefficients]),_iterationsForConvergence(200),_randomGenerator(randomGenerator)$/;"	f	class:ARprocess
ARprocess	statistics/ARprocess.h	/^	ARprocess(const ARprocess &arprocess);$/;"	p	class:ARprocess
ARprocess	statistics/ARprocess.h	/^	ARprocess(tMatrix seed,vector<double> coefficients,double noiseVariance,Random randomGenerator = Random(0));$/;"	p	class:ARprocess
ARprocess	statistics/ARprocess.h	/^class ARprocess{$/;"	c
Add	util/Util.cpp	/^void Util::Add(const tMatrix& A,const tMatrix& B,tMatrix& C,double alpha,double beta)$/;"	f	class:Util
Add	util/Util.cpp	/^void Util::Add(const tVector &a,const tVector &b,tVector &c,double alpha,double beta)$/;"	f	class:Util
Add	util/Util.h	/^	static void Add(const tMatrix &A,const tMatrix &B,tMatrix &C,double = 1.0,double = 1.0);$/;"	p	class:Util
Add	util/Util.h	/^	static void Add(const tVector &a,const tVector &b,tVector &c,double = 1.0,double = 1.0);$/;"	p	class:Util
Algorithm	algorithms/Algorithm.cpp	/^Algorithm::Algorithm(string name, Alphabet  alphabet,int L,int N,int K):_name(name),_alphabet(alphabet),_L(L),_N(N),_K(K)$/;"	f	class:Algorithm
Algorithm	algorithms/Algorithm.h	/^    Algorithm(string name, Alphabet  alphabet,int L,int N, int K);$/;"	p	class:Algorithm
Algorithm	algorithms/Algorithm.h	/^class Algorithm{$/;"	c
AllElementsNullException	util/utilExceptions.h	/^		AllElementsNullException(string s) : runtime_error(s) { }$/;"	f	class:AllElementsNullException
AllElementsNullException	util/utilExceptions.h	/^class AllElementsNullException : public runtime_error$/;"	c
Alphabet	transmision/Alphabet.cpp	/^Alphabet::Alphabet(int nBitsPorSimbolo,int longitudAlphabet,vector<vector<tBit> > secuenciasBits,vector<tSymbol> simbolos)$/;"	f	class:Alphabet
Alphabet	transmision/Alphabet.h	/^		Alphabet(int nBitsPorSimbolo,int longitudAlphabet,std::vector<std::vector<tBit> > secuenciasBits,std::vector<tSymbol> simbolos);$/;"	p	class:Alphabet
Alphabet	transmision/Alphabet.h	/^class Alphabet$/;"	c
Append	util/Util.cpp	/^tMatrix Util::Append(const tMatrix &A,const tMatrix &B)$/;"	f	class:Util
Append	util/Util.h	/^	static tMatrix Append(const tMatrix &A,const tMatrix &B);$/;"	p	class:Util
BITS_H	transmision/Bits.h	/^#define BITS_H$/;"	d
BYCHANNELORDERRESAMPLINGALGORITHM_H	smc/ByChannelOrderResamplingAlgorithm.h	/^#define BYCHANNELORDERRESAMPLINGALGORITHM_H$/;"	d
BestParticle	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    int BestParticle();$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
BestParticle	algorithms/UnknownChannelOrderSMCAlgorithm.cpp	/^int UnknownChannelOrderSMCAlgorithm::BestParticle()$/;"	f	class:UnknownChannelOrderSMCAlgorithm
BestParticle	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	int BestParticle();$/;"	p	class:UnknownChannelOrderSMCAlgorithm
BestState	algorithms/ViterbiAlgorithm.h	/^    int BestState()$/;"	f	class:ViterbiAlgorithm
Bits	transmision/Bits.cpp	/^Bits::Bits()$/;"	f	class:Bits
Bits	transmision/Bits.cpp	/^Bits::Bits(const Bits& bits):$/;"	f	class:Bits
Bits	transmision/Bits.cpp	/^Bits::Bits(int nStreams, int nBitsByStream,Random randomGenerator)$/;"	f	class:Bits
Bits	transmision/Bits.cpp	/^Bits::Bits(tBit *matrix,int nStreams,int nBitsByStream): nStreams(nStreams),nBitsByStream(nBitsByStream),matrix(matrix)$/;"	f	class:Bits
Bits	transmision/Bits.h	/^	Bits();$/;"	p	class:Bits
Bits	transmision/Bits.h	/^	Bits(const Bits& bits);$/;"	p	class:Bits
Bits	transmision/Bits.h	/^	Bits(int nStreams, int nBitsByStream,Random randomGenerator = Random(0));$/;"	p	class:Bits
Bits	transmision/Bits.h	/^	Bits(tBit *matrix,int nStreams,int nBitsByStream);$/;"	p	class:Bits
Bits	transmision/Bits.h	/^class Bits{$/;"	c
BuildStateTransitionMatrix	algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::BuildStateTransitionMatrix()$/;"	f	class:ViterbiAlgorithm
BuildStateTransitionMatrix	algorithms/ViterbiAlgorithm.h	/^    void BuildStateTransitionMatrix();$/;"	p	class:ViterbiAlgorithm
ByChannelOrderResamplingAlgorithm	smc/ByChannelOrderResamplingAlgorithm.cpp	/^ByChannelOrderResamplingAlgorithm::ByChannelOrderResamplingAlgorithm(ResamplingCriterion resamplingCriterion): ResamplingAlgorithm(resamplingCriterion)$/;"	f	class:ByChannelOrderResamplingAlgorithm
ByChannelOrderResamplingAlgorithm	smc/ByChannelOrderResamplingAlgorithm.h	/^    ByChannelOrderResamplingAlgorithm(ResamplingCriterion resamplingCriterion);$/;"	p	class:ByChannelOrderResamplingAlgorithm
ByChannelOrderResamplingAlgorithm	smc/ByChannelOrderResamplingAlgorithm.h	/^class ByChannelOrderResamplingAlgorithm : public ResamplingAlgorithm$/;"	c
CHANNELDEPENDENTNOISE_H	transmision/ChannelDependentNoise.h	/^#define CHANNELDEPENDENTNOISE_H$/;"	d
CHANNELMATRIXESTIMATOR_H	estimation/ChannelMatrixEstimator.h	/^#define CHANNELMATRIXESTIMATOR_H$/;"	d
ChannelDependentNoise	transmision/ChannelDependentNoise.cpp	/^ChannelDependentNoise::ChannelDependentNoise(MIMOChannel *channel)$/;"	f	class:ChannelDependentNoise
ChannelDependentNoise	transmision/ChannelDependentNoise.cpp	/^ChannelDependentNoise::ChannelDependentNoise(const ChannelDependentNoise &channelDependentNoise):Noise(channelDependentNoise),_channel(channelDependentNoise._channel),_stdDevs(new double[_length])$/;"	f	class:ChannelDependentNoise
ChannelDependentNoise	transmision/ChannelDependentNoise.h	/^    ChannelDependentNoise(MIMOChannel *channel);$/;"	p	class:ChannelDependentNoise
ChannelDependentNoise	transmision/ChannelDependentNoise.h	/^    ChannelDependentNoise(const ChannelDependentNoise &channelDependentNoise);$/;"	p	class:ChannelDependentNoise
ChannelDependentNoise	transmision/ChannelDependentNoise.h	/^class ChannelDependentNoise : public Noise$/;"	c
ChannelMatrixEstimator	estimation/ChannelMatrixEstimator.cpp	/^ChannelMatrixEstimator::ChannelMatrixEstimator(tMatrix initialEstimation):_lastEstimatedChannelMatrix(initialEstimation),_L(initialEstimation.rows()),_Nm(initialEstimation.cols())$/;"	f	class:ChannelMatrixEstimator
ChannelMatrixEstimator	estimation/ChannelMatrixEstimator.h	/^    ChannelMatrixEstimator(tMatrix initialEstimation);$/;"	p	class:ChannelMatrixEstimator
ChannelMatrixEstimator	estimation/ChannelMatrixEstimator.h	/^class ChannelMatrixEstimator{$/;"	c
Clone	detection/LinearDetector.h	/^	virtual LinearDetector *Clone() = 0;$/;"	p	class:LinearDetector
Clone	detection/RMMSEDetector.cpp	/^RMMSEDetector *RMMSEDetector::Clone()$/;"	f	class:RMMSEDetector
Clone	detection/RMMSEDetector.h	/^	RMMSEDetector *Clone();$/;"	p	class:RMMSEDetector
Clone	estimation/ChannelMatrixEstimator.h	/^	virtual ChannelMatrixEstimator *Clone() = 0;$/;"	p	class:ChannelMatrixEstimator
Clone	estimation/KalmanEstimator.cpp	/^KalmanEstimator *KalmanEstimator::Clone()$/;"	f	class:KalmanEstimator
Clone	estimation/KalmanEstimator.h	/^	KalmanEstimator *Clone();$/;"	p	class:KalmanEstimator
Clone	estimation/LMSEstimator.cpp	/^LMSEstimator* LMSEstimator::Clone()$/;"	f	class:LMSEstimator
Clone	estimation/LMSEstimator.h	/^    virtual LMSEstimator* Clone();$/;"	p	class:LMSEstimator
Clone	estimation/RLSEstimator.cpp	/^ChannelMatrixEstimator* RLSEstimator::Clone()$/;"	f	class:RLSEstimator
Clone	estimation/RLSEstimator.h	/^    virtual ChannelMatrixEstimator* Clone();$/;"	p	class:RLSEstimator
Clone	smc/Particle.cpp	/^Particle *Particle::Clone()$/;"	f	class:Particle
Clone	smc/Particle.h	/^	virtual Particle *Clone();$/;"	p	class:Particle
Clone	smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation *ParticleWithChannelEstimation::Clone()$/;"	f	class:ParticleWithChannelEstimation
Clone	smc/ParticleWithChannelEstimation.h	/^	ParticleWithChannelEstimation *Clone();$/;"	p	class:ParticleWithChannelEstimation
Clone	smc/ParticleWithChannelEstimationAndChannelOrder.cpp	/^ParticleWithChannelEstimationAndChannelOrder* ParticleWithChannelEstimationAndChannelOrder::Clone()$/;"	f	class:ParticleWithChannelEstimationAndChannelOrder
Clone	smc/ParticleWithChannelEstimationAndChannelOrder.h	/^    ParticleWithChannelEstimationAndChannelOrder* Clone();$/;"	p	class:ParticleWithChannelEstimationAndChannelOrder
Clone	smc/ParticleWithChannelEstimationAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndChannelOrderAPP *ParticleWithChannelEstimationAndChannelOrderAPP::Clone()$/;"	f	class:ParticleWithChannelEstimationAndChannelOrderAPP
Clone	smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^	ParticleWithChannelEstimationAndChannelOrderAPP *Clone();$/;"	p	class:ParticleWithChannelEstimationAndChannelOrderAPP
Clone	smc/ParticleWithChannelEstimationAndLinearDetection.cpp	/^ParticleWithChannelEstimationAndLinearDetection *ParticleWithChannelEstimationAndLinearDetection::Clone()$/;"	f	class:ParticleWithChannelEstimationAndLinearDetection
Clone	smc/ParticleWithChannelEstimationAndLinearDetection.h	/^	ParticleWithChannelEstimationAndLinearDetection *Clone();$/;"	p	class:ParticleWithChannelEstimationAndLinearDetection
Clone	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP *ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP::Clone()$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP
Clone	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.h	/^    ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP *Clone();$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP
Cols	estimation/ChannelMatrixEstimator.h	/^	int Cols() { return _Nm;}$/;"	f	class:ChannelMatrixEstimator
ComputedFilter	detection/LinearDetector.h	/^	virtual tMatrix ComputedFilter() = 0;$/;"	p	class:LinearDetector
ComputedFilter	detection/RMMSEDetector.h	/^	tMatrix ComputedFilter() { return _filter;}$/;"	f	class:RMMSEDetector
DEMODULATOR_H	transmision/Demodulator.h	/^#define DEMODULATOR_H$/;"	d
Demodulate	transmision/Demodulator.cpp	/^Bits Demodulator::Demodulate(const tMatrix &symbols,Alphabet alphabet)$/;"	f	class:Demodulator
Demodulate	transmision/Demodulator.h	/^	static Bits Demodulate(const tMatrix &simbolos,Alphabet alfabeto);$/;"	p	class:Demodulator
Demodulator	transmision/Demodulator.cpp	/^Demodulator::Demodulator()$/;"	f	class:Demodulator
Demodulator	transmision/Demodulator.h	/^    Demodulator();$/;"	p	class:Demodulator
Demodulator	transmision/Demodulator.h	/^class Demodulator{$/;"	c
DeployState	algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::DeployState(int iState,const tVector &observations,const tMatrix &channelMatrix)$/;"	f	class:ViterbiAlgorithm
DeployState	algorithms/ViterbiAlgorithm.h	/^    void DeployState(int iState,const tVector &observations,const tMatrix &channelMatrix);$/;"	p	class:ViterbiAlgorithm
Detect	detection/LinearDetector.h	/^	virtual tVector Detect(tVector observations,tMatrix channelMatrix) = 0;$/;"	p	class:LinearDetector
Detect	detection/RMMSEDetector.cpp	/^tVector RMMSEDetector::Detect(tVector observations, tMatrix channelMatrix)$/;"	f	class:RMMSEDetector
Detect	detection/RMMSEDetector.h	/^    tVector Detect(tVector observations, tMatrix channelMatrix);$/;"	p	class:RMMSEDetector
DifferentialDecoding	transmision/Bits.cpp	/^Bits Bits::DifferentialDecoding()$/;"	f	class:Bits
DifferentialDecoding	transmision/Bits.h	/^	Bits DifferentialDecoding();$/;"	p	class:Bits
DifferentialEncoding	transmision/Bits.cpp	/^Bits Bits::DifferentialEncoding()$/;"	f	class:Bits
DifferentialEncoding	transmision/Bits.h	/^	Bits DifferentialEncoding();$/;"	p	class:Bits
Discrete_rnd	statistics/StatUtil.cpp	/^vector<int> StatUtil::Discrete_rnd(int nSamples, tVector probabilities)$/;"	f	class:StatUtil
Discrete_rnd	statistics/StatUtil.h	/^    static vector<int> Discrete_rnd(int nSamples, tVector probabilities);$/;"	p	class:StatUtil
EXCEPCIONESTRANSMISION_H	src/exceptions.h	/^#define EXCEPCIONESTRANSMISION_H$/;"	d
EXCEPCIONESTRANSMISION_H	transmision/exceptions.h	/^#define EXCEPCIONESTRANSMISION_H$/;"	d
FillFfromSymbolsMatrix	estimation/KalmanEstimator.cpp	/^void KalmanEstimator::FillFfromSymbolsMatrix(const tMatrix &symbolsMatrix)$/;"	f	class:KalmanEstimator
FillFfromSymbolsMatrix	estimation/KalmanEstimator.h	/^	void FillFfromSymbolsMatrix(const tMatrix &symbolsMatrix);$/;"	p	class:KalmanEstimator
FilteredCovariance	filters/KalmanFilter.h	/^	tMatrix FilteredCovariance() {return _filteredCovariance;}$/;"	f	class:KalmanFilter
FilteredMean	filters/KalmanFilter.h	/^	tVector FilteredMean() {return _filteredMean;}$/;"	f	class:KalmanFilter
GetAllSymbolVectors	smc/Particle.h	/^	tMatrix GetAllSymbolVectors() { return _symbolVectors;}$/;"	f	class:Particle
GetChannelMatrix	smc/ParticleWithChannelEstimation.h	/^	tMatrix GetChannelMatrix(int n) { return _estimatedChannelMatrices[0][n];}$/;"	f	class:ParticleWithChannelEstimation
GetChannelMatrix	smc/ParticleWithChannelEstimation.h	/^    tMatrix GetChannelMatrix(int iChannelOrder,int n) { return _estimatedChannelMatrices[iChannelOrder][n];}$/;"	f	class:ParticleWithChannelEstimation
GetChannelMatrixEstimator	smc/ParticleWithChannelEstimation.h	/^	ChannelMatrixEstimator *GetChannelMatrixEstimator() { return _channelMatrixEstimators[0];}$/;"	f	class:ParticleWithChannelEstimation
GetChannelMatrixEstimator	smc/ParticleWithChannelEstimation.h	/^    ChannelMatrixEstimator *GetChannelMatrixEstimator(int iChannelOrder) { return _channelMatrixEstimators[iChannelOrder];}$/;"	f	class:ParticleWithChannelEstimation
GetChannelOrder	smc/WithChannelOrderParticleAddon.h	/^	int GetChannelOrder(){ return _m;}$/;"	f	class:WithChannelOrderParticleAddon
GetChannelOrderAPP	smc/WithChannelOrderAppParticleAddon.h	/^	double GetChannelOrderAPP(int n) { return _channelOrderAPP[n];}$/;"	f	class:WithChannelOrderAppParticleAddon
GetDetectedSymbolVectors	algorithms/Algorithm.h	/^    virtual tMatrix GetDetectedSymbolVectors() = 0;$/;"	p	class:Algorithm
GetDetectedSymbolVectors	algorithms/KnownSymbolsKalmanBasedChannelEstimator.cpp	/^tMatrix KnownSymbolsKalmanBasedChannelEstimator::GetDetectedSymbolVectors()$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimator
GetDetectedSymbolVectors	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^    tMatrix GetDetectedSymbolVectors();$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimator
GetDetectedSymbolVectors	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^tMatrix MultipleChannelEstimatorsPerParticleSMCAlgorithm::GetDetectedSymbolVectors()$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
GetDetectedSymbolVectors	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    tMatrix GetDetectedSymbolVectors();$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
GetDetectedSymbolVectors	algorithms/SMCAlgorithm.cpp	/^tMatrix SMCAlgorithm::GetDetectedSymbolVectors()$/;"	f	class:SMCAlgorithm
GetDetectedSymbolVectors	algorithms/SMCAlgorithm.h	/^    tMatrix GetDetectedSymbolVectors();$/;"	p	class:SMCAlgorithm
GetDetectedSymbolVectors	algorithms/UnknownChannelOrderSMCAlgorithm.cpp	/^tMatrix UnknownChannelOrderSMCAlgorithm::GetDetectedSymbolVectors()$/;"	f	class:UnknownChannelOrderSMCAlgorithm
GetDetectedSymbolVectors	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	tMatrix GetDetectedSymbolVectors();$/;"	p	class:UnknownChannelOrderSMCAlgorithm
GetDetectedSymbolVectors	algorithms/ViterbiAlgorithm.cpp	/^tMatrix ViterbiAlgorithm::GetDetectedSymbolVectors()$/;"	f	class:ViterbiAlgorithm
GetDetectedSymbolVectors	algorithms/ViterbiAlgorithm.h	/^    tMatrix GetDetectedSymbolVectors();$/;"	p	class:ViterbiAlgorithm
GetEstimatedChannelMatrices	algorithms/Algorithm.h	/^    virtual vector<tMatrix> GetEstimatedChannelMatrices() = 0;$/;"	p	class:Algorithm
GetEstimatedChannelMatrices	algorithms/KnownChannelAlgorithm.cpp	/^vector<tMatrix> KnownChannelAlgorithm::GetEstimatedChannelMatrices()$/;"	f	class:KnownChannelAlgorithm
GetEstimatedChannelMatrices	algorithms/KnownChannelAlgorithm.h	/^    vector<tMatrix> GetEstimatedChannelMatrices();$/;"	p	class:KnownChannelAlgorithm
GetEstimatedChannelMatrices	algorithms/KnownSymbolsKalmanBasedChannelEstimator.cpp	/^vector<tMatrix> KnownSymbolsKalmanBasedChannelEstimator::GetEstimatedChannelMatrices()$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimator
GetEstimatedChannelMatrices	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^    vector<tMatrix> GetEstimatedChannelMatrices();$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimator
GetEstimatedChannelMatrices	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^vector<tMatrix> MultipleChannelEstimatorsPerParticleSMCAlgorithm::GetEstimatedChannelMatrices()$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
GetEstimatedChannelMatrices	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    vector<tMatrix> GetEstimatedChannelMatrices();$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
GetEstimatedChannelMatrices	algorithms/SMCAlgorithm.cpp	/^vector<tMatrix> SMCAlgorithm::GetEstimatedChannelMatrices()$/;"	f	class:SMCAlgorithm
GetEstimatedChannelMatrices	algorithms/SMCAlgorithm.h	/^    vector<tMatrix> GetEstimatedChannelMatrices();$/;"	p	class:SMCAlgorithm
GetEstimatedChannelMatrices	algorithms/UnknownChannelOrderSMCAlgorithm.cpp	/^vector<tMatrix> UnknownChannelOrderSMCAlgorithm::GetEstimatedChannelMatrices()$/;"	f	class:UnknownChannelOrderSMCAlgorithm
GetEstimatedChannelMatrices	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	vector<tMatrix> GetEstimatedChannelMatrices();$/;"	p	class:UnknownChannelOrderSMCAlgorithm
GetIndexesOfChannelOrders	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	vector<vector<int> > GetIndexesOfChannelOrders();$/;"	p	class:UnknownChannelOrderSMCAlgorithm
GetIndexesOfChannelOrders	smc/ParticleFilterWithChannelOrder.cpp	/^vector<vector<int> > ParticleFilterWithChannelOrder::GetIndexesOfChannelOrders()$/;"	f	class:ParticleFilterWithChannelOrder
GetIndexesOfChannelOrders	smc/ParticleFilterWithChannelOrder.h	/^    vector<vector<int> > GetIndexesOfChannelOrders();$/;"	p	class:ParticleFilterWithChannelOrder
GetLinearDetector	smc/WithLinearDetectionParticleAddon.h	/^	LinearDetector *GetLinearDetector() { return _linearDetectors[0];}$/;"	f	class:WithLinearDetectionParticleAddon
GetLinearDetector	smc/WithLinearDetectionParticleAddon.h	/^    LinearDetector *GetLinearDetector(int n) { return _linearDetectors[n];}$/;"	f	class:WithLinearDetectionParticleAddon
GetName	algorithms/Algorithm.h	/^    string GetName() {return _name;}$/;"	f	class:Algorithm
GetParticle	smc/ParticleFilter.h	/^	ParticleWithChannelEstimation *GetParticle(int n) { return _particles[n];}$/;"	f	class:ParticleFilter
GetParticleFilterPointer	algorithms/ISIR.h	/^    virtual ParticleFilter* GetParticleFilterPointer() {return &_particleFilter;}$/;"	f	class:ISIR
GetParticleFilterPointer	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    virtual ParticleFilter* GetParticleFilterPointer() {return &_particleFilter;}$/;"	f	class:LinearFilterBasedISIRAlgorithm
GetParticleFilterPointer	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^	ParticleFilter* GetParticleFilterPointer() {return &_particleFilter;}$/;"	f	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
GetParticleFilterPointer	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^	virtual ParticleFilter* GetParticleFilterPointer() = 0;$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
GetParticleFilterPointer	algorithms/SampledChannelOrderSMCAlgorithm.h	/^    virtual ParticleFilter* GetParticleFilterPointer() {return &_particleFilter;}$/;"	f	class:SampledChannelOrderSMCAlgorithm
GetSymbolVector	smc/Particle.h	/^	tVector GetSymbolVector(int n) { return _symbolVectors.col(n);}$/;"	f	class:Particle
GetSymbolVectors	smc/Particle.h	/^	tMatrix GetSymbolVectors(const tRange &range) { return _symbolVectors(_rAllSymbolRows,range);}$/;"	f	class:Particle
GetSymbolVectors	smc/Particle.h	/^	tMatrix GetSymbolVectors(int a,int b) { return _symbolVectors(_rAllSymbolRows,tRange(a,b));}$/;"	f	class:Particle
GetWeight	smc/Particle.h	/^	double GetWeight() { return _weight;}$/;"	f	class:Particle
GetWeightsVector	smc/ParticleFilter.h	/^    tVector GetWeightsVector() $/;"	f	class:ParticleFilter
HAVE_DLFCN_H	optimized/config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_INTTYPES_H	optimized/config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_MEMORY_H	optimized/config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_STDINT_H	optimized/config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDLIB_H	optimized/config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRINGS_H	optimized/config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRING_H	optimized/config.h	/^#define HAVE_STRING_H /;"	d
HAVE_SYS_STAT_H	optimized/config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_TYPES_H	optimized/config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_UNISTD_H	optimized/config.h	/^#define HAVE_UNISTD_H /;"	d
HOSTNAME_LENGTH	com/com.cpp	/^#define HOSTNAME_LENGTH /;"	d	file:
HsToStackedH	algorithms/Algorithm.cpp	/^tMatrix Algorithm::HsToStackedH(vector<tMatrix> matrices,int m)$/;"	f	class:Algorithm
HsToStackedH	algorithms/Algorithm.h	/^	tMatrix HsToStackedH(vector<tMatrix> matrices,int m);$/;"	p	class:Algorithm
HsToStackedH	algorithms/KnownChannelOrderAlgorithm.h	/^	tMatrix HsToStackedH(vector<tMatrix> matrices) { return HsToStackedH(matrices,_m);}$/;"	f	class:KnownChannelOrderAlgorithm
HsToStackedH	src/pruebas.cpp	/^tMatrix HsToStackedH(vector<tMatrix> matrices,int m)$/;"	f
ISIR	algorithms/ISIR.cpp	/^ISIR::ISIR(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm): MultipleChannelEstimatorsPerParticleSMCAlgorithm(name, alphabet, L, N, K, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm),_particleFilter(nParticles)$/;"	f	class:ISIR
ISIR	algorithms/ISIR.h	/^    ISIR(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm);$/;"	p	class:ISIR
ISIR	algorithms/ISIR.h	/^class ISIR : public MultipleChannelEstimatorsPerParticleSMCAlgorithm$/;"	c
ISIR_H	algorithms/ISIR.h	/^#define ISIR_H$/;"	d
IndexFromChannelOrder	smc/ParticleFilterWithChannelOrder.h	/^	int IndexFromChannelOrder(const int& m)$/;"	f	class:ParticleFilterWithChannelOrder
InitializeParticles	algorithms/ISIR.cpp	/^void ISIR::InitializeParticles()$/;"	f	class:ISIR
InitializeParticles	algorithms/ISIR.h	/^    virtual void InitializeParticles();$/;"	p	class:ISIR
InitializeParticles	algorithms/LinearFilterBasedISIRAlgorithm.cpp	/^void LinearFilterBasedISIRAlgorithm::InitializeParticles()$/;"	f	class:LinearFilterBasedISIRAlgorithm
InitializeParticles	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    virtual void InitializeParticles();$/;"	p	class:LinearFilterBasedISIRAlgorithm
InitializeParticles	algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^void LinearFilterBasedSMCAlgorithm::InitializeParticles()$/;"	f	class:LinearFilterBasedSMCAlgorithm
InitializeParticles	algorithms/LinearFilterBasedSMCAlgorithm.h	/^	void InitializeParticles();$/;"	p	class:LinearFilterBasedSMCAlgorithm
InitializeParticles	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^void ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm::InitializeParticles()$/;"	f	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
InitializeParticles	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual void InitializeParticles();$/;"	p	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
InitializeParticles	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual void InitializeParticles() = 0;$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
InitializeParticles	algorithms/SMCAlgorithm.cpp	/^void SMCAlgorithm::InitializeParticles()$/;"	f	class:SMCAlgorithm
InitializeParticles	algorithms/SMCAlgorithm.h	/^    virtual void InitializeParticles();$/;"	p	class:SMCAlgorithm
InitializeParticles	algorithms/SampledChannelOrderSMCAlgorithm.cpp	/^void SampledChannelOrderSMCAlgorithm::InitializeParticles()$/;"	f	class:SampledChannelOrderSMCAlgorithm
InitializeParticles	algorithms/SampledChannelOrderSMCAlgorithm.h	/^    virtual void InitializeParticles();$/;"	p	class:SampledChannelOrderSMCAlgorithm
InitializeParticles	algorithms/UnknownChannelOrderSMCAlgorithm.cpp	/^void UnknownChannelOrderSMCAlgorithm::InitializeParticles()$/;"	f	class:UnknownChannelOrderSMCAlgorithm
InitializeParticles	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	virtual void InitializeParticles();$/;"	p	class:UnknownChannelOrderSMCAlgorithm
IntToSymbolsArray	transmision/Alphabet.cpp	/^void Alphabet::IntToSymbolsArray(int numero, vector<tSymbol> &res)$/;"	f	class:Alphabet
IntToSymbolsArray	transmision/Alphabet.h	/^		void IntToSymbolsArray(int numero, std::vector<tSymbol> &res);$/;"	p	class:Alphabet
KALMANESTIMATOR_H	estimation/KalmanEstimator.h	/^#define KALMANESTIMATOR_H$/;"	d
KALMANFILTER_H	filters/KalmanFilter.h	/^#define KALMANFILTER_H$/;"	d
KNOWNCHANNELALGORITHM_H	algorithms/KnownChannelAlgorithm.h	/^#define KNOWNCHANNELALGORITHM_H$/;"	d
KNOWNCHANNELORDERALGORITHM_H	algorithms/KnownChannelOrderAlgorithm.h	/^#define KNOWNCHANNELORDERALGORITHM_H$/;"	d
KNOWNSYMBOLSKALMANBASEDCHANNELESTIMATOR_H	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^#define KNOWNSYMBOLSKALMANBASEDCHANNELESTIMATOR_H$/;"	d
KalmanEstimator	estimation/KalmanEstimator.cpp	/^KalmanEstimator::KalmanEstimator(const KalmanEstimator &kalmanEstimator):ChannelMatrixEstimator(kalmanEstimator),_kalmanFilter(new KalmanFilter(*(kalmanEstimator._kalmanFilter))),_nChannelCoefficients(kalmanEstimator._nChannelCoefficients),_identityL(kalmanEstimator._identityL),_F(LaGenMatDouble::zeros(_L,_L*_Nm)),_piv(_nChannelCoefficients),_FtransInvNoiseCovariance(_nChannelCoefficients,_L),_B(_nChannelCoefficients,_nChannelCoefficients),_invPredictiveCovariancePredictiveMean(_nChannelCoefficients),_auxAuxArgExp(_nChannelCoefficients),_auxAuxArgExpInvB(_nChannelCoefficients),_observationsNoiseCovariance(_L)$/;"	f	class:KalmanEstimator
KalmanEstimator	estimation/KalmanEstimator.cpp	/^KalmanEstimator::KalmanEstimator(tMatrix initialEstimation,double ARcoefficient,double ARvariance)$/;"	f	class:KalmanEstimator
KalmanEstimator	estimation/KalmanEstimator.h	/^	KalmanEstimator(const KalmanEstimator &kalmanEstimator);$/;"	p	class:KalmanEstimator
KalmanEstimator	estimation/KalmanEstimator.h	/^    KalmanEstimator(tMatrix initialEstimation,double ARcoefficient,double ARvariance);$/;"	p	class:KalmanEstimator
KalmanEstimator	estimation/KalmanEstimator.h	/^class KalmanEstimator : public ChannelMatrixEstimator$/;"	c
KalmanFilter	filters/KalmanFilter.cpp	/^KalmanFilter::KalmanFilter(tMatrix R,tMatrix stateEquationCovariance,tVector initialMean, tMatrix initialCovariance,int observationVectorLength):$/;"	f	class:KalmanFilter
KalmanFilter	filters/KalmanFilter.h	/^    KalmanFilter(tMatrix R,tMatrix stateEquationCovariance,tVector initialMean, tMatrix initialCovariance,int observationVectorLength);$/;"	p	class:KalmanFilter
KalmanFilter	filters/KalmanFilter.h	/^class KalmanFilter{$/;"	c
KeepParticles	smc/ParticleFilter.cpp	/^void ParticleFilter::KeepParticles(std::vector<int> resamplingIndexes,std::vector<int> indexes)$/;"	f	class:ParticleFilter
KeepParticles	smc/ParticleFilter.cpp	/^void ParticleFilter::KeepParticles(vector<int> indexes)$/;"	f	class:ParticleFilter
KeepParticles	smc/ParticleFilter.h	/^	virtual void KeepParticles(std::vector<int> resamplingIndexes);$/;"	p	class:ParticleFilter
KeepParticles	smc/ParticleFilter.h	/^	virtual void KeepParticles(std::vector<int> resamplingIndexes,std::vector<int> indexes);$/;"	p	class:ParticleFilter
KeepParticles	smc/ParticleFilterWithChannelOrder.cpp	/^void ParticleFilterWithChannelOrder::KeepParticles(std::vector<int> resamplingIndexes)$/;"	f	class:ParticleFilterWithChannelOrder
KeepParticles	smc/ParticleFilterWithChannelOrder.cpp	/^void ParticleFilterWithChannelOrder::KeepParticles(std::vector<int> resamplingIndexes,std::vector<int> indexes)$/;"	f	class:ParticleFilterWithChannelOrder
KeepParticles	smc/ParticleFilterWithChannelOrder.h	/^    void KeepParticles(std::vector<int> resamplingIndexes);$/;"	p	class:ParticleFilterWithChannelOrder
KeepParticles	smc/ParticleFilterWithChannelOrder.h	/^    void KeepParticles(std::vector<int> resamplingIndexes,std::vector<int> indexes);$/;"	p	class:ParticleFilterWithChannelOrder
KnownChannelAlgorithm	algorithms/KnownChannelAlgorithm.cpp	/^KnownChannelAlgorithm::KnownChannelAlgorithm(string name, Alphabet alphabet,int L,int N, int K, const MIMOChannel &channel): Algorithm(name, alphabet, L, N, K),_channel(channel)$/;"	f	class:KnownChannelAlgorithm
KnownChannelAlgorithm	algorithms/KnownChannelAlgorithm.h	/^    KnownChannelAlgorithm(string name, Alphabet alphabet,int L,int N, int K, const MIMOChannel &channel);$/;"	p	class:KnownChannelAlgorithm
KnownChannelAlgorithm	algorithms/KnownChannelAlgorithm.h	/^class KnownChannelAlgorithm : public Algorithm$/;"	c
KnownChannelOrderAlgorithm	algorithms/KnownChannelOrderAlgorithm.cpp	/^KnownChannelOrderAlgorithm::KnownChannelOrderAlgorithm(string name, Alphabet alphabet,int L,int N, int K,int m, ChannelMatrixEstimator *channelEstimator,tMatrix preamble): UnknownChannelAlgorithm(name, alphabet,L,N,K),_channelEstimator(channelEstimator->Clone()),_preamble(preamble),_Nm(channelEstimator->Cols()),_m(m)$/;"	f	class:KnownChannelOrderAlgorithm
KnownChannelOrderAlgorithm	algorithms/KnownChannelOrderAlgorithm.cpp	/^KnownChannelOrderAlgorithm::~ KnownChannelOrderAlgorithm()$/;"	f
KnownChannelOrderAlgorithm	algorithms/KnownChannelOrderAlgorithm.h	/^    KnownChannelOrderAlgorithm(string name, Alphabet alphabet,int L,int N, int K,int m, ChannelMatrixEstimator *channelEstimator,tMatrix preamble);$/;"	p	class:KnownChannelOrderAlgorithm
KnownChannelOrderAlgorithm	algorithms/KnownChannelOrderAlgorithm.h	/^class KnownChannelOrderAlgorithm : public UnknownChannelAlgorithm$/;"	c
KnownSymbolsKalmanBasedChannelEstimator	algorithms/KnownSymbolsKalmanBasedChannelEstimator.cpp	/^KnownSymbolsKalmanBasedChannelEstimator::KnownSymbolsKalmanBasedChannelEstimator(string name, Alphabet alphabet,int L,int N, int K,int m,KalmanEstimator* channelEstimator, tMatrix preamble,const tMatrix &symbolVectors): KnownChannelOrderAlgorithm(name, alphabet, L, N, K,m, channelEstimator, preamble),_symbolVectors(symbolVectors)$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimator
KnownSymbolsKalmanBasedChannelEstimator	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^    KnownSymbolsKalmanBasedChannelEstimator(string name, Alphabet alphabet,int L,int N, int K,int m, KalmanEstimator* channelEstimator, tMatrix preamble,const tMatrix &symbolVectors);$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimator
KnownSymbolsKalmanBasedChannelEstimator	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^class KnownSymbolsKalmanBasedChannelEstimator : public KnownChannelOrderAlgorithm$/;"	c
LINEARDETECTOR_H	detection/LinearDetector.h	/^#define LINEARDETECTOR_H$/;"	d
LINEARFILTERBASEDISIRALGORITHM_H	algorithms/LinearFilterBasedISIRAlgorithm.h	/^#define LINEARFILTERBASEDISIRALGORITHM_H$/;"	d
LINEARFILTERBASEDSMCALGORITHM_H	algorithms/LinearFilterBasedSMCAlgorithm.h	/^#define LINEARFILTERBASEDSMCALGORITHM_H$/;"	d
LMSESTIMATOR_H	estimation/LMSEstimator.h	/^#define LMSESTIMATOR_H$/;"	d
LMSEstimator	estimation/LMSEstimator.cpp	/^LMSEstimator::LMSEstimator(tMatrix initialEstimation,double mu): ChannelMatrixEstimator(initialEstimation),_mu(mu),_predictedObservations(_L),_error(_L),_deltaMatrix(_L,_Nm)$/;"	f	class:LMSEstimator
LMSEstimator	estimation/LMSEstimator.h	/^    LMSEstimator(tMatrix initialEstimation,double mu);$/;"	p	class:LMSEstimator
LMSEstimator	estimation/LMSEstimator.h	/^class LMSEstimator : public ChannelMatrixEstimator$/;"	c
LastEstimatedChannelMatrix	estimation/ChannelMatrixEstimator.h	/^	tMatrix LastEstimatedChannelMatrix() { return _lastEstimatedChannelMatrix;}$/;"	f	class:ChannelMatrixEstimator
Length	transmision/Alphabet.h	/^		int Length() { return _length;}$/;"	f	class:Alphabet
Length	transmision/MIMOChannel.h	/^	int Length() const {return _length;};$/;"	f	class:MIMOChannel
Length	transmision/Noise.h	/^	int Length() { return _length;}$/;"	f	class:Noise
Likelihood	estimation/KalmanEstimator.cpp	/^double KalmanEstimator::Likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance)$/;"	f	class:KalmanEstimator
Likelihood	estimation/KalmanEstimator.h	/^	double Likelihood(const tVector &observations,const tMatrix symbolsMatrix,double noiseVariance);$/;"	p	class:KalmanEstimator
LinearDetector	detection/LinearDetector.cpp	/^LinearDetector::LinearDetector(int rows,int cols,double alphabetVariance):_channelMatrixRows(rows),_channelMatrixCols(cols),_alphabetVariance(alphabetVariance)$/;"	f	class:LinearDetector
LinearDetector	detection/LinearDetector.h	/^    LinearDetector(int rows,int cols,double alphabetVariance);$/;"	p	class:LinearDetector
LinearDetector	detection/LinearDetector.h	/^class LinearDetector{$/;"	c
LinearFilterBasedISIRAlgorithm	algorithms/LinearFilterBasedISIRAlgorithm.cpp	/^LinearFilterBasedISIRAlgorithm::LinearFilterBasedISIRAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators,vector<LinearDetector *> linearDetectors, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm): MultipleChannelEstimatorsPerParticleSMCAlgorithm(name, alphabet, L, N, K, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm),_allObservationRows(0,_L-1),_linearDetectors(linearDetectors.size()),_particleFilter(nParticles)$/;"	f	class:LinearFilterBasedISIRAlgorithm
LinearFilterBasedISIRAlgorithm	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    LinearFilterBasedISIRAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators,vector<LinearDetector *> linearDetectors, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm);$/;"	p	class:LinearFilterBasedISIRAlgorithm
LinearFilterBasedISIRAlgorithm	algorithms/LinearFilterBasedISIRAlgorithm.h	/^class LinearFilterBasedISIRAlgorithm : public MultipleChannelEstimatorsPerParticleSMCAlgorithm$/;"	c
LinearFilterBasedSMCAlgorithm	algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^LinearFilterBasedSMCAlgorithm::LinearFilterBasedSMCAlgorithm(string name, Alphabet alphabet,int L,int N, int K,int m,  ChannelMatrixEstimator *channelEstimator,LinearDetector *linearDetector,tMatrix preamble, int smoothingLag, int nParticles,StdResamplingAlgorithm resamplingAlgorithm,double ARcoefficient,double samplingVariance,double ARprocessVariance): SMCAlgorithm(name, alphabet, L, N, K,m, channelEstimator, preamble, smoothingLag, nParticles, resamplingAlgorithm)$/;"	f	class:LinearFilterBasedSMCAlgorithm
LinearFilterBasedSMCAlgorithm	algorithms/LinearFilterBasedSMCAlgorithm.h	/^    LinearFilterBasedSMCAlgorithm(string name, Alphabet alphabet,int L,int N, int K,int m, ChannelMatrixEstimator *channelEstimator,LinearDetector *linearDetector,tMatrix preamble, int smoothingLag, int nParticles, StdResamplingAlgorithm resamplingAlgorithm,double ARcoefficient,double samplingVariance, double ARprocessVariance);$/;"	p	class:LinearFilterBasedSMCAlgorithm
LinearFilterBasedSMCAlgorithm	algorithms/LinearFilterBasedSMCAlgorithm.h	/^class LinearFilterBasedSMCAlgorithm : public SMCAlgorithm$/;"	c
MIMOCHANNEL_H	transmision/MIMOChannel.h	/^#define MIMOCHANNEL_H$/;"	d
MIMOChannel	transmision/MIMOChannel.cpp	/^MIMOChannel::MIMOChannel():_nTx(0),_nRx(0),_memory(0),_length(0),_nTxnRx(0),_nTxnRxMemory(0),_nTxMemory(0)$/;"	f	class:MIMOChannel
MIMOChannel	transmision/MIMOChannel.cpp	/^MIMOChannel::MIMOChannel(int nTx,int nRx, int memory, int length):_nTx(nTx),_nRx(nRx),_memory(memory),_length(length),_nTxnRx(_nTx*_nRx),_nTxnRxMemory(_nTx*_nRx*_memory),_nTxMemory(_nTx*_memory)$/;"	f	class:MIMOChannel
MIMOChannel	transmision/MIMOChannel.h	/^	MIMOChannel(int nTx,int nRx, int memory, int length);$/;"	p	class:MIMOChannel
MIMOChannel	transmision/MIMOChannel.h	/^    MIMOChannel();$/;"	p	class:MIMOChannel
MIMOChannel	transmision/MIMOChannel.h	/^class MIMOChannel{$/;"	c
ML_MULTIPLECHANNELESTIMATORSPERPARTICLESMCALGORITHM_H	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^#define ML_MULTIPLECHANNELESTIMATORSPERPARTICLESMCALGORITHM_H$/;"	d
ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm::ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm): MultipleChannelEstimatorsPerParticleSMCAlgorithm(name, alphabet, L, N, K, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm),_particleFilter(nParticles,_candidateOrders)$/;"	f	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm);$/;"	p	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^class ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm : public MultipleChannelEstimatorsPerParticleSMCAlgorithm$/;"	c
ML_SMCALGORITHM_H	algorithms/ML_SMCAlgorithm.h	/^#define ML_SMCALGORITHM_H$/;"	d
ML_SMCAlgorithm	algorithms/ML_SMCAlgorithm.cpp	/^ML_SMCAlgorithm::ML_SMCAlgorithm(string name, Alphabet alphabet,int L,int N, int K,int m, ChannelMatrixEstimator *channelEstimator, tMatrix preamble, int smoothingLag, int nParticles,StdResamplingAlgorithm resamplingAlgorithm): SMCAlgorithm(name, alphabet, L, N, K,m,  channelEstimator, preamble, smoothingLag, nParticles,resamplingAlgorithm)$/;"	f	class:ML_SMCAlgorithm
ML_SMCAlgorithm	algorithms/ML_SMCAlgorithm.h	/^    ML_SMCAlgorithm(string name, Alphabet alphabet,int L,int N, int K,int m, ChannelMatrixEstimator *channelEstimator, tMatrix preamble, int smoothingLag, int nParticles,StdResamplingAlgorithm resamplingAlgorithm);$/;"	p	class:ML_SMCAlgorithm
ML_SMCAlgorithm	algorithms/ML_SMCAlgorithm.h	/^class ML_SMCAlgorithm : public SMCAlgorithm$/;"	c
ML_UNKNOWNCHANNELORDERSMCALGORITHM_H	algorithms/ML_UnknownChannelOrderSMCAlgorithm.h	/^#define ML_UNKNOWNCHANNELORDERSMCALGORITHM_H$/;"	d
ML_UnknownChannelOrderSMCAlgorithm	algorithms/ML_UnknownChannelOrderSMCAlgorithm.cpp	/^ML_UnknownChannelOrderSMCAlgorithm::ML_UnknownChannelOrderSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles,ResamplingAlgorithm *resamplingAlgorithm,ResamplingAlgorithm *resamplingAlgorithm2,tMatrix simbolosVerdaderos): UnknownChannelOrderSMCAlgorithm(name, alphabet, L, N, K, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles,resamplingAlgorithm),_simbolosVerdaderos(simbolosVerdaderos),_resamplingAlgorithm2(resamplingAlgorithm2)$/;"	f	class:ML_UnknownChannelOrderSMCAlgorithm
ML_UnknownChannelOrderSMCAlgorithm	algorithms/ML_UnknownChannelOrderSMCAlgorithm.h	/^    ML_UnknownChannelOrderSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles,ResamplingAlgorithm *resamplingAlgorithm,ResamplingAlgorithm *resamplingAlgorithm2,tMatrix simbolosVerdaderos);$/;"	p	class:ML_UnknownChannelOrderSMCAlgorithm
ML_UnknownChannelOrderSMCAlgorithm	algorithms/ML_UnknownChannelOrderSMCAlgorithm.h	/^class ML_UnknownChannelOrderSMCAlgorithm : public UnknownChannelOrderSMCAlgorithm$/;"	c
MODULATOR_H	transmision/Modulator.h	/^#define MODULATOR_H$/;"	d
MSE	algorithms/Algorithm.cpp	/^double Algorithm::MSE(const vector<tMatrix> &channelMatrices)$/;"	f	class:Algorithm
MSE	algorithms/Algorithm.h	/^    double MSE(const vector<tMatrix> &channelMatrices);$/;"	p	class:Algorithm
MULTIPLECHANNELESTIMATORSPERPARTICLESMCALGORITHM_H	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^#define MULTIPLECHANNELESTIMATORSPERPARTICLESMCALGORITHM_H$/;"	d
MatricesVectorToStream	util/Util.cpp	/^void Util::MatricesVectorToStream(vector<tMatrix> matrices,string name,ofstream &f)$/;"	f	class:Util
MatricesVectorToStream	util/Util.h	/^	static void MatricesVectorToStream(vector<tMatrix> matrices,string name,ofstream &f);$/;"	p	class:Util
MatrixToStream	util/Util.cpp	/^void Util::MatrixToStream(tMatrix A,string name,ofstream &f)$/;"	f	class:Util
MatrixToStream	util/Util.h	/^	static void MatrixToStream(tMatrix A,string name,ofstream &f);$/;"	p	class:Util
Max	util/Util.cpp	/^void Util::Max(const tVector &v,int &index)$/;"	f	class:Util
Max	util/Util.h	/^	static void Max(const tVector &v,int &index);$/;"	p	class:Util
Memory	transmision/MIMOChannel.h	/^	int Memory() const {return _memory;};$/;"	f	class:MIMOChannel
Min	util/Util.cpp	/^void Util::Min(const tVector &v,int &index)$/;"	f	class:Util
Min	util/Util.h	/^	static void Min(const tVector &v,int &index);$/;"	p	class:Util
Modulate	transmision/Modulator.cpp	/^tMatrix Modulator::Modulate(const Bits &bits, Alphabet alphabet)$/;"	f	class:Modulator
Modulate	transmision/Modulator.h	/^	static tMatrix Modulate(const Bits &bits,Alphabet alfabeto);$/;"	p	class:Modulator
Modulator	transmision/Modulator.cpp	/^Modulator::Modulator()$/;"	f	class:Modulator
Modulator	transmision/Modulator.h	/^    Modulator();$/;"	p	class:Modulator
Modulator	transmision/Modulator.h	/^class Modulator{$/;"	c
Mult	util/Util.cpp	/^void Util::Mult(const tVector &a,const tVector &b,tMatrix &C,double alpha)$/;"	f	class:Util
Mult	util/Util.h	/^    static void Mult(const tVector &a,const tVector &b,tMatrix &C,double = 1.0);$/;"	p	class:Util
MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^MultipleChannelEstimatorsPerParticleSMCAlgorithm::MultipleChannelEstimatorsPerParticleSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation,int smoothingLag,int nParticles,ResamplingAlgorithm *resamplingAlgorithm): UnknownChannelOrderAlgorithm(name, alphabet, L, N, K, channelEstimators, preamble, iFirstObservation)$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    MultipleChannelEstimatorsPerParticleSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation,int smoothingLag,int nParticles,ResamplingAlgorithm *resamplingAlgorithm);$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^class MultipleChannelEstimatorsPerParticleSMCAlgorithm : public UnknownChannelOrderAlgorithm$/;"	c
NOISE_H	transmision/Noise.h	/^#define NOISE_H$/;"	d
NbitsByStream	transmision/Bits.h	/^	int NbitsByStream() const {return nBitsByStream;}$/;"	f	class:Bits
NbitsBySymbol	transmision/Alphabet.h	/^		int NbitsBySymbol() { return _nBitsBySymbol;}$/;"	f	class:Alphabet
NchannelOrders	smc/ParticleFilterWithChannelOrder.h	/^    int NchannelOrders() {return _candidateOrders.size();}$/;"	f	class:ParticleFilterWithChannelOrder
NextMatrix	estimation/ChannelMatrixEstimator.h	/^	virtual tMatrix NextMatrix(const tVector &observations,const tMatrix &symbolsMatrix,double noiseVariance) = 0;$/;"	p	class:ChannelMatrixEstimator
NextMatrix	estimation/KalmanEstimator.cpp	/^tMatrix KalmanEstimator::NextMatrix(const tVector &observations,const tMatrix &symbolsMatrix,double noiseVariance)$/;"	f	class:KalmanEstimator
NextMatrix	estimation/KalmanEstimator.h	/^	tMatrix NextMatrix(const tVector &observations,const tMatrix &symbolsMatrix,double noiseVariance);$/;"	p	class:KalmanEstimator
NextMatrix	estimation/LMSEstimator.cpp	/^tMatrix LMSEstimator::NextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance)$/;"	f	class:LMSEstimator
NextMatrix	estimation/LMSEstimator.h	/^    virtual tMatrix NextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance);$/;"	p	class:LMSEstimator
NextMatrix	estimation/RLSEstimator.cpp	/^tMatrix RLSEstimator::NextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance)$/;"	f	class:RLSEstimator
NextMatrix	estimation/RLSEstimator.h	/^    virtual tMatrix NextMatrix(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance);$/;"	p	class:RLSEstimator
NextMatrix	statistics/ARprocess.cpp	/^tMatrix ARprocess::NextMatrix()$/;"	f	class:ARprocess
NextMatrix	statistics/ARprocess.h	/^	tMatrix NextMatrix();$/;"	p	class:ARprocess
NextMatrix2	estimation/RLSEstimator.h	/^	tMatrix NextMatrix2(const tVector& observations, const tMatrix& symbolsMatrix, double noiseVariance);$/;"	p	class:RLSEstimator
Noise	transmision/Noise.cpp	/^Noise::Noise(int nRx,int length,Random randomGenerator): _nRx(nRx),_length(length),$/;"	f	class:Noise
Noise	transmision/Noise.h	/^    Noise(int nRx,int length,Random randomGenerator = Random(0));$/;"	p	class:Noise
Noise	transmision/Noise.h	/^class Noise{$/;"	c
NormalPdf	statistics/StatUtil.cpp	/^double StatUtil::NormalPdf(const tVector &x,const tVector &mean,const tMatrix &covariance)$/;"	f	class:StatUtil
NormalPdf	statistics/StatUtil.cpp	/^double StatUtil::NormalPdf(double x,double mean,double variance)$/;"	f	class:StatUtil
NormalPdf	statistics/StatUtil.h	/^	static double NormalPdf(const tVector &x,const tVector &mean,const tMatrix &covariance);$/;"	p	class:StatUtil
NormalPdf	statistics/StatUtil.h	/^	static double NormalPdf(double x,double mean,double variance);$/;"	p	class:StatUtil
Normalize	util/Util.cpp	/^tVector Util::Normalize(const tVector &v)$/;"	f	class:Util
Normalize	util/Util.h	/^	static tVector Normalize(const tVector &v);$/;"	p	class:Util
NormalizeParticleGroups	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	void NormalizeParticleGroups();$/;"	p	class:UnknownChannelOrderSMCAlgorithm
NormalizeWeights	smc/ParticleFilter.h	/^    void NormalizeWeights()$/;"	f	class:ParticleFilter
NormalizeWeights	smc/ParticleFilter.h	/^    void NormalizeWeights(std::vector<int> indexes)$/;"	f	class:ParticleFilter
Nparticles	smc/ParticleFilter.h	/^	int Nparticles() { return _nParticles;}$/;"	f	class:ParticleFilter
NparticlesOfChannelOrderIndex	smc/ParticleFilterWithChannelOrder.h	/^    int NparticlesOfChannelOrderIndex(int iChannelOrder) { return _nParticlesPerChannelOrder[iChannelOrder];}$/;"	f	class:ParticleFilterWithChannelOrder
Nr	transmision/MIMOChannel.h	/^	int Nr() const { return _nRx;};$/;"	f	class:MIMOChannel
Nr	transmision/Noise.h	/^	int Nr() { return _nRx;}$/;"	f	class:Noise
Nstreams	transmision/Bits.h	/^	int Nstreams() const { return nStreams;}$/;"	f	class:Bits
Nt	transmision/MIMOChannel.h	/^	int Nt() const { return _nTx;};$/;"	f	class:MIMOChannel
NtMemory	transmision/MIMOChannel.h	/^	int NtMemory() const {return _nTxMemory;};$/;"	f	class:MIMOChannel
NtNr	transmision/MIMOChannel.h	/^	int NtNr() const {return _nTxnRx;};$/;"	f	class:MIMOChannel
NtNrMemory	transmision/MIMOChannel.h	/^	int NtNrMemory() const {return _nTxnRxMemory;};$/;"	f	class:MIMOChannel
NullWeightsException	smc/smcExceptions.h	/^		NullWeightsException(string s) : runtime_error(s) { }$/;"	f	class:NullWeightsException
NullWeightsException	smc/smcExceptions.h	/^class NullWeightsException : public runtime_error$/;"	c
PACKAGE	optimized/config.h	/^#define PACKAGE /;"	d
PACKAGE_BUGREPORT	optimized/config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_NAME	optimized/config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_STRING	optimized/config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_TARNAME	optimized/config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_VERSION	optimized/config.h	/^#define PACKAGE_VERSION /;"	d
PARTICLEFILTERWITHCHANNELORDER_H	smc/ParticleFilterWithChannelOrder.h	/^#define PARTICLEFILTERWITHCHANNELORDER_H$/;"	d
PARTICLEFILTER_H	smc/ParticleFilter.h	/^#define PARTICLEFILTER_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDCHANNELORDERAPP_H	smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDCHANNELORDERAPP_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDCHANNELORDER_H	smc/ParticleWithChannelEstimationAndChannelOrder.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDCHANNELORDER_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTIONANDCHANNELORDERAPP_H	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTIONANDCHANNELORDERAPP_H$/;"	d
PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTION_H	smc/ParticleWithChannelEstimationAndLinearDetection.h	/^#define PARTICLEWITHCHANNELESTIMATIONANDLINEARDETECTION_H$/;"	d
PARTICLEWITHCHANNELESTIMATION_H	smc/ParticleWithChannelEstimation.h	/^#define PARTICLEWITHCHANNELESTIMATION_H$/;"	d
PARTICLE_H	smc/Particle.h	/^#define PARTICLE_H$/;"	d
P_CHANNEL_ORDER_PDF	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^#define P_CHANNEL_ORDER_PDF /;"	d
Particle	smc/Particle.cpp	/^Particle::Particle(double weight,int symbolVectorLength,int nTimeInstants):_weight(weight),_symbolVectorLength(symbolVectorLength),_nTimeInstants(nTimeInstants),_symbolVectors(_symbolVectorLength,_nTimeInstants),_rAllSymbolRows(0,_symbolVectorLength-1)$/;"	f	class:Particle
Particle	smc/Particle.h	/^    Particle(double weight,int symbolVectorLength,int nTimeInstants);$/;"	p	class:Particle
Particle	smc/Particle.h	/^class Particle{$/;"	c
ParticleFilter	smc/ParticleFilter.cpp	/^ParticleFilter::ParticleFilter(int nParticles):_nParticles(nParticles),_particles(new ParticleWithChannelEstimation*[nParticles])$/;"	f	class:ParticleFilter
ParticleFilter	smc/ParticleFilter.h	/^    ParticleFilter(int nParticles);$/;"	p	class:ParticleFilter
ParticleFilter	smc/ParticleFilter.h	/^class ParticleFilter{$/;"	c
ParticleFilterWithChannelOrder	smc/ParticleFilterWithChannelOrder.cpp	/^ParticleFilterWithChannelOrder::ParticleFilterWithChannelOrder(int nParticles,vector<int> candidateOrders)$/;"	f	class:ParticleFilterWithChannelOrder
ParticleFilterWithChannelOrder	smc/ParticleFilterWithChannelOrder.h	/^    ParticleFilterWithChannelOrder(int nParticles,vector<int> candidateOrders);$/;"	p	class:ParticleFilterWithChannelOrder
ParticleFilterWithChannelOrder	smc/ParticleFilterWithChannelOrder.h	/^class ParticleFilterWithChannelOrder : public ParticleFilter$/;"	c
ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation::ParticleWithChannelEstimation(const ParticleWithChannelEstimation &particle):Particle(particle),_channelMatrixEstimators(particle._channelMatrixEstimators.size())$/;"	f	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation::ParticleWithChannelEstimation(double weight, int symbolVectorLength, int nTimeInstants$/;"	f	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation::ParticleWithChannelEstimation(double weight, int symbolVectorLength, int nTimeInstants,vector <ChannelMatrixEstimator *> channelMatrixEstimators):Particle(weight, symbolVectorLength, nTimeInstants),_channelMatrixEstimators(channelMatrixEstimators)$/;"	f	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.h	/^	ParticleWithChannelEstimation(const ParticleWithChannelEstimation &particle);$/;"	p	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.h	/^    ParticleWithChannelEstimation(double weight, int symbolVectorLength, int nTimeInstants,ChannelMatrixEstimator *channelMatrixEstimator);$/;"	p	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.h	/^    ParticleWithChannelEstimation(double weight, int symbolVectorLength, int nTimeInstants,std::vector <ChannelMatrixEstimator *> channelMatrixEstimators);$/;"	p	class:ParticleWithChannelEstimation
ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.h	/^class ParticleWithChannelEstimation : public Particle$/;"	c
ParticleWithChannelEstimationAndChannelOrder	smc/ParticleWithChannelEstimationAndChannelOrder.cpp	/^ ParticleWithChannelEstimationAndChannelOrder::ParticleWithChannelEstimationAndChannelOrder(const ParticleWithChannelEstimationAndChannelOrder& particle):ParticleWithChannelEstimation(particle),WithChannelOrderParticleAddon(particle)$/;"	f	class:ParticleWithChannelEstimationAndChannelOrder
ParticleWithChannelEstimationAndChannelOrder	smc/ParticleWithChannelEstimationAndChannelOrder.cpp	/^ParticleWithChannelEstimationAndChannelOrder::ParticleWithChannelEstimationAndChannelOrder(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator,int m): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimator),WithChannelOrderParticleAddon(m)$/;"	f	class:ParticleWithChannelEstimationAndChannelOrder
ParticleWithChannelEstimationAndChannelOrder	smc/ParticleWithChannelEstimationAndChannelOrder.cpp	/^ParticleWithChannelEstimationAndChannelOrder::ParticleWithChannelEstimationAndChannelOrder(double weight, int symbolVectorLength, int nTimeInstants, std::vector <ChannelMatrixEstimator *> channelMatrixEstimators,int m): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimators),WithChannelOrderParticleAddon(m)$/;"	f	class:ParticleWithChannelEstimationAndChannelOrder
ParticleWithChannelEstimationAndChannelOrder	smc/ParticleWithChannelEstimationAndChannelOrder.h	/^     ParticleWithChannelEstimationAndChannelOrder(const ParticleWithChannelEstimationAndChannelOrder& particle);$/;"	p	class:ParticleWithChannelEstimationAndChannelOrder
ParticleWithChannelEstimationAndChannelOrder	smc/ParticleWithChannelEstimationAndChannelOrder.h	/^    ParticleWithChannelEstimationAndChannelOrder(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator,int m);$/;"	p	class:ParticleWithChannelEstimationAndChannelOrder
ParticleWithChannelEstimationAndChannelOrder	smc/ParticleWithChannelEstimationAndChannelOrder.h	/^    ParticleWithChannelEstimationAndChannelOrder(double weight, int symbolVectorLength, int nTimeInstants, std::vector <ChannelMatrixEstimator *> channelMatrixEstimators,int m);$/;"	p	class:ParticleWithChannelEstimationAndChannelOrder
ParticleWithChannelEstimationAndChannelOrder	smc/ParticleWithChannelEstimationAndChannelOrder.h	/^class ParticleWithChannelEstimationAndChannelOrder : public ParticleWithChannelEstimation, public WithChannelOrderParticleAddon$/;"	c
ParticleWithChannelEstimationAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndChannelOrderAPP::ParticleWithChannelEstimationAndChannelOrderAPP(const ParticleWithChannelEstimationAndChannelOrderAPP& particle):ParticleWithChannelEstimation(particle),WithChannelOrderAppParticleAddon(particle)$/;"	f	class:ParticleWithChannelEstimationAndChannelOrderAPP
ParticleWithChannelEstimationAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndChannelOrderAPP::ParticleWithChannelEstimationAndChannelOrderAPP(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimators),WithChannelOrderAppParticleAddon(channelMatrixEstimators.size())$/;"	f	class:ParticleWithChannelEstimationAndChannelOrderAPP
ParticleWithChannelEstimationAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^	ParticleWithChannelEstimationAndChannelOrderAPP(const ParticleWithChannelEstimationAndChannelOrderAPP& particle);$/;"	p	class:ParticleWithChannelEstimationAndChannelOrderAPP
ParticleWithChannelEstimationAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^    ParticleWithChannelEstimationAndChannelOrderAPP(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators);$/;"	p	class:ParticleWithChannelEstimationAndChannelOrderAPP
ParticleWithChannelEstimationAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndChannelOrderAPP.h	/^class ParticleWithChannelEstimationAndChannelOrderAPP : public ParticleWithChannelEstimation, public WithChannelOrderAppParticleAddon$/;"	c
ParticleWithChannelEstimationAndLinearDetection	smc/ParticleWithChannelEstimationAndLinearDetection.cpp	/^ParticleWithChannelEstimationAndLinearDetection::ParticleWithChannelEstimationAndLinearDetection(const ParticleWithChannelEstimationAndLinearDetection &particle):ParticleWithChannelEstimation(particle),WithLinearDetectionParticleAddon(particle)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	smc/ParticleWithChannelEstimationAndLinearDetection.cpp	/^ParticleWithChannelEstimationAndLinearDetection::ParticleWithChannelEstimationAndLinearDetection(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator, LinearDetector *linearDetector): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimator),WithLinearDetectionParticleAddon(linearDetector)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	smc/ParticleWithChannelEstimationAndLinearDetection.h	/^	ParticleWithChannelEstimationAndLinearDetection(const ParticleWithChannelEstimationAndLinearDetection &particle);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	smc/ParticleWithChannelEstimationAndLinearDetection.h	/^    ParticleWithChannelEstimationAndLinearDetection(double weight, int symbolVectorLength, int nTimeInstants, ChannelMatrixEstimator* channelMatrixEstimator, LinearDetector *linearDetector);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetection
ParticleWithChannelEstimationAndLinearDetection	smc/ParticleWithChannelEstimationAndLinearDetection.h	/^class ParticleWithChannelEstimationAndLinearDetection : public ParticleWithChannelEstimation, public WithLinearDetectionParticleAddon$/;"	c
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP::ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP(const ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP& particle):ParticleWithChannelEstimation(particle),WithLinearDetectionParticleAddon(particle),WithChannelOrderAppParticleAddon(particle)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP::ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators, int nChannelOrderAPP, std::vector< LinearDetector * > linearDetectors): ParticleWithChannelEstimation(weight, symbolVectorLength, nTimeInstants, channelMatrixEstimators), WithChannelOrderAppParticleAddon(nChannelOrderAPP), WithLinearDetectionParticleAddon(linearDetectors)$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.h	/^    ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP(const ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP& particle);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.h	/^    ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP(double weight, int symbolVectorLength, int nTimeInstants, std::vector< ChannelMatrixEstimator * > channelMatrixEstimators, int nChannelOrderAPP, std::vector< LinearDetector * > linearDetectors);$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP
ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.h	/^class ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP : public ParticleWithChannelEstimation, public WithChannelOrderAppParticleAddon, public WithLinearDetectionParticleAddon$/;"	c
PredictiveCovariance	filters/KalmanFilter.h	/^	tMatrix PredictiveCovariance() {return _predictiveCovariance;}$/;"	f	class:KalmanFilter
PredictiveMean	filters/KalmanFilter.h	/^	tVector PredictiveMean() { return _predictiveMean;}$/;"	f	class:KalmanFilter
Print	smc/Particle.h	/^	void Print() { std::cout << _symbolVectors << std::endl << "peso = " << _weight << std::endl;}$/;"	f	class:Particle
Print	transmision/Bits.cpp	/^void Bits::Print()$/;"	f	class:Bits
Print	transmision/Bits.h	/^	void Print();$/;"	p	class:Bits
Print	transmision/Noise.h	/^	void Print() { cout << _matrix;};$/;"	f	class:Noise
Print	util/Util.cpp	/^void Util::Print(const tMatrix &A)$/;"	f	class:Util
Print	util/Util.h	/^    static void Print(const tMatrix &A);$/;"	p	class:Util
PrintStage	algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::PrintStage(tStage exitOrArrival)$/;"	f	class:ViterbiAlgorithm
PrintStage	algorithms/ViterbiAlgorithm.h	/^    void PrintStage(tStage exitOrArrival);$/;"	p	class:ViterbiAlgorithm
Process	algorithms/ISIR.cpp	/^void ISIR::Process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:ISIR
Process	algorithms/ISIR.h	/^    virtual void Process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:ISIR
Process	algorithms/LinearFilterBasedISIRAlgorithm.cpp	/^void LinearFilterBasedISIRAlgorithm::Process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:LinearFilterBasedISIRAlgorithm
Process	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    virtual void Process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:LinearFilterBasedISIRAlgorithm
Process	algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^void LinearFilterBasedSMCAlgorithm::Process(const tMatrix &observations, vector< double > noiseVariances)$/;"	f	class:LinearFilterBasedSMCAlgorithm
Process	algorithms/LinearFilterBasedSMCAlgorithm.h	/^    void Process(const tMatrix &observations, vector< double > noiseVariances);$/;"	p	class:LinearFilterBasedSMCAlgorithm
Process	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^void ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm::Process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
Process	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual void Process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
Process	algorithms/ML_SMCAlgorithm.cpp	/^void ML_SMCAlgorithm::Process(const tMatrix &observations, vector< double > noiseVariances)$/;"	f	class:ML_SMCAlgorithm
Process	algorithms/ML_SMCAlgorithm.h	/^    void Process(const tMatrix &observations, vector< double > noiseVariances);$/;"	p	class:ML_SMCAlgorithm
Process	algorithms/ML_UnknownChannelOrderSMCAlgorithm.cpp	/^void ML_UnknownChannelOrderSMCAlgorithm::Process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:ML_UnknownChannelOrderSMCAlgorithm
Process	algorithms/ML_UnknownChannelOrderSMCAlgorithm.h	/^    virtual void Process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:ML_UnknownChannelOrderSMCAlgorithm
Process	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    virtual void Process(const tMatrix &observations,vector<double> noiseVariances) = 0;$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
Process	algorithms/SMCAlgorithm.h	/^    virtual void Process(const tMatrix &observations,vector<double> noiseVariances) = 0;$/;"	p	class:SMCAlgorithm
Process	algorithms/SampledChannelOrderSMCAlgorithm.cpp	/^void SampledChannelOrderSMCAlgorithm::Process(const tMatrix& observations, vector< double > noiseVariances)$/;"	f	class:SampledChannelOrderSMCAlgorithm
Process	algorithms/SampledChannelOrderSMCAlgorithm.h	/^    virtual void Process(const tMatrix& observations, vector< double > noiseVariances);$/;"	p	class:SampledChannelOrderSMCAlgorithm
Process	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^    virtual void Process(const tMatrix &observations,vector<double> noiseVariances) = 0;$/;"	p	class:UnknownChannelOrderSMCAlgorithm
ProcessTrainingSequence	algorithms/KnownChannelOrderAlgorithm.cpp	/^vector<tMatrix> KnownChannelOrderAlgorithm::ProcessTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence)$/;"	f	class:KnownChannelOrderAlgorithm
ProcessTrainingSequence	algorithms/KnownChannelOrderAlgorithm.h	/^	virtual vector<tMatrix> ProcessTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence);$/;"	p	class:KnownChannelOrderAlgorithm
ProcessTrainingSequence	algorithms/LinearFilterBasedISIRAlgorithm.cpp	/^vector<vector<tMatrix> > LinearFilterBasedISIRAlgorithm::ProcessTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence)$/;"	f	class:LinearFilterBasedISIRAlgorithm
ProcessTrainingSequence	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    vector<vector<tMatrix> > ProcessTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence);$/;"	p	class:LinearFilterBasedISIRAlgorithm
ProcessTrainingSequence	algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^vector<tMatrix> LinearFilterBasedSMCAlgorithm::ProcessTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence)$/;"	f	class:LinearFilterBasedSMCAlgorithm
ProcessTrainingSequence	algorithms/LinearFilterBasedSMCAlgorithm.h	/^	vector<tMatrix> ProcessTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence);$/;"	p	class:LinearFilterBasedSMCAlgorithm
ProcessTrainingSequence	algorithms/UnknownChannelOrderAlgorithm.cpp	/^vector<vector<tMatrix> > UnknownChannelOrderAlgorithm::ProcessTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence)$/;"	f	class:UnknownChannelOrderAlgorithm
ProcessTrainingSequence	algorithms/UnknownChannelOrderAlgorithm.h	/^vector<vector<tMatrix> > ProcessTrainingSequence(const tMatrix &observations,vector<double> noiseVariances,tMatrix trainingSequence);$/;"	p	class:UnknownChannelOrderAlgorithm
RANDOM_H	randomutil/Random.h	/^#define RANDOM_H /;"	d
RESAMPLINGALGORITHM_H	smc/ResamplingAlgorithm.h	/^#define RESAMPLINGALGORITHM_H$/;"	d
RESAMPLINGCRITERION_H	smc/ResamplingCriterion.h	/^#define RESAMPLINGCRITERION_H$/;"	d
RLSESTIMATOR_H	estimation/RLSEstimator.h	/^#define RLSESTIMATOR_H$/;"	d
RLSEstimator	estimation/RLSEstimator.cpp	/^RLSEstimator::RLSEstimator(tMatrix initialEstimation,double forgettingFactor): ChannelMatrixEstimator(initialEstimation),_forgettingFactor(forgettingFactor),_invForgettingFactor(1.0\/forgettingFactor),_invRtilde(LaGenMatDouble::eye(_Nm)),_pTilde(LaGenMatDouble::zeros(_L,_Nm)),$/;"	f	class:RLSEstimator
RLSEstimator	estimation/RLSEstimator.h	/^    RLSEstimator(tMatrix initialEstimation,double forgettingFactor);$/;"	p	class:RLSEstimator
RLSEstimator	estimation/RLSEstimator.h	/^class RLSEstimator : public ChannelMatrixEstimator$/;"	c
RMMSEDETECTOR_H	detection/RMMSEDetector.h	/^#define RMMSEDETECTOR_H$/;"	d
RMMSEDetector	detection/RMMSEDetector.cpp	/^RMMSEDetector::RMMSEDetector(int rows, int cols,double alphabetVariance,double forgettingFactor,int nSymbolsToBeDetected): LinearDetector(rows, cols,alphabetVariance),_g(_channelMatrixRows),_invRtilde(LaGenMatDouble::eye(_channelMatrixRows)),_invForgettingFactor(1.0\/forgettingFactor),_nSymbolsToBeDetected(nSymbolsToBeDetected),_filter(_channelMatrixRows,_nSymbolsToBeDetected)$/;"	f	class:RMMSEDetector
RMMSEDetector	detection/RMMSEDetector.h	/^    RMMSEDetector(int rows, int cols,double alphabetVariance,double forgettingFactor,int nSymbolsToBeDetected);$/;"	p	class:RMMSEDetector
RMMSEDetector	detection/RMMSEDetector.h	/^class RMMSEDetector : public LinearDetector$/;"	c
RandnMatrix	statistics/StatUtil.cpp	/^tMatrix StatUtil::RandnMatrix(int rows,int cols,double mean,double variance)$/;"	f	class:StatUtil
RandnMatrix	statistics/StatUtil.h	/^	static tMatrix RandnMatrix(int rows,int cols,double mean,double variance);$/;"	p	class:StatUtil
Random	randomutil/Random.h	/^		Random () {struct timeval tv; gettimeofday(&tv, NULL); _seed = tv.tv_sec * tv.tv_usec;}$/;"	f	class:Random
Random	randomutil/Random.h	/^		Random (uint32_t seed) : _seed(seed) { };$/;"	f	class:Random
Random	randomutil/Random.h	/^class Random$/;"	c
Range	transmision/MIMOChannel.cpp	/^vector<tMatrix> MIMOChannel::Range(int a,int b)$/;"	f	class:MIMOChannel
Range	transmision/MIMOChannel.h	/^    vector<tMatrix> Range(int a,int b);$/;"	p	class:MIMOChannel
Resample	smc/ByChannelOrderResamplingAlgorithm.cpp	/^void ByChannelOrderResamplingAlgorithm::Resample(ParticleFilter *particleFilter)$/;"	f	class:ByChannelOrderResamplingAlgorithm
Resample	smc/ByChannelOrderResamplingAlgorithm.h	/^    virtual void Resample(ParticleFilter *particleFilter);$/;"	p	class:ByChannelOrderResamplingAlgorithm
Resample	smc/ResamplingAlgorithm.h	/^    virtual void Resample(ParticleFilter *particleFilter) = 0;$/;"	p	class:ResamplingAlgorithm
Resample	smc/StdResamplingAlgorithm.cpp	/^void StdResamplingAlgorithm::Resample(ParticleFilter *particleFilter)$/;"	f	class:StdResamplingAlgorithm
Resample	smc/StdResamplingAlgorithm.h	/^	void Resample(ParticleFilter *particleFilter);$/;"	p	class:StdResamplingAlgorithm
ResamplingAlgorithm	smc/ResamplingAlgorithm.h	/^    ResamplingAlgorithm(ResamplingCriterion resamplingCriterion): _resamplingCriterion(resamplingCriterion) {}$/;"	f	class:ResamplingAlgorithm
ResamplingAlgorithm	smc/ResamplingAlgorithm.h	/^class ResamplingAlgorithm{$/;"	c
ResamplingCriterion	smc/ResamplingCriterion.cpp	/^ResamplingCriterion::ResamplingCriterion(double resamplingRatio): _resamplingRatio(resamplingRatio)$/;"	f	class:ResamplingCriterion
ResamplingCriterion	smc/ResamplingCriterion.h	/^    ResamplingCriterion(double resamplingRatio);$/;"	p	class:ResamplingCriterion
ResamplingCriterion	smc/ResamplingCriterion.h	/^class ResamplingCriterion{$/;"	c
ResamplingNeeded	smc/ResamplingCriterion.cpp	/^bool ResamplingCriterion::ResamplingNeeded(tVector weights,std::vector<int> indexes)$/;"	f	class:ResamplingCriterion
ResamplingNeeded	smc/ResamplingCriterion.h	/^	bool ResamplingNeeded(tVector weights)$/;"	f	class:ResamplingCriterion
ResamplingNeeded	smc/ResamplingCriterion.h	/^	bool ResamplingNeeded(tVector weights,std::vector<int> indexes);$/;"	p	class:ResamplingCriterion
Rows	estimation/ChannelMatrixEstimator.h	/^	int Rows() { return _L;}$/;"	f	class:ChannelMatrixEstimator
Run	algorithms/Algorithm.h	/^	virtual void Run(tMatrix observations,vector<double> noiseVariances) = 0;   $/;"	p	class:Algorithm
Run	algorithms/Algorithm.h	/^    virtual void Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence) = 0;$/;"	p	class:Algorithm
Run	algorithms/KnownChannelAlgorithm.cpp	/^void KnownChannelAlgorithm::Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:KnownChannelAlgorithm
Run	algorithms/KnownChannelAlgorithm.h	/^    void Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:KnownChannelAlgorithm
Run	algorithms/KnownSymbolsKalmanBasedChannelEstimator.cpp	/^void KnownSymbolsKalmanBasedChannelEstimator::Run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimator
Run	algorithms/KnownSymbolsKalmanBasedChannelEstimator.cpp	/^void KnownSymbolsKalmanBasedChannelEstimator::Run(tMatrix observations,vector<double> noiseVariances,tMatrix trainingSequence)$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimator
Run	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^    void Run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimator
Run	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^    void Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimator
Run	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^void MultipleChannelEstimatorsPerParticleSMCAlgorithm::Run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
Run	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^void MultipleChannelEstimatorsPerParticleSMCAlgorithm::Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
Run	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    void Run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
Run	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    void Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
Run	algorithms/SMCAlgorithm.cpp	/^void SMCAlgorithm::Run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:SMCAlgorithm
Run	algorithms/SMCAlgorithm.cpp	/^void SMCAlgorithm::Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:SMCAlgorithm
Run	algorithms/SMCAlgorithm.h	/^    void Run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:SMCAlgorithm
Run	algorithms/SMCAlgorithm.h	/^    void Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:SMCAlgorithm
Run	algorithms/UnknownChannelOrderSMCAlgorithm.cpp	/^void UnknownChannelOrderSMCAlgorithm::Run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:UnknownChannelOrderSMCAlgorithm
Run	algorithms/UnknownChannelOrderSMCAlgorithm.cpp	/^void UnknownChannelOrderSMCAlgorithm::Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence)$/;"	f	class:UnknownChannelOrderSMCAlgorithm
Run	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	void Run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:UnknownChannelOrderSMCAlgorithm
Run	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^    void Run(tMatrix observations,vector<double> noiseVariances, tMatrix trainingSequence);$/;"	p	class:UnknownChannelOrderSMCAlgorithm
Run	algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::Run(tMatrix observations,vector<double> noiseVariances)$/;"	f	class:ViterbiAlgorithm
Run	algorithms/ViterbiAlgorithm.cpp	/^void ViterbiAlgorithm::Run(tMatrix observations,vector<double> noiseVariances,int firstSymbolVectorDetectedAt)$/;"	f	class:ViterbiAlgorithm
Run	algorithms/ViterbiAlgorithm.h	/^    void Run(tMatrix observations,vector<double> noiseVariances);$/;"	p	class:ViterbiAlgorithm
Run	algorithms/ViterbiAlgorithm.h	/^    void Run(tMatrix observations,vector<double> noiseVariances,int firstSymbolVectorDetectedAt);$/;"	p	class:ViterbiAlgorithm
RuntimeException	src/exceptions.h	/^		RuntimeException(string s) : runtime_error(s) { }$/;"	f	class:RuntimeException
RuntimeException	src/exceptions.h	/^class RuntimeException : public runtime_error$/;"	c
RuntimeException	transmision/exceptions.h	/^		RuntimeException(string s) : runtime_error(s) { }$/;"	f	class:RuntimeException
RuntimeException	transmision/exceptions.h	/^class RuntimeException : public runtime_error$/;"	c
SAMPLEDCHANNELORDERSMCALGORITHM_H	algorithms/SampledChannelOrderSMCAlgorithm.h	/^#define SAMPLEDCHANNELORDERSMCALGORITHM_H$/;"	d
SER	algorithms/Algorithm.cpp	/^double Algorithm::SER(const tMatrix &symbols)$/;"	f	class:Algorithm
SER	algorithms/Algorithm.h	/^    double SER(const tMatrix &symbols);$/;"	p	class:Algorithm
SMCALGORITHM_H	algorithms/SMCAlgorithm.h	/^#define SMCALGORITHM_H$/;"	d
SMCAlgorithm	algorithms/SMCAlgorithm.cpp	/^SMCAlgorithm::SMCAlgorithm(string name, Alphabet alphabet,int L,int N, int K,int m, ChannelMatrixEstimator *channelEstimator, tMatrix preamble,int smoothingLag,int nParticles,StdResamplingAlgorithm resamplingAlgorithm): KnownChannelOrderAlgorithm(name, alphabet, L, N, K,m, channelEstimator, preamble),$/;"	f	class:SMCAlgorithm
SMCAlgorithm	algorithms/SMCAlgorithm.h	/^    SMCAlgorithm(string name, Alphabet alphabet,int L,int N, int K,int m, ChannelMatrixEstimator *channelEstimator, tMatrix preamble,int smoothingLag,int nParticles,StdResamplingAlgorithm resamplingAlgorithm);$/;"	p	class:SMCAlgorithm
SMCAlgorithm	algorithms/SMCAlgorithm.h	/^class SMCAlgorithm : public KnownChannelOrderAlgorithm$/;"	c
SMCEXCEPTIONS_H	smc/smcExceptions.h	/^#define SMCEXCEPTIONS_H$/;"	d
STATUTIL_H	statistics/StatUtil.h	/^#define STATUTIL_H$/;"	d
STDC_HEADERS	optimized/config.h	/^#define STDC_HEADERS /;"	d
STDRESAMPLINGALGORITHM_H	smc/StdResamplingAlgorithm.h	/^#define STDRESAMPLINGALGORITHM_H$/;"	d
SampledChannelOrderSMCAlgorithm	algorithms/SampledChannelOrderSMCAlgorithm.cpp	/^SampledChannelOrderSMCAlgorithm::SampledChannelOrderSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm): MultipleChannelEstimatorsPerParticleSMCAlgorithm(name, alphabet, L, N, K, channelEstimators, preamble, iFirstObservation, smoothingLag, nParticles, resamplingAlgorithm),_particleFilter(nParticles,_candidateOrders)$/;"	f	class:SampledChannelOrderSMCAlgorithm
SampledChannelOrderSMCAlgorithm	algorithms/SampledChannelOrderSMCAlgorithm.h	/^    SampledChannelOrderSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int iFirstObservation, int smoothingLag, int nParticles, ResamplingAlgorithm* resamplingAlgorithm);$/;"	p	class:SampledChannelOrderSMCAlgorithm
SampledChannelOrderSMCAlgorithm	algorithms/SampledChannelOrderSMCAlgorithm.h	/^class SampledChannelOrderSMCAlgorithm : public MultipleChannelEstimatorsPerParticleSMCAlgorithm$/;"	c
ScalarToStream	util/Util.cpp	/^void Util::ScalarToStream(int scalar,string name,ofstream &f)$/;"	f	class:Util
ScalarToStream	util/Util.h	/^    static void ScalarToStream(int scalar,string name,ofstream &f);$/;"	p	class:Util
SetChannelMatrix	smc/ParticleWithChannelEstimation.h	/^	void SetChannelMatrix(int n,const tMatrix &matrix) { _estimatedChannelMatrices[0][n] = matrix;}$/;"	f	class:ParticleWithChannelEstimation
SetChannelMatrix	smc/ParticleWithChannelEstimation.h	/^    void SetChannelMatrix(int iChannelOrder,int n,const tMatrix &matrix) { _estimatedChannelMatrices[iChannelOrder][n] = matrix;}$/;"	f	class:ParticleWithChannelEstimation
SetChannelOrder	smc/WithChannelOrderParticleAddon.h	/^	void SetChannelOrder(int m) { _m = m;}$/;"	f	class:WithChannelOrderParticleAddon
SetChannelOrderAPP	smc/WithChannelOrderAppParticleAddon.h	/^	void SetChannelOrderAPP(double channelOrderAPP,int n) { _channelOrderAPP[n] = channelOrderAPP;}$/;"	f	class:WithChannelOrderAppParticleAddon
SetParticle	smc/ParticleFilter.h	/^	virtual void SetParticle(ParticleWithChannelEstimation *particle,int n)$/;"	f	class:ParticleFilter
SetParticle	smc/ParticleFilterWithChannelOrder.h	/^    void SetParticle(ParticleWithChannelEstimation *particle,int n)$/;"	f	class:ParticleFilterWithChannelOrder
SetSNR	transmision/ChannelDependentNoise.cpp	/^void ChannelDependentNoise::SetSNR(int SNR,double alphabetVariance)$/;"	f	class:ChannelDependentNoise
SetSNR	transmision/ChannelDependentNoise.h	/^	void SetSNR(int SNR,double alphabetVariance);$/;"	p	class:ChannelDependentNoise
SetSymbolVector	smc/Particle.h	/^	void SetSymbolVector(int n,const std::vector<tSymbol> &v)$/;"	f	class:Particle
SetSymbolVector	smc/Particle.h	/^	void SetSymbolVector(int n,const tVector &v) { _symbolVectors.col(n).inject(v);}$/;"	f	class:Particle
SetSymbolVectors	smc/Particle.h	/^	void SetSymbolVectors(const tRange &range,const tMatrix &symbolVectors) { _symbolVectors(_rAllSymbolRows,range).inject(symbolVectors);}$/;"	f	class:Particle
SetSymbolVectors	smc/Particle.h	/^	void SetSymbolVectors(int a,int b,const tMatrix &symbolVectors) { _symbolVectors(_rAllSymbolRows,tRange(a,b)).inject(symbolVectors);}$/;"	f	class:Particle
SetWeight	smc/Particle.h	/^	void SetWeight(double weight) { _weight = weight;}$/;"	f	class:Particle
SquareError	util/Util.cpp	/^double Util::SquareError(const tMatrix &A,const tMatrix &B)$/;"	f	class:Util
SquareError	util/Util.h	/^    static double SquareError(const tMatrix &A,const tMatrix &B);$/;"	p	class:Util
StatUtil	statistics/StatUtil.h	/^class StatUtil{$/;"	c
StateStep	detection/LinearDetector.h	/^	virtual void StateStep(tVector observations) = 0;$/;"	p	class:LinearDetector
StateStep	detection/RMMSEDetector.h	/^	void StateStep(tVector observations)$/;"	f	class:RMMSEDetector
StdDevAt	transmision/ChannelDependentNoise.cpp	/^double ChannelDependentNoise::StdDevAt(int n)$/;"	f	class:ChannelDependentNoise
StdDevAt	transmision/ChannelDependentNoise.h	/^	double StdDevAt(int n);$/;"	p	class:ChannelDependentNoise
StdDevAt	transmision/Noise.h	/^	virtual double StdDevAt(int n) = 0;$/;"	p	class:Noise
StdResamplingAlgorithm	smc/StdResamplingAlgorithm.cpp	/^StdResamplingAlgorithm::StdResamplingAlgorithm(ResamplingCriterion resamplingCriterion):ResamplingAlgorithm(resamplingCriterion)$/;"	f	class:StdResamplingAlgorithm
StdResamplingAlgorithm	smc/StdResamplingAlgorithm.h	/^    StdResamplingAlgorithm(ResamplingCriterion resamplingCriterion);$/;"	p	class:StdResamplingAlgorithm
StdResamplingAlgorithm	smc/StdResamplingAlgorithm.h	/^class StdResamplingAlgorithm : public ResamplingAlgorithm{$/;"	c
Step	filters/KalmanFilter.cpp	/^void KalmanFilter::Step(tMatrix F,tVector observation, tMatrix observationEquationCovariance)$/;"	f	class:KalmanFilter
Step	filters/KalmanFilter.h	/^	void Step(tMatrix F,tVector observation, tMatrix observationEquationCovariance);$/;"	p	class:KalmanFilter
Sum	util/Util.cpp	/^double Util::Sum(const tVector &v)$/;"	f	class:Util
Sum	util/Util.h	/^	static double Sum(const tVector &v);$/;"	p	class:Util
SymbolsArrayToInt	transmision/Alphabet.cpp	/^int Alphabet::SymbolsArrayToInt(vector<tSymbol> symbolsVector)$/;"	f	class:Alphabet
SymbolsArrayToInt	transmision/Alphabet.h	/^		int SymbolsArrayToInt(std::vector<tSymbol> symbolsVector);$/;"	p	class:Alphabet
TIPOS_H	src/types.h	/^#define TIPOS_H$/;"	d
ToMatrix	util/Util.cpp	/^tMatrix Util::ToMatrix(const tVector &vector,tOrder order,int rows)$/;"	f	class:Util
ToMatrix	util/Util.cpp	/^tMatrix Util::ToMatrix(const tVector &vector,tOrder order,int rows,int cols)$/;"	f	class:Util
ToMatrix	util/Util.h	/^	static tMatrix ToMatrix(const tVector &vector,tOrder order,int rows);$/;"	p	class:Util
ToMatrix	util/Util.h	/^	static tMatrix ToMatrix(const tVector &vector,tOrder order,int rows,int cols);$/;"	p	class:Util
ToVector	util/Util.cpp	/^tVector Util::ToVector(const tMatrix &matrix,tOrder order)$/;"	f	class:Util
ToVector	util/Util.h	/^	static tVector ToVector(const tMatrix &matrix,tOrder order);$/;"	p	class:Util
TrajectoryLength	smc/Particle.h	/^	int TrajectoryLength() { return _nTimeInstants;}$/;"	f	class:Particle
Transmit	transmision/MIMOChannel.cpp	/^tMatrix MIMOChannel::Transmit(tMatrix &symbols,Noise &noise)$/;"	f	class:MIMOChannel
Transmit	transmision/MIMOChannel.h	/^	tMatrix Transmit(tMatrix &symbols,Noise &noise);$/;"	p	class:MIMOChannel
Transpose	util/Util.cpp	/^void Util::Transpose(const tMatrix &A,tMatrix &B)$/;"	f	class:Util
Transpose	util/Util.h	/^	static void Transpose(const tMatrix &A,tMatrix &B);$/;"	p	class:Util
UNKNOWNCHANNELALGORITHM_H	algorithms/UnknownChannelAlgorithm.h	/^#define UNKNOWNCHANNELALGORITHM_H$/;"	d
UNKNOWNCHANNELORDERALGORITHM_H	algorithms/UnknownChannelOrderAlgorithm.h	/^#define UNKNOWNCHANNELORDERALGORITHM_H$/;"	d
UNKNOWNCHANNELORDERSMCALGORITHM_H	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^#define UNKNOWNCHANNELORDERSMCALGORITHM_H$/;"	d
UTILEXCEPTIONS_H	util/utilExceptions.h	/^#define UTILEXCEPTIONS_H$/;"	d
UTIL_H	util/Util.h	/^#define UTIL_H$/;"	d
UnknownChannelAlgorithm	algorithms/UnknownChannelAlgorithm.cpp	/^UnknownChannelAlgorithm::UnknownChannelAlgorithm(string name, Alphabet  alphabet,int L,int N, int K) : Algorithm(name,alphabet,L,N,K)$/;"	f	class:UnknownChannelAlgorithm
UnknownChannelAlgorithm	algorithms/UnknownChannelAlgorithm.h	/^    UnknownChannelAlgorithm(string name, Alphabet  alphabet,int L,int N, int K);$/;"	p	class:UnknownChannelAlgorithm
UnknownChannelAlgorithm	algorithms/UnknownChannelAlgorithm.h	/^class UnknownChannelAlgorithm : public Algorithm$/;"	c
UnknownChannelOrderAlgorithm	algorithms/UnknownChannelOrderAlgorithm.cpp	/^UnknownChannelOrderAlgorithm::UnknownChannelOrderAlgorithm(string name, Alphabet alphabet, int L, int N, int K,vector<ChannelMatrixEstimator *> channelEstimators,tMatrix preamble,int iFirstObservation): UnknownChannelAlgorithm(name, alphabet, L, N, K),_channelEstimators(channelEstimators.size()),_preamble(preamble),_candidateOrders( channelEstimators.size()),_maxOrder(channelEstimators[0]->Cols()\/_N),_minOrder(channelEstimators[0]->Cols()\/_N),_iFirstObservation(iFirstObservation)$/;"	f	class:UnknownChannelOrderAlgorithm
UnknownChannelOrderAlgorithm	algorithms/UnknownChannelOrderAlgorithm.h	/^    UnknownChannelOrderAlgorithm(string name, Alphabet alphabet, int L, int N, int K,vector<ChannelMatrixEstimator *> channelEstimators,tMatrix preamble,int iFirstObservation);$/;"	p	class:UnknownChannelOrderAlgorithm
UnknownChannelOrderAlgorithm	algorithms/UnknownChannelOrderAlgorithm.h	/^class UnknownChannelOrderAlgorithm : public UnknownChannelAlgorithm$/;"	c
UnknownChannelOrderSMCAlgorithm	algorithms/UnknownChannelOrderSMCAlgorithm.cpp	/^UnknownChannelOrderSMCAlgorithm::UnknownChannelOrderSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int firstObservationIndex,int smoothingLag,int nParticles,ResamplingAlgorithm *resamplingAlgorithm): UnknownChannelOrderAlgorithm(name, alphabet, L, N, K, channelEstimators, preamble, firstObservationIndex),$/;"	f	class:UnknownChannelOrderSMCAlgorithm
UnknownChannelOrderSMCAlgorithm	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^    UnknownChannelOrderSMCAlgorithm(string name, Alphabet alphabet, int L, int N, int K, vector< ChannelMatrixEstimator * > channelEstimators, tMatrix preamble, int firstObservationIndex,int smoothingLag,int nParticles,ResamplingAlgorithm *resamplingAlgorithm);$/;"	p	class:UnknownChannelOrderSMCAlgorithm
UnknownChannelOrderSMCAlgorithm	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^class UnknownChannelOrderSMCAlgorithm : public UnknownChannelOrderAlgorithm$/;"	c
Util	util/Util.h	/^class Util{$/;"	c
VERSION	optimized/config.h	/^#define VERSION /;"	d
VITERBIALGORITHM_H	algorithms/ViterbiAlgorithm.h	/^#define VITERBIALGORITHM_H$/;"	d
Variance	statistics/StatUtil.cpp	/^double StatUtil::Variance(const tVector &v)$/;"	f	class:StatUtil
Variance	statistics/StatUtil.h	/^	static double Variance(const tVector &v);$/;"	p	class:StatUtil
Variance	transmision/Alphabet.h	/^		double Variance() { return _variance;}$/;"	f	class:Alphabet
VarianceAt	transmision/Noise.h	/^	double VarianceAt(int n){ double stdDev = StdDevAt(n); return stdDev*stdDev;};$/;"	f	class:Noise
Variances	transmision/Noise.cpp	/^vector<double> Noise::Variances()$/;"	f	class:Noise
Variances	transmision/Noise.h	/^	vector<double> Variances();$/;"	p	class:Noise
ViterbiAlgorithm	algorithms/ViterbiAlgorithm.cpp	/^ViterbiAlgorithm::ViterbiAlgorithm(string name, Alphabet alphabet,int L,int N, int K, const MIMOChannel& channel,const tMatrix &preamble,int smoothingLag): KnownChannelAlgorithm(name, alphabet, L, N, K,  channel),_preamble(preamble),rAllSymbolRows(0,_channel.Nt()-1),rmMinus1FirstColumns(0,_channel.Memory()-2),_d(smoothingLag)$/;"	f	class:ViterbiAlgorithm
ViterbiAlgorithm	algorithms/ViterbiAlgorithm.h	/^    ViterbiAlgorithm(string name, Alphabet alphabet,int L,int N, int K, const MIMOChannel& channel,const tMatrix &preamble,int smoothingLag);$/;"	p	class:ViterbiAlgorithm
ViterbiAlgorithm	algorithms/ViterbiAlgorithm.h	/^class ViterbiAlgorithm : public KnownChannelAlgorithm$/;"	c
WITHCHANNELORDERAPPPARTICLEADDON_H	smc/WithChannelOrderAppParticleAddon.h	/^#define WITHCHANNELORDERAPPPARTICLEADDON_H$/;"	d
WITHCHANNELORDERPARTICLEADDON_H	smc/WithChannelOrderParticleAddon.h	/^#define WITHCHANNELORDERPARTICLEADDON_H$/;"	d
WITHLINEARDETECTIONPARTICLEADDON_H	smc/WithLinearDetectionParticleAddon.h	/^#define WITHLINEARDETECTIONPARTICLEADDON_H$/;"	d
WithChannelOrderAppParticleAddon	smc/WithChannelOrderAppParticleAddon.cpp	/^WithChannelOrderAppParticleAddon::WithChannelOrderAppParticleAddon(const WithChannelOrderAppParticleAddon& withChannelOrderAppParticleAddon):_channelOrderAPP(withChannelOrderAppParticleAddon._channelOrderAPP)$/;"	f	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	smc/WithChannelOrderAppParticleAddon.cpp	/^WithChannelOrderAppParticleAddon::WithChannelOrderAppParticleAddon(int nChannelOrderAPP):_channelOrderAPP(nChannelOrderAPP)$/;"	f	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	smc/WithChannelOrderAppParticleAddon.cpp	/^WithChannelOrderAppParticleAddon::WithChannelOrderAppParticleAddon(std::vector<double> channelOrderAPP):_channelOrderAPP(channelOrderAPP)$/;"	f	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	smc/WithChannelOrderAppParticleAddon.h	/^	WithChannelOrderAppParticleAddon(const WithChannelOrderAppParticleAddon& withChannelOrderAppParticleAddon);$/;"	p	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	smc/WithChannelOrderAppParticleAddon.h	/^    WithChannelOrderAppParticleAddon(int nChannelOrderAPP);$/;"	p	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	smc/WithChannelOrderAppParticleAddon.h	/^    WithChannelOrderAppParticleAddon(std::vector<double> channelOrderAPP);$/;"	p	class:WithChannelOrderAppParticleAddon
WithChannelOrderAppParticleAddon	smc/WithChannelOrderAppParticleAddon.h	/^class WithChannelOrderAppParticleAddon{$/;"	c
WithChannelOrderParticleAddon	smc/WithChannelOrderParticleAddon.cpp	/^WithChannelOrderParticleAddon::WithChannelOrderParticleAddon(const WithChannelOrderParticleAddon& withChannelOrderParticleAddon):_m(withChannelOrderParticleAddon._m)$/;"	f	class:WithChannelOrderParticleAddon
WithChannelOrderParticleAddon	smc/WithChannelOrderParticleAddon.cpp	/^WithChannelOrderParticleAddon::WithChannelOrderParticleAddon(int m):_m(m)$/;"	f	class:WithChannelOrderParticleAddon
WithChannelOrderParticleAddon	smc/WithChannelOrderParticleAddon.h	/^    WithChannelOrderParticleAddon(const WithChannelOrderParticleAddon& withChannelOrderParticleAddon);$/;"	p	class:WithChannelOrderParticleAddon
WithChannelOrderParticleAddon	smc/WithChannelOrderParticleAddon.h	/^    WithChannelOrderParticleAddon(int m);$/;"	p	class:WithChannelOrderParticleAddon
WithChannelOrderParticleAddon	smc/WithChannelOrderParticleAddon.h	/^class WithChannelOrderParticleAddon{$/;"	c
WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.cpp	/^WithLinearDetectionParticleAddon::WithLinearDetectionParticleAddon(LinearDetector *linearDetector):_linearDetectors(1)$/;"	f	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.cpp	/^WithLinearDetectionParticleAddon::WithLinearDetectionParticleAddon(const WithLinearDetectionParticleAddon& withLinearDetectionParticleAddon):_linearDetectors(withLinearDetectionParticleAddon._linearDetectors.size())$/;"	f	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.cpp	/^WithLinearDetectionParticleAddon::WithLinearDetectionParticleAddon(std::vector<LinearDetector *> linearDetectors):_linearDetectors(linearDetectors)$/;"	f	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.h	/^	WithLinearDetectionParticleAddon(const WithLinearDetectionParticleAddon& withLinearDetectionParticleAddon);$/;"	p	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.h	/^    WithLinearDetectionParticleAddon(LinearDetector *linearDetector);$/;"	p	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.h	/^    WithLinearDetectionParticleAddon(std::vector<LinearDetector *> linearDetectors);$/;"	p	class:WithLinearDetectionParticleAddon
WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.h	/^class WithLinearDetectionParticleAddon{$/;"	c
_ARcoefficient	algorithms/LinearFilterBasedSMCAlgorithm.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_ARproc	transmision/ARchannel.h	/^	ARprocess _ARproc;$/;"	m	class:ARchannel
_ARprocessVariance	algorithms/LinearFilterBasedSMCAlgorithm.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_B	estimation/KalmanEstimator.h	/^	tMatrix _FtransInvNoiseCovariance,_B;$/;"	m	class:KalmanEstimator
_E	detection/RMMSEDetector.h	/^	tMatrix _E,_varianceInvRtildeChannelMatrix;$/;"	m	class:RMMSEDetector
_F	estimation/KalmanEstimator.h	/^	tMatrix _F;$/;"	m	class:KalmanEstimator
_FpredictiveCovariance	filters/KalmanFilter.h	/^	tMatrix _predictiveCovarianceFtrans,_auxMatrix,_KalmanGain,_FpredictiveCovariance;$/;"	m	class:KalmanFilter
_FtransInvNoiseCovariance	estimation/KalmanEstimator.h	/^	tMatrix _FtransInvNoiseCovariance,_B;$/;"	m	class:KalmanEstimator
_K	algorithms/Algorithm.h	/^    int _L,_N,_K;$/;"	m	class:Algorithm
_KalmanGain	filters/KalmanFilter.h	/^	tMatrix _predictiveCovarianceFtrans,_auxMatrix,_KalmanGain,_FpredictiveCovariance;$/;"	m	class:KalmanFilter
_KalmanGainByNotPredicted	filters/KalmanFilter.h	/^	tVector _auxVector,_KalmanGainByNotPredicted;$/;"	m	class:KalmanFilter
_KalmanGainFpredictiveCovariance	filters/KalmanFilter.h	/^	tMatrix _KalmanGainFpredictiveCovariance,_predictiveCovarianceAux;$/;"	m	class:KalmanFilter
_L	algorithms/Algorithm.h	/^    int _L,_N,_K;$/;"	m	class:Algorithm
_L	estimation/ChannelMatrixEstimator.h	/^	int _L,_Nm;$/;"	m	class:ChannelMatrixEstimator
_N	algorithms/Algorithm.h	/^    int _L,_N,_K;$/;"	m	class:Algorithm
_Nm	algorithms/KnownChannelOrderAlgorithm.h	/^	int _m,_Nm;$/;"	m	class:KnownChannelOrderAlgorithm
_Nm	estimation/ChannelMatrixEstimator.h	/^	int _L,_Nm;$/;"	m	class:ChannelMatrixEstimator
_R	filters/KalmanFilter.h	/^	tMatrix _R, _Rtranspose, _stateEquationCovariance;$/;"	m	class:KalmanFilter
_RfilteredCovariance	filters/KalmanFilter.h	/^	tMatrix _RfilteredCovariance,_RfilteredCovarianceRtrans;$/;"	m	class:KalmanFilter
_RfilteredCovarianceRtrans	filters/KalmanFilter.h	/^	tMatrix _RfilteredCovariance,_RfilteredCovarianceRtrans;$/;"	m	class:KalmanFilter
_Rtranspose	filters/KalmanFilter.h	/^	tMatrix _R, _Rtranspose, _stateEquationCovariance;$/;"	m	class:KalmanFilter
_allObservationRows	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    tRange _allObservationRows,_allSymbolRows;$/;"	m	class:LinearFilterBasedISIRAlgorithm
_allSymbolRows	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    tRange _allObservationRows,_allSymbolRows;$/;"	m	class:LinearFilterBasedISIRAlgorithm
_allSymbolsRows	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    tRange _allSymbolsRows;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_allSymbolsRows	algorithms/SMCAlgorithm.h	/^    tRange _allSymbolsRows;$/;"	m	class:SMCAlgorithm
_allSymbolsRows	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^    tRange _allSymbolsRows;$/;"	m	class:UnknownChannelOrderSMCAlgorithm
_alphabet	algorithms/Algorithm.h	/^	Alphabet _alphabet;$/;"	m	class:Algorithm
_alphabetVariance	detection/LinearDetector.h	/^	double _alphabetVariance;$/;"	m	class:LinearDetector
_arrivalStage	algorithms/ViterbiAlgorithm.h	/^    tState *_exitStage, *_arrivalStage;$/;"	m	class:ViterbiAlgorithm
_auxAuxArgExp	estimation/KalmanEstimator.h	/^	tVector _invPredictiveCovariancePredictiveMean,_auxAuxArgExp,_auxAuxArgExpInvB,_observationsNoiseCovariance;$/;"	m	class:KalmanEstimator
_auxAuxArgExpInvB	estimation/KalmanEstimator.h	/^	tVector _invPredictiveCovariancePredictiveMean,_auxAuxArgExp,_auxAuxArgExpInvB,_observationsNoiseCovariance;$/;"	m	class:KalmanEstimator
_auxInvRtilde	detection/RMMSEDetector.h	/^	tMatrix _identityMinusgObservations,_auxInvRtilde;$/;"	m	class:RMMSEDetector
_auxMatrix	filters/KalmanFilter.h	/^	tMatrix _predictiveCovarianceFtrans,_auxMatrix,_KalmanGain,_FpredictiveCovariance;$/;"	m	class:KalmanFilter
_auxVector	filters/KalmanFilter.h	/^	tVector _auxVector,_KalmanGainByNotPredicted;$/;"	m	class:KalmanFilter
_bitsSequences	transmision/Alphabet.h	/^		std::vector<std::vector<tBit> > _bitsSequences;$/;"	m	class:Alphabet
_buffer	statistics/ARprocess.h	/^	tMatrix **_buffer;$/;"	m	class:ARprocess
_candidateOrders	algorithms/UnknownChannelOrderAlgorithm.h	/^    vector<int> _candidateOrders;$/;"	m	class:UnknownChannelOrderAlgorithm
_candidateOrders	smc/ParticleFilterWithChannelOrder.h	/^    vector<int> _candidateOrders;$/;"	m	class:ParticleFilterWithChannelOrder
_channel	algorithms/KnownChannelAlgorithm.h	/^	const MIMOChannel &_channel;$/;"	m	class:KnownChannelAlgorithm
_channel	transmision/ChannelDependentNoise.h	/^	MIMOChannel *_channel;$/;"	m	class:ChannelDependentNoise
_channelEstimator	algorithms/KnownChannelOrderAlgorithm.h	/^	ChannelMatrixEstimator *_channelEstimator;$/;"	m	class:KnownChannelOrderAlgorithm
_channelEstimators	algorithms/UnknownChannelOrderAlgorithm.h	/^	vector<ChannelMatrixEstimator *> _channelEstimators;$/;"	m	class:UnknownChannelOrderAlgorithm
_channelMatrices	transmision/ARchannel.h	/^	tMatrix* _channelMatrices;$/;"	m	class:ARchannel
_channelMatrixCols	detection/LinearDetector.h	/^	int _channelMatrixRows, _channelMatrixCols;$/;"	m	class:LinearDetector
_channelMatrixEstimators	smc/ParticleWithChannelEstimation.h	/^	std::vector<ChannelMatrixEstimator *> _channelMatrixEstimators;$/;"	m	class:ParticleWithChannelEstimation
_channelMatrixRows	detection/LinearDetector.h	/^	int _channelMatrixRows, _channelMatrixCols;$/;"	m	class:LinearDetector
_channelOrder2index	algorithms/UnknownChannelOrderAlgorithm.h	/^	int *_channelOrder2index;$/;"	m	class:UnknownChannelOrderAlgorithm
_channelOrder2index	smc/ParticleFilterWithChannelOrder.h	/^    int _maxOrder,*_channelOrder2index,*_nParticlesPerChannelOrder;$/;"	m	class:ParticleFilterWithChannelOrder
_channelOrderAPP	smc/WithChannelOrderAppParticleAddon.h	/^	std::vector<double> _channelOrderAPP;$/;"	m	class:WithChannelOrderAppParticleAddon
_channelOrderWeightsSum	smc/ParticleFilterWithChannelOrder.h	/^    double *_channelOrderWeightsSum;$/;"	m	class:ParticleFilterWithChannelOrder
_coefficients	statistics/ARprocess.h	/^	vector<double> _coefficients;$/;"	m	class:ARprocess
_columns	statistics/ARprocess.h	/^	int _nCoefficients, _rows, _columns, _iNextMatrix;$/;"	m	class:ARprocess
_d	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    int _d,_startDetectionObservation,_startDetectionSymbolVector;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_d	algorithms/SMCAlgorithm.h	/^    int _d,_startDetectionTime;$/;"	m	class:SMCAlgorithm
_d	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^    int _d,_startDetectionObservation,_startDetectionSymbolVector;$/;"	m	class:UnknownChannelOrderSMCAlgorithm
_d	algorithms/ViterbiAlgorithm.h	/^    int _nStates,_nPossibleInputs,_d;$/;"	m	class:ViterbiAlgorithm
_deltaMatrix	estimation/LMSEstimator.h	/^	tMatrix _deltaMatrix;$/;"	m	class:LMSEstimator
_detectedSymbolVectors	algorithms/ViterbiAlgorithm.h	/^    tMatrix _preamble,*_detectedSymbolVectors;$/;"	m	class:ViterbiAlgorithm
_error	estimation/LMSEstimator.h	/^	tVector _predictedObservations,_error;$/;"	m	class:LMSEstimator
_estimatedChannelMatrices	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^    vector<tMatrix> _estimatedChannelMatrices;$/;"	m	class:KnownSymbolsKalmanBasedChannelEstimator
_estimatedChannelMatrices	smc/ParticleWithChannelEstimation.h	/^	tMatrix **_estimatedChannelMatrices;$/;"	m	class:ParticleWithChannelEstimation
_exitStage	algorithms/ViterbiAlgorithm.h	/^    tState *_exitStage, *_arrivalStage;$/;"	m	class:ViterbiAlgorithm
_filter	detection/RMMSEDetector.h	/^	tMatrix _filter;$/;"	m	class:RMMSEDetector
_filteredCovariance	filters/KalmanFilter.h	/^	tMatrix _predictiveCovariance,_filteredCovariance;$/;"	m	class:KalmanFilter
_filteredMean	filters/KalmanFilter.h	/^	tVector _predictiveMean,_filteredMean;$/;"	m	class:KalmanFilter
_forgettingFactor	estimation/RLSEstimator.h	/^	double _forgettingFactor,_invForgettingFactor;$/;"	m	class:RLSEstimator
_g	detection/RMMSEDetector.h	/^	tVector _g;$/;"	m	class:RMMSEDetector
_g	estimation/RLSEstimator.h	/^    tVector _invForgettingFactorSymbolsVectorInvRtilde,_g,_invForgettingFactorInvRtildeSymbolsVector;$/;"	m	class:RLSEstimator
_gObservations	detection/RMMSEDetector.h	/^	tMatrix _identityL,_gObservations;$/;"	m	class:RMMSEDetector
_iFirstObservation	algorithms/UnknownChannelOrderAlgorithm.h	/^	int _maxOrder,_minOrder,_iFirstObservation;$/;"	m	class:UnknownChannelOrderAlgorithm
_iNextMatrix	statistics/ARprocess.h	/^	int _nCoefficients, _rows, _columns, _iNextMatrix;$/;"	m	class:ARprocess
_identityL	detection/RMMSEDetector.h	/^	tMatrix _identityL,_gObservations;$/;"	m	class:RMMSEDetector
_identityL	estimation/KalmanEstimator.h	/^	tMatrix _identityL;$/;"	m	class:KalmanEstimator
_identityMinusgObservations	detection/RMMSEDetector.h	/^	tMatrix _identityMinusgObservations,_auxInvRtilde;$/;"	m	class:RMMSEDetector
_invForgettingFactor	detection/RMMSEDetector.h	/^	double _invForgettingFactor;$/;"	m	class:RMMSEDetector
_invForgettingFactor	estimation/RLSEstimator.h	/^	double _forgettingFactor,_invForgettingFactor;$/;"	m	class:RLSEstimator
_invForgettingFactorInvRtildeSymbolsVector	estimation/RLSEstimator.h	/^    tVector _invForgettingFactorSymbolsVectorInvRtilde,_g,_invForgettingFactorInvRtildeSymbolsVector;$/;"	m	class:RLSEstimator
_invForgettingFactorInvRtildeSymbolsVectorg	estimation/RLSEstimator.h	/^    tMatrix _invForgettingFactorInvRtildeSymbolsVectorg,_observationsSymbolsVector,_pTildeInvRtilde;$/;"	m	class:RLSEstimator
_invForgettingFactorSymbolsVectorInvRtilde	estimation/RLSEstimator.h	/^    tVector _invForgettingFactorSymbolsVectorInvRtilde,_g,_invForgettingFactorInvRtildeSymbolsVector;$/;"	m	class:RLSEstimator
_invPredictiveCovariancePredictiveMean	estimation/KalmanEstimator.h	/^	tVector _invPredictiveCovariancePredictiveMean,_auxAuxArgExp,_auxAuxArgExpInvB,_observationsNoiseCovariance;$/;"	m	class:KalmanEstimator
_invRtilde	detection/RMMSEDetector.h	/^	tMatrix _invRtilde;$/;"	m	class:RMMSEDetector
_invRtilde	estimation/RLSEstimator.h	/^	tMatrix _invRtilde,_pTilde;$/;"	m	class:RLSEstimator
_iterationsForConvergence	statistics/ARprocess.h	/^	int _iterationsForConvergence;$/;"	m	class:ARprocess
_kalmanFilter	estimation/KalmanEstimator.h	/^	KalmanFilter *_kalmanFilter;$/;"	m	class:KalmanEstimator
_lastEstimatedChannelMatrix	estimation/ChannelMatrixEstimator.h	/^	tMatrix _lastEstimatedChannelMatrix;$/;"	m	class:ChannelMatrixEstimator
_length	transmision/Alphabet.h	/^		int _nBitsBySymbol,_length;$/;"	m	class:Alphabet
_length	transmision/MIMOChannel.h	/^	int _nTx, _nRx, _memory,_length,_nTxnRx,_nTxnRxMemory,_nTxMemory;$/;"	m	class:MIMOChannel
_length	transmision/Noise.h	/^	int _nRx,_length;$/;"	m	class:Noise
_linearDetector	algorithms/LinearFilterBasedSMCAlgorithm.h	/^	LinearDetector *_linearDetector;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_linearDetectors	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    vector<LinearDetector *> _linearDetectors;$/;"	m	class:LinearFilterBasedISIRAlgorithm
_linearDetectors	smc/WithLinearDetectionParticleAddon.h	/^    std::vector<LinearDetector *> _linearDetectors;$/;"	m	class:WithLinearDetectionParticleAddon
_m	algorithms/KnownChannelOrderAlgorithm.h	/^	int _m,_Nm;$/;"	m	class:KnownChannelOrderAlgorithm
_m	smc/WithChannelOrderParticleAddon.h	/^	int _m;$/;"	m	class:WithChannelOrderParticleAddon
_matrix	transmision/Noise.h	/^	tMatrix _matrix;$/;"	m	class:Noise
_maxOrder	algorithms/UnknownChannelOrderAlgorithm.h	/^	int _maxOrder,_minOrder,_iFirstObservation;$/;"	m	class:UnknownChannelOrderAlgorithm
_maxOrder	smc/ParticleFilterWithChannelOrder.h	/^    int _maxOrder,*_channelOrder2index,*_nParticlesPerChannelOrder;$/;"	m	class:ParticleFilterWithChannelOrder
_mean	transmision/Alphabet.h	/^		double _mean,_variance;$/;"	m	class:Alphabet
_memory	transmision/MIMOChannel.h	/^	int _nTx, _nRx, _memory,_length,_nTxnRx,_nTxnRxMemory,_nTxMemory;$/;"	m	class:MIMOChannel
_minOrder	algorithms/UnknownChannelOrderAlgorithm.h	/^	int _maxOrder,_minOrder,_iFirstObservation;$/;"	m	class:UnknownChannelOrderAlgorithm
_mu	estimation/LMSEstimator.h	/^	double _mu;$/;"	m	class:LMSEstimator
_nBitsBySymbol	transmision/Alphabet.h	/^		int _nBitsBySymbol,_length;$/;"	m	class:Alphabet
_nChannelCoefficients	estimation/KalmanEstimator.h	/^	int _nChannelCoefficients;$/;"	m	class:KalmanEstimator
_nCoefficients	statistics/ARprocess.h	/^	int _nCoefficients, _rows, _columns, _iNextMatrix;$/;"	m	class:ARprocess
_nElementsToEstimate	filters/KalmanFilter.h	/^	int _nElementsToEstimate;$/;"	m	class:KalmanFilter
_nParticles	smc/ParticleFilter.h	/^    int _nParticles;$/;"	m	class:ParticleFilter
_nParticlesPerChannelOrder	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	vector<int> _nParticlesPerChannelOrder;$/;"	m	class:UnknownChannelOrderSMCAlgorithm
_nParticlesPerChannelOrder	smc/ParticleFilterWithChannelOrder.h	/^    int _maxOrder,*_channelOrder2index,*_nParticlesPerChannelOrder;$/;"	m	class:ParticleFilterWithChannelOrder
_nPossibleInputs	algorithms/ViterbiAlgorithm.h	/^    int _nStates,_nPossibleInputs,_d;$/;"	m	class:ViterbiAlgorithm
_nRx	transmision/MIMOChannel.h	/^	int _nTx, _nRx, _memory,_length,_nTxnRx,_nTxnRxMemory,_nTxMemory;$/;"	m	class:MIMOChannel
_nRx	transmision/Noise.h	/^	int _nRx,_length;$/;"	m	class:Noise
_nStates	algorithms/ViterbiAlgorithm.h	/^    int _nStates,_nPossibleInputs,_d;$/;"	m	class:ViterbiAlgorithm
_nSymbolsToBeDetected	detection/RMMSEDetector.h	/^	int _nSymbolsToBeDetected;$/;"	m	class:RMMSEDetector
_nTimeInstants	smc/Particle.h	/^	int _symbolVectorLength,_nTimeInstants;$/;"	m	class:Particle
_nTx	transmision/MIMOChannel.h	/^	int _nTx, _nRx, _memory,_length,_nTxnRx,_nTxnRxMemory,_nTxMemory;$/;"	m	class:MIMOChannel
_nTxMemory	transmision/MIMOChannel.h	/^	int _nTx, _nRx, _memory,_length,_nTxnRx,_nTxnRxMemory,_nTxMemory;$/;"	m	class:MIMOChannel
_nTxnRx	transmision/MIMOChannel.h	/^	int _nTx, _nRx, _memory,_length,_nTxnRx,_nTxnRxMemory,_nTxMemory;$/;"	m	class:MIMOChannel
_nTxnRxMemory	transmision/MIMOChannel.h	/^	int _nTx, _nRx, _memory,_length,_nTxnRx,_nTxnRxMemory,_nTxMemory;$/;"	m	class:MIMOChannel
_name	algorithms/Algorithm.h	/^	string _name;$/;"	m	class:Algorithm
_noiseMean	statistics/ARprocess.h	/^	double _noiseMean;$/;"	m	class:ARprocess
_noiseVariance	statistics/ARprocess.h	/^	double _noiseVariance;$/;"	m	class:ARprocess
_observationVectorLength	filters/KalmanFilter.h	/^	int _observationVectorLength;$/;"	m	class:KalmanFilter
_observations	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	tMatrix _observations;$/;"	m	class:UnknownChannelOrderSMCAlgorithm
_observationsNoiseCovariance	estimation/KalmanEstimator.h	/^	tVector _invPredictiveCovariancePredictiveMean,_auxAuxArgExp,_auxAuxArgExpInvB,_observationsNoiseCovariance;$/;"	m	class:KalmanEstimator
_observationsSymbolsVector	estimation/RLSEstimator.h	/^    tMatrix _invForgettingFactorInvRtildeSymbolsVectorg,_observationsSymbolsVector,_pTildeInvRtilde;$/;"	m	class:RLSEstimator
_pTilde	estimation/RLSEstimator.h	/^	tMatrix _invRtilde,_pTilde;$/;"	m	class:RLSEstimator
_pTildeInvRtilde	estimation/RLSEstimator.h	/^    tMatrix _invForgettingFactorInvRtildeSymbolsVectorg,_observationsSymbolsVector,_pTildeInvRtilde;$/;"	m	class:RLSEstimator
_particleFilter	algorithms/ISIR.h	/^	ParticleFilter _particleFilter;	$/;"	m	class:ISIR
_particleFilter	algorithms/LinearFilterBasedISIRAlgorithm.h	/^	ParticleFilter _particleFilter;$/;"	m	class:LinearFilterBasedISIRAlgorithm
_particleFilter	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    ParticleFilterWithChannelOrder _particleFilter;$/;"	m	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
_particleFilter	algorithms/SMCAlgorithm.h	/^	ParticleFilter _particleFilter;$/;"	m	class:SMCAlgorithm
_particleFilter	algorithms/SampledChannelOrderSMCAlgorithm.h	/^	ParticleFilterWithChannelOrder _particleFilter;$/;"	m	class:SampledChannelOrderSMCAlgorithm
_particleFilter	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	ParticleFilterWithChannelOrder _particleFilter;$/;"	m	class:UnknownChannelOrderSMCAlgorithm
_particles	smc/ParticleFilter.h	/^    ParticleWithChannelEstimation **_particles;$/;"	m	class:ParticleFilter
_piv	estimation/KalmanEstimator.h	/^	tLongIntVector _piv;$/;"	m	class:KalmanEstimator
_piv	filters/KalmanFilter.h	/^	tLongIntVector _piv;$/;"	m	class:KalmanFilter
_preamble	algorithms/KnownChannelOrderAlgorithm.h	/^	tMatrix _preamble;$/;"	m	class:KnownChannelOrderAlgorithm
_preamble	algorithms/UnknownChannelOrderAlgorithm.h	/^	tMatrix _preamble;$/;"	m	class:UnknownChannelOrderAlgorithm
_preamble	algorithms/ViterbiAlgorithm.h	/^    tMatrix _preamble,*_detectedSymbolVectors;$/;"	m	class:ViterbiAlgorithm
_predictedObservations	estimation/LMSEstimator.h	/^	tVector _predictedObservations,_error;$/;"	m	class:LMSEstimator
_predictiveCovariance	filters/KalmanFilter.h	/^	tMatrix _predictiveCovariance,_filteredCovariance;$/;"	m	class:KalmanFilter
_predictiveCovarianceAux	filters/KalmanFilter.h	/^	tMatrix _KalmanGainFpredictiveCovariance,_predictiveCovarianceAux;$/;"	m	class:KalmanFilter
_predictiveCovarianceFtrans	filters/KalmanFilter.h	/^	tMatrix _predictiveCovarianceFtrans,_auxMatrix,_KalmanGain,_FpredictiveCovariance;$/;"	m	class:KalmanFilter
_predictiveMean	filters/KalmanFilter.h	/^	tVector _predictiveMean,_filteredMean;$/;"	m	class:KalmanFilter
_rAllSymbolRows	smc/Particle.h	/^	tRange _rAllSymbolRows;$/;"	m	class:Particle
_randomGenerator	statistics/ARprocess.h	/^	Random _randomGenerator;$/;"	m	class:ARprocess
_resamplingAlgorithm	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    ResamplingAlgorithm *_resamplingAlgorithm;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_resamplingAlgorithm	algorithms/SMCAlgorithm.h	/^	StdResamplingAlgorithm _resamplingAlgorithm;$/;"	m	class:SMCAlgorithm
_resamplingAlgorithm	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^	ResamplingAlgorithm *_resamplingAlgorithm;$/;"	m	class:UnknownChannelOrderSMCAlgorithm
_resamplingAlgorithm2	algorithms/ML_UnknownChannelOrderSMCAlgorithm.h	/^    ResamplingAlgorithm *_resamplingAlgorithm2;$/;"	m	class:ML_UnknownChannelOrderSMCAlgorithm
_resamplingCriterion	smc/ResamplingAlgorithm.h	/^    ResamplingCriterion _resamplingCriterion;$/;"	m	class:ResamplingAlgorithm
_resamplingRatio	smc/ResamplingCriterion.h	/^	double _resamplingRatio;$/;"	m	class:ResamplingCriterion
_rows	statistics/ARprocess.h	/^	int _nCoefficients, _rows, _columns, _iNextMatrix;$/;"	m	class:ARprocess
_samplingVariance	algorithms/LinearFilterBasedSMCAlgorithm.h	/^	double _ARcoefficient,_samplingVariance,_ARprocessVariance;$/;"	m	class:LinearFilterBasedSMCAlgorithm
_seed	randomutil/Random.h	/^		uint32_t _seed;$/;"	m	class:Random
_simbolosVerdaderos	algorithms/ML_UnknownChannelOrderSMCAlgorithm.h	/^	tMatrix _simbolosVerdaderos;$/;"	m	class:ML_UnknownChannelOrderSMCAlgorithm
_startDetectionObservation	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    int _d,_startDetectionObservation,_startDetectionSymbolVector;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_startDetectionObservation	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^    int _d,_startDetectionObservation,_startDetectionSymbolVector;$/;"	m	class:UnknownChannelOrderSMCAlgorithm
_startDetectionSymbolVector	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    int _d,_startDetectionObservation,_startDetectionSymbolVector;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_startDetectionSymbolVector	algorithms/UnknownChannelOrderSMCAlgorithm.h	/^    int _d,_startDetectionObservation,_startDetectionSymbolVector;$/;"	m	class:UnknownChannelOrderSMCAlgorithm
_startDetectionTime	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^	int _startDetectionTime;$/;"	m	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
_startDetectionTime	algorithms/SMCAlgorithm.h	/^    int _d,_startDetectionTime;$/;"	m	class:SMCAlgorithm
_stateEquationCovariance	filters/KalmanFilter.h	/^	tMatrix _R, _Rtranspose, _stateEquationCovariance;$/;"	m	class:KalmanFilter
_stateTransitionMatrix	algorithms/ViterbiAlgorithm.h	/^    int **_stateTransitionMatrix;$/;"	m	class:ViterbiAlgorithm
_stdDevs	transmision/ChannelDependentNoise.h	/^	double *_stdDevs;$/;"	m	class:ChannelDependentNoise
_symbolVectorLength	smc/Particle.h	/^	int _symbolVectorLength,_nTimeInstants;$/;"	m	class:Particle
_symbolVectors	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^    tMatrix _symbolVectors;$/;"	m	class:KnownSymbolsKalmanBasedChannelEstimator
_symbolVectors	smc/Particle.h	/^	tMatrix _symbolVectors;$/;"	m	class:Particle
_symbols	transmision/Alphabet.h	/^		std::vector<tSymbol> _symbols;$/;"	m	class:Alphabet
_variance	transmision/Alphabet.h	/^		double _mean,_variance;$/;"	m	class:Alphabet
_varianceInvRtildeChannelMatrix	detection/RMMSEDetector.h	/^	tMatrix _E,_varianceInvRtildeChannelMatrix;$/;"	m	class:RMMSEDetector
_weight	smc/Particle.h	/^	double _weight;$/;"	m	class:Particle
arrivalStage	algorithms/ViterbiAlgorithm.h	/^enum tStage {exitStage,arrivalStage};$/;"	e	enum:tStage
channelOrderPdf	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^int ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm::channelOrderPdf(const int& m,const double& p)$/;"	f	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
channelOrderPdf	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^	int channelOrderPdf(const int& m,const double& p);$/;"	p	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
columnwise	util/Util.h	/^enum tOrder {rowwise,columnwise};$/;"	e	enum:tOrder
complexRandn	randomutil/Random.cpp	/^complex<double> Random::complexRandn()$/;"	f	class:Random
complexRandn	randomutil/Random.h	/^		std::complex<double> complexRandn();$/;"	p	class:Random
cost	algorithms/ViterbiAlgorithm.h	/^        double cost;$/;"	m	struct:ViterbiAlgorithm::<anonymous>
dld_link	configure	/^dld_link ();$/;"	f
dlopen	configure	/^dlopen ();$/;"	f
exitStage	algorithms/ViterbiAlgorithm.h	/^enum tStage {exitStage,arrivalStage};$/;"	e	enum:tStage
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	optimized/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	optimized/libtool	/^func_extract_archives ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	optimized/libtool	/^func_infer_tag ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	optimized/libtool	/^func_mktempdir ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	optimized/libtool	/^func_win32_libid ()$/;"	f
getSeed	randomutil/Random.h	/^		uint32_t getSeed() { return _seed; }$/;"	f	class:Random
main	com/com.cpp	/^int main(int argc,char* argv[])$/;"	f
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	config.guess	/^main ()$/;"	f
main	src/pruebas.cpp	/^int main(int argc,char* argv[])$/;"	f
matrix	transmision/Bits.h	/^	tBit *matrix;$/;"	m	class:Bits
nBitsByStream	transmision/Bits.h	/^	int nStreams, nBitsByStream;$/;"	m	class:Bits
nStreams	transmision/Bits.h	/^	int nStreams, nBitsByStream;$/;"	m	class:Bits
operator ()	transmision/Bits.h	/^	tBit operator()(int i,int j) const {return matrix[i*nBitsByStream+j];}$/;"	f	class:Bits
operator *	util/mylapack.h	/^inline tMatrix operator *(tMatrix A,tMatrix B)$/;"	f
operator -	transmision/Bits.cpp	/^int Bits::operator-(const Bits &bits) const$/;"	f	class:Bits
operator -	transmision/Bits.h	/^	int operator-(const Bits &bits) const;$/;"	p	class:Bits
operator =	smc/Particle.cpp	/^void Particle::operator=(const Particle &particle)$/;"	f	class:Particle
operator =	smc/Particle.h	/^	void operator=(const Particle &particle);$/;"	p	class:Particle
operator =	transmision/Bits.cpp	/^Bits& Bits::operator=(const Bits& bits)$/;"	f	class:Bits
operator =	transmision/Bits.h	/^	Bits& operator=(const Bits& bits);$/;"	p	class:Bits
operator ==	transmision/Bits.cpp	/^bool Bits::operator==(const Bits &bits) const$/;"	f	class:Bits
operator ==	transmision/Bits.h	/^	bool operator==(const Bits &bits) const;$/;"	p	class:Bits
operator [	transmision/Alphabet.cpp	/^tSymbol Alphabet::operator [ ](vector<tBit> secuenciaBitsBuscada)$/;"	f	class:Alphabet
operator [	transmision/Alphabet.cpp	/^vector<tBit> Alphabet::operator [ ](tSymbol simbolo)$/;"	f	class:Alphabet
operator []	transmision/ARchannel.h	/^	tMatrix& operator[](int n) const { return _channelMatrices[n];};$/;"	f	class:ARchannel
operator []	transmision/Alphabet.h	/^		std::vector<tBit> operator [](tSymbol simbolo);$/;"	p	class:Alphabet
operator []	transmision/Alphabet.h	/^		tSymbol operator [](int index) { return _symbols[index];}$/;"	f	class:Alphabet
operator []	transmision/Alphabet.h	/^		tSymbol operator [](std::vector<tBit> secuenciaBitsBuscada);$/;"	p	class:Alphabet
operator []	transmision/ChannelDependentNoise.cpp	/^tVector ChannelDependentNoise::operator[](int n)$/;"	f	class:ChannelDependentNoise
operator []	transmision/ChannelDependentNoise.h	/^	tVector operator[](int n);$/;"	p	class:ChannelDependentNoise
operator []	transmision/MIMOChannel.h	/^	virtual tMatrix& operator[](int n) const = 0;$/;"	p	class:MIMOChannel
operator []	transmision/Noise.h	/^	virtual tVector operator[](int n) = 0;$/;"	p	class:Noise
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
rAllSymbolRows	algorithms/ViterbiAlgorithm.h	/^    tRange rAllSymbolRows,rmMinus1FirstColumns;$/;"	m	class:ViterbiAlgorithm
rand	randomutil/Random.h	/^		double rand() { return ((double) rand_r(&_seed))\/((double) RAND_MAX); }$/;"	f	class:Random
randab	randomutil/Random.h	/^		int randab(int a, int b) { return (a+(int) ((double) b*rand_r(&_seed)\/(RAND_MAX+1.0))); };$/;"	f	class:Random
randn	randomutil/Random.cpp	/^double Random::randn ()$/;"	f	class:Random
randn	randomutil/Random.h	/^		double randn();$/;"	p	class:Random
rmMinus1FirstColumns	algorithms/ViterbiAlgorithm.h	/^    tRange rAllSymbolRows,rmMinus1FirstColumns;$/;"	m	class:ViterbiAlgorithm
rowwise	util/Util.h	/^enum tOrder {rowwise,columnwise};$/;"	e	enum:tOrder
sequence	algorithms/ViterbiAlgorithm.h	/^        tMatrix *sequence;$/;"	m	struct:ViterbiAlgorithm::<anonymous>
setSeed	randomutil/Random.h	/^		void setSeed(uint32_t seed) { _seed = seed; }$/;"	f	class:Random
shl_load	configure	/^shl_load ();$/;"	f
tBit	src/types.h	/^typedef unsigned short int tBit;$/;"	t
tLongIntVector	src/types.h	/^typedef LaVectorLongInt tLongIntVector;$/;"	t
tMatrix	src/types.h	/^typedef LaGenMatDouble tMatrix;$/;"	t
tOrder	util/Util.h	/^enum tOrder {rowwise,columnwise};$/;"	g
tRange	src/types.h	/^typedef LaIndex tRange;$/;"	t
tStage	algorithms/ViterbiAlgorithm.h	/^enum tStage {exitStage,arrivalStage};$/;"	g
tState	algorithms/ViterbiAlgorithm.h	/^    } tState;$/;"	t	class:ViterbiAlgorithm
tSymbol	src/types.h	/^typedef double tSymbol;$/;"	t
tVector	src/types.h	/^typedef LaVectorDouble tVector;$/;"	t
~ARchannel	transmision/ARchannel.h	/^	~ARchannel();$/;"	p	class:ARchannel
~ARprocess	statistics/ARprocess.cpp	/^ARprocess::~ARprocess()$/;"	f	class:ARprocess
~ARprocess	statistics/ARprocess.h	/^	~ARprocess();$/;"	p	class:ARprocess
~Algorithm	algorithms/Algorithm.h	/^	virtual ~Algorithm() {};$/;"	f	class:Algorithm
~Bits	transmision/Bits.cpp	/^Bits::~Bits()$/;"	f	class:Bits
~Bits	transmision/Bits.h	/^	~Bits();$/;"	p	class:Bits
~ChannelDependentNoise	transmision/ChannelDependentNoise.cpp	/^ChannelDependentNoise::~ChannelDependentNoise()$/;"	f	class:ChannelDependentNoise
~ChannelDependentNoise	transmision/ChannelDependentNoise.h	/^	~ChannelDependentNoise();$/;"	p	class:ChannelDependentNoise
~ChannelMatrixEstimator	estimation/ChannelMatrixEstimator.h	/^	virtual ~ChannelMatrixEstimator() {};$/;"	f	class:ChannelMatrixEstimator
~KalmanEstimator	estimation/KalmanEstimator.cpp	/^KalmanEstimator::~KalmanEstimator()$/;"	f	class:KalmanEstimator
~KalmanEstimator	estimation/KalmanEstimator.h	/^	~KalmanEstimator();$/;"	p	class:KalmanEstimator
~KnownChannelAlgorithm	algorithms/KnownChannelAlgorithm.cpp	/^KnownChannelAlgorithm::~KnownChannelAlgorithm()$/;"	f	class:KnownChannelAlgorithm
~KnownChannelAlgorithm	algorithms/KnownChannelAlgorithm.h	/^    ~KnownChannelAlgorithm();$/;"	p	class:KnownChannelAlgorithm
~KnownChannelOrderAlgorithm	algorithms/KnownChannelOrderAlgorithm.h	/^	~KnownChannelOrderAlgorithm();$/;"	p	class:KnownChannelOrderAlgorithm
~KnownSymbolsKalmanBasedChannelEstimator	algorithms/KnownSymbolsKalmanBasedChannelEstimator.cpp	/^KnownSymbolsKalmanBasedChannelEstimator::~KnownSymbolsKalmanBasedChannelEstimator()$/;"	f	class:KnownSymbolsKalmanBasedChannelEstimator
~KnownSymbolsKalmanBasedChannelEstimator	algorithms/KnownSymbolsKalmanBasedChannelEstimator.h	/^    ~KnownSymbolsKalmanBasedChannelEstimator();$/;"	p	class:KnownSymbolsKalmanBasedChannelEstimator
~LinearDetector	detection/LinearDetector.h	/^	virtual ~LinearDetector() {};$/;"	f	class:LinearDetector
~LinearFilterBasedISIRAlgorithm	algorithms/LinearFilterBasedISIRAlgorithm.cpp	/^LinearFilterBasedISIRAlgorithm::~LinearFilterBasedISIRAlgorithm()$/;"	f	class:LinearFilterBasedISIRAlgorithm
~LinearFilterBasedISIRAlgorithm	algorithms/LinearFilterBasedISIRAlgorithm.h	/^    ~LinearFilterBasedISIRAlgorithm();$/;"	p	class:LinearFilterBasedISIRAlgorithm
~LinearFilterBasedSMCAlgorithm	algorithms/LinearFilterBasedSMCAlgorithm.cpp	/^LinearFilterBasedSMCAlgorithm::~LinearFilterBasedSMCAlgorithm()$/;"	f	class:LinearFilterBasedSMCAlgorithm
~LinearFilterBasedSMCAlgorithm	algorithms/LinearFilterBasedSMCAlgorithm.h	/^    ~LinearFilterBasedSMCAlgorithm();$/;"	p	class:LinearFilterBasedSMCAlgorithm
~ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm::~ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm()$/;"	f	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
~ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    ~ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm();$/;"	p	class:ML_MultipleChannelEstimatorsPerParticleSMCAlgorithm
~MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.cpp	/^MultipleChannelEstimatorsPerParticleSMCAlgorithm::~MultipleChannelEstimatorsPerParticleSMCAlgorithm()$/;"	f	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
~MultipleChannelEstimatorsPerParticleSMCAlgorithm	algorithms/MultipleChannelEstimatorsPerParticleSMCAlgorithm.h	/^    ~MultipleChannelEstimatorsPerParticleSMCAlgorithm();$/;"	p	class:MultipleChannelEstimatorsPerParticleSMCAlgorithm
~Noise	transmision/Noise.h	/^	virtual ~Noise() {};$/;"	f	class:Noise
~Particle	smc/Particle.cpp	/^Particle::~Particle()$/;"	f	class:Particle
~Particle	smc/Particle.h	/^    virtual ~Particle();$/;"	p	class:Particle
~ParticleFilter	smc/ParticleFilter.cpp	/^ParticleFilter::~ParticleFilter()$/;"	f	class:ParticleFilter
~ParticleFilter	smc/ParticleFilter.h	/^    ~ParticleFilter();$/;"	p	class:ParticleFilter
~ParticleFilterWithChannelOrder	smc/ParticleFilterWithChannelOrder.cpp	/^ParticleFilterWithChannelOrder::~ParticleFilterWithChannelOrder()$/;"	f	class:ParticleFilterWithChannelOrder
~ParticleFilterWithChannelOrder	smc/ParticleFilterWithChannelOrder.h	/^    ~ParticleFilterWithChannelOrder();$/;"	p	class:ParticleFilterWithChannelOrder
~ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.cpp	/^ParticleWithChannelEstimation::~ParticleWithChannelEstimation()$/;"	f	class:ParticleWithChannelEstimation
~ParticleWithChannelEstimation	smc/ParticleWithChannelEstimation.h	/^    ~ParticleWithChannelEstimation();$/;"	p	class:ParticleWithChannelEstimation
~ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.cpp	/^ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP::~ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP()$/;"	f	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP
~ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP	smc/ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP.h	/^    ~ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP();$/;"	p	class:ParticleWithChannelEstimationAndLinearDetectionAndChannelOrderAPP
~UnknownChannelOrderAlgorithm	algorithms/UnknownChannelOrderAlgorithm.cpp	/^UnknownChannelOrderAlgorithm::~UnknownChannelOrderAlgorithm()$/;"	f	class:UnknownChannelOrderAlgorithm
~UnknownChannelOrderAlgorithm	algorithms/UnknownChannelOrderAlgorithm.h	/^    ~UnknownChannelOrderAlgorithm();$/;"	p	class:UnknownChannelOrderAlgorithm
~ViterbiAlgorithm	algorithms/ViterbiAlgorithm.cpp	/^ViterbiAlgorithm::~ViterbiAlgorithm()$/;"	f	class:ViterbiAlgorithm
~ViterbiAlgorithm	algorithms/ViterbiAlgorithm.h	/^    ~ViterbiAlgorithm();$/;"	p	class:ViterbiAlgorithm
~WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.cpp	/^WithLinearDetectionParticleAddon::~WithLinearDetectionParticleAddon()$/;"	f	class:WithLinearDetectionParticleAddon
~WithLinearDetectionParticleAddon	smc/WithLinearDetectionParticleAddon.h	/^    ~WithLinearDetectionParticleAddon();$/;"	p	class:WithLinearDetectionParticleAddon
